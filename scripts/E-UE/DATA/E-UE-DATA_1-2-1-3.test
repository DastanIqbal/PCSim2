###############################################################################
#// Filename: E-UE-DATA_1-2-1-3.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: March 10, 2009
#// Modified by:
#//            Matthew Forbes 2/8/10 - Changed config file.  Added 5 MIB checks for PCSCFTable
#//            for secure and hybrid flows
################################################################################
#// Description:
#//     TC2743 TEST CASE E-UE-DATA 1.2.1.3 - Ability of eUE to Implement the
#//	    P-CSCF  Table
#//
#// Objective:
#//     TThis test verifies the eUE ability to properly implement the P-CSCF defined in
#//     CL-PKTC-EUE-DEV-MIB.
#//
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//
#//
#// Notes:
#//     - Requires provPrimitives.tcl
#//
#//
################################################################################
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-1-3.test 7448 2010-08-06 14:40:49Z ghassler $ }

set test_case E-UE-DATA_1-2-1-3-
set step_num 1

Init_PROV
Init_PART

set NON_WRITABLE 2

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 C.1.2.3.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUEDevPCSCFAddrType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevPCSCFAddrType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_2 "pktcEUEDevPCSCFAddr Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevPCSCFAddr is: $val"
    set hexip [ decIpToHexIp $CMS_IP ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}_3 "pktcEUEDevPCSCFSipPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevPCSCFSipPort is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}_4 "pktcEUEDevPCSCFUsedProtocol Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevPCSCFUsedProtocol is: $val"
    if {$val == 2 || $val == 3} {
        set val 0
    } else {
        set val 1
    }
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}_5 "pktcEUEDevPCSCFUsedInetAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddressType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_6 "pktcEUEDevPCSCFUsedInetAddress Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddress is: $val"
    # set hexip [ decIpToHexIp 0.0.0.0 ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}_7 "pktcEUEDevPCSCFTimer1Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevPCSCFTimer1 is: $val"
} {
    IsEqual $val 500
}

DoStep ${test_case}${step_num}_8 "pktcEUEDevPCSCFTimer2 Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevPCSCFTimer2 is: $val"
} {
    IsEqual $val 4000
}

DoStep ${test_case}${step_num}_9 "pktcEUEDevPCSCFTimer4 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevPCSCFTimer4 is: $val"
} {
    IsEqual $val 5000
}

DoStep ${test_case}${step_num}_10 "pktcEUEDevPCSCFTimerTD Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevPCSCFTimerTD is: $val"
} {
    IsEqual $val 32000
}

DoStep ${test_case}${step_num}_11 "pktcEUEDevPCSCFRowStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 11]
    LogMsg "The Value of pktcEUEDevPCSCFRowStatus is: $val"
} {
    IsEqual $val 1
}

#ADDED 2/8/10 MLF

DoStep ${test_case}${step_num}_12 "pktcEUEDevPCSCFInviteAttempts Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 12]
    LogMsg "The Value of pktcEUEDevPCSCFInviteAttempts is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}_13 "pktcEUEDevPCSCFMaxTime Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 13]
    LogMsg "The Value of pktcEUEDevPCSCFMaxTime is: $val"
} {
    IsEqual $val 1800
}

DoStep ${test_case}${step_num}_14 "pktcEUEDevPCSCFBaseTimeAllFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 14]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllFailed is: $val"
} {
    IsEqual $val 30
}

DoStep ${test_case}${step_num}_15 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 15]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllNotFailed is: $val"
} {
    IsEqual $val 90
}

DoStep ${test_case}${step_num}_16 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 16]
    LogMsg "The Value of pktcEUEDevPCSCFSubscribeRetry is: $val"
} {
    IsEqual $val 900
}

DoStep ${test_case}[incr step_num] "pktcEUEDevPCSCFAddrType Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUEDevPCSCFAddrType INTEGER 2 $MTA_IP]
    LogMsg "The Value of pktcEUEDevPCSCFAddrType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure1"
} { PASS_STEP }

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap_PCSCF_FQDN.cfg
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 C.1.2.9.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUEDevPCSCFAddrType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevPCSCFAddrType is: $val"
} {
    IsEqual $val 16
}

DoStep ${test_case}${step_num}_2 "pktcEUEDevPCSCFAddr Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevPCSCFAddr is: $val"
    # set hexip [ decIpToHexIp $CMS_IP ]
} {
    IsEqual $val "pcscf1.redlab.com"
}

DoStep ${test_case}${step_num}_3 "pktcEUEDevPCSCFSipPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevPCSCFSipPort is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}_4 "pktcEUEDevPCSCFUsedProtocol Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevPCSCFUsedProtocol is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}_5 "pktcEUEDevPCSCFUsedInetAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddressType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_6 "pktcEUEDevPCSCFUsedInetAddress Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddress is: $val"
    # set hexip [ decIpToHexIp 0.0.0.0 ]
    set hexip [ decIpToHexIp 255.255.255.255 ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}_7 "pktcEUEDevPCSCFTimer1Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevPCSCFTimer1 is: $val"
} {
    IsEqual $val 500
}

DoStep ${test_case}${step_num}_8 "pktcEUEDevPCSCFTimer2 Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevPCSCFTimer2 is: $val"
} {
    IsEqual $val 4000
}

DoStep ${test_case}${step_num}_9 "pktcEUEDevPCSCFTimer4 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevPCSCFTimer4 is: $val"
} {
    IsEqual $val 5000
}

DoStep ${test_case}${step_num}_10 "pktcEUEDevPCSCFTimerTD Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevPCSCFTimerTD is: $val"
} {
    IsEqual $val 32000
}

DoStep ${test_case}${step_num}_11 "pktcEUEDevPCSCFRowStatusContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 11]
    LogMsg "The Value of pktcEUEDevPCSCFRowStatus is: $val"
} {
    IsEqual $val 1
}

#ADDED 2/8/10 MLF

DoStep ${test_case}${step_num}_12 "pktcEUEDevPCSCFInviteAttempts Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 12]
    LogMsg "The Value of pktcEUEDevPCSCFInviteAttempts is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}_13 "pktcEUEDevPCSCFMaxTime Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 13]
    LogMsg "The Value of pktcEUEDevPCSCFMaxTime is: $val"
} {
    IsEqual $val 1800
}

DoStep ${test_case}${step_num}_14 "pktcEUEDevPCSCFBaseTimeAllFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 14]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllFailed is: $val"
} {
    IsEqual $val 30
}

DoStep ${test_case}${step_num}_15 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 15]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllNotFailed is: $val"
} {
    IsEqual $val 90
}

DoStep ${test_case}${step_num}_16 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 16]
    LogMsg "The Value of pktcEUEDevPCSCFSubscribeRetry is: $val"
} {
    IsEqual $val 900
}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure2"
} { PASS_STEP }

set step_num 1

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 HybridFlow_BasicCall_DigitMap_Inactive.cfg
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 C.1.2.3.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

## Get all the values and verify

DoStep ${test_case}[incr step_num]h_1 "pktcEUEDevPCSCFAddrType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevPCSCFAddrType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_2 "pktcEUEDevPCSCFAddr Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevPCSCFAddr is: $val"
    set hexip [ decIpToHexIp $CMS_IP ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}h_3 "pktcEUEDevPCSCFSipPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevPCSCFSipPort is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}h_4 "pktcEUEDevPCSCFUsedProtocol Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevPCSCFUsedProtocol is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}h_5 "pktcEUEDevPCSCFUsedInetAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddressType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_6 "pktcEUEDevPCSCFUsedInetAddress Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddress is: $val"
    # set hexip [ decIpToHexIp 0.0.0.0 ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}h_7 "pktcEUEDevPCSCFTimer1Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevPCSCFTimer1 is: $val"
} {
    IsEqual $val 500
}

DoStep ${test_case}${step_num}h_8 "pktcEUEDevPCSCFTimer2 Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevPCSCFTimer2 is: $val"
} {
    IsEqual $val 4000
}

DoStep ${test_case}${step_num}h_9 "pktcEUEDevPCSCFTimer4 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevPCSCFTimer4 is: $val"
} {
    IsEqual $val 5000
}

DoStep ${test_case}${step_num}h_10 "pktcEUEDevPCSCFTimerTD Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevPCSCFTimerTD is: $val"
} {
    IsEqual $val 32000
}

DoStep ${test_case}${step_num}h_11 "pktcEUEDevPCSCFRowStatusContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 11]
    LogMsg "The Value of pktcEUEDevPCSCFRowStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_12 "pktcEUEDevPCSCFInviteAttempts Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 12]
    LogMsg "The Value of pktcEUEDevPCSCFInviteAttempts is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}h_13 "pktcEUEDevPCSCFMaxTime Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 13]
    LogMsg "The Value of pktcEUEDevPCSCFMaxTime is: $val"
} {
    IsEqual $val 1800
}

DoStep ${test_case}${step_num}h_14 "pktcEUEDevPCSCFBaseTimeAllFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 14]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllFailed is: $val"
} {
    IsEqual $val 30
}

DoStep ${test_case}${step_num}h_15 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 15]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllNotFailed is: $val"
} {
    IsEqual $val 90
}

DoStep ${test_case}${step_num}h_16 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 16]
    LogMsg "The Value of pktcEUEDevPCSCFSubscribeRetry is: $val"
} {
    IsEqual $val 900
}

DoStep ${test_case}[incr step_num]h "pktcEUEDevPCSCFAddrType Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcEUEDevPCSCFAddrType INTEGER 2 $MTA_IP]
    LogMsg "The Value of pktcEUEDevPCSCFAddrType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid1"
} { PASS_STEP }

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 HybridFlow_BasicCall_DigitMap_Inactive_PCSCF_FQDN.cfg
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 C.1.2.9.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

## Get all the values and verify

DoStep ${test_case}[incr step_num]h_1 "pktcEUEDevPCSCFAddrType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevPCSCFAddrType is: $val"
} {
    IsEqual $val 16
}

DoStep ${test_case}${step_num}h_2 "pktcEUEDevPCSCFAddr Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevPCSCFAddr is: $val"
} {
    IsEqual $val "pcscf1.redlab.com"
}

DoStep ${test_case}${step_num}h_3 "pktcEUEDevPCSCFSipPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevPCSCFSipPort is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}h_4 "pktcEUEDevPCSCFUsedProtocol Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevPCSCFUsedProtocol is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}h_5 "pktcEUEDevPCSCFUsedInetAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddressType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_6 "pktcEUEDevPCSCFUsedInetAddress Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevPCSCFUsedInetAddress is: $val"
    # set hexip [ decIpToHexIp 0.0.0.0 ]
    set hexip [ decIpToHexIp 255.255.255.255 ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}h_7 "pktcEUEDevPCSCFTimer1Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevPCSCFTimer1 is: $val"
} {
    IsEqual $val 500
}

DoStep ${test_case}${step_num}h_8 "pktcEUEDevPCSCFTimer2 Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevPCSCFTimer2 is: $val"
} {
    IsEqual $val 4000
}

DoStep ${test_case}${step_num}h_9 "pktcEUEDevPCSCFTimer4 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevPCSCFTimer4 is: $val"
} {
    IsEqual $val 5000
}

DoStep ${test_case}${step_num}h_10 "pktcEUEDevPCSCFTimerTD Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevPCSCFTimerTD is: $val"
} {
    IsEqual $val 32000
}

DoStep ${test_case}${step_num}h_11 "pktcEUEDevPCSCFRowStatusContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 11]
    LogMsg "The Value of pktcEUEDevPCSCFRowStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_12 "pktcEUEDevPCSCFInviteAttempts Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 12]
    LogMsg "The Value of pktcEUEDevPCSCFInviteAttempts is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}h_13 "pktcEUEDevPCSCFMaxTime Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 13]
    LogMsg "The Value of pktcEUEDevPCSCFMaxTime is: $val"
} {
    IsEqual $val 1800
}

DoStep ${test_case}${step_num}h_14 "pktcEUEDevPCSCFBaseTimeAllFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 14]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllFailed is: $val"
} {
    IsEqual $val 30
}

DoStep ${test_case}${step_num}h_15 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 15]
    LogMsg "The Value of pktcEUEDevPCSCFBaseTimeAllNotFailed is: $val"
} {
    IsEqual $val 90
}

DoStep ${test_case}${step_num}h_16 "pktcEUEDevPCSCFBaseTimeAllNotFailed Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevPCSCFTable.1 $MTA_IP 16]
    LogMsg "The Value of pktcEUEDevPCSCFSubscribeRetry is: $val"
} {
    IsEqual $val 900
}

DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid2"
} { PASS_STEP }

DoStep ${test_case}[incr step_num] "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


############### Reset CM and MTA and Verify Provisioning ################

DoStep ${test_case}[incr step_num] "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup


