<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################

 Change History: (Author & Date)
 botte, 02/09/2012 - Removed Dual stack logic that will be tested in separate scripts.
 botte, 02/09/2012 - Modified, removed, and added IPv6 only verifications.

-->
<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8375 $" name="EUE Prov B.2.1.x"
		descrip="Implements common procedures for appendix B.2.1.1 and B.2.1.2 of EUE Prov ATP."
		number="EUE Prov B.2.1.x">

	<!-- Next we define the each of state machines -->
	<template file="./templates/EUE_Prov_B_1_1_1.xml" name="RebootCM"/>

	<add_to fsm="RebootCM">
		<transition from="StartCapture_RebootWait" to="DHCPServerVerify" event="TimerExpired"/>

		<state ID="DHCPServerVerify">
			<prelude once="true">
				<sleep time="120000"/>
				<stop_capture/>

				<parse_capture name="eCM_V4">
					<parser_filter protocol="bootp" clientMAC="DUT.CM MAC Address"/>
				</parse_capture>
				<parse_capture name="eCM_V6">
					<parser_filter protocol="dhcpv6" clientMAC="DUT.CM MAC Address"/>
				</parse_capture>
				<parse_capture name="eCM_Prov">
					<parser_filter ip="DUT.CM IP Address"/>
				</parse_capture>

				<generate event="Branch1Event"/>

				<var name="ipv4">
					<expr>false</expr>
				</var>
				<var name="ipv6">
					<expr>false</expr>
				</var>
				<var name="DocsisVersion">
					<expr>0</expr>
				</var>
			</prelude>
			<response>
				<if>
					<ipv4>
						<msg_ref type="platform">DUT.IP</msg_ref>
					</ipv4>
				<then>
					<assign name="ipv4">
						<expr>true</expr>
					</assign>
				</then>
				<elseif>
					<ipv6>
						<msg_ref type="platform">DUT.IP</msg_ref>
					</ipv6>
				<then>
					<assign name="ipv6">
						<expr>true</expr>
					</assign>
				</then>
				</elseif>
				</if>
				<if>
					<eq>
						<msg_ref type="platform">DUT.DHCP Version</msg_ref>
						<expr>4</expr>
					</eq>
				<then>
					<generate event="Branch2Event"/>
				</then>
				<elseif>
					<eq>
						<msg_ref type="platform">DUT.DHCP Version</msg_ref>
						<expr>6</expr>
					</eq>
				<then>
					<generate event="Branch3Event"/>
				</then>
				</elseif>
				</if>
			</response>
			<transition to="DHCPServerType" event="Branch1Event"/>
		</state>

		<state ID="DHCPServerType">
			<transition to="DHCPv4 Server" event="Branch2Event"/>
			<transition to="DHCPv6 Server" event="Branch3Event"/>
		</state>
				
		<state ID="DHCPv4 Server">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>DOCS-CABLE-DEVICE-MIB::docsDevServerBootState.0</expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2c for a CM -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="platform">DUT.DOCSIS Version</msg_ref>
						<expr>1.1</expr>
					</eq>
					<then>
						<verify step="3" group="DocsisVer">
							<and>
								<startsWith>
									<capture_ref type="bootp" name="eCM_V4">Discover.Option60.vendor_class_id.show</capture_ref>
									<expr>docsis1.1:</expr>
								</startsWith>
								<gt>
									<capture_ref type="bootp" name="eCM_V4" length="true">Discover.Option60.vendor_class_id.show</capture_ref>
									<expr>11</expr>
								</gt>
							</and>
							<then>
								<assign name="DocsisVersion">
									<expr>1.1</expr>
								</assign>
							</then>
						</verify>
					</then>
					<elseif>
						<eq>
							<msg_ref type="platform">DUT.DOCSIS Version</msg_ref>
							<expr>2.0</expr>
						</eq>
						<then>
							<!-- Expand test to verify begins with 05 and length greater than 3 for 1.1 and 2.0 -->
							<verify step="3" group="DocsisVer">
								<and>
									<startsWith>
										<capture_ref type="bootp" name="eCM_V4">Discover.Option60.vendor_class_id.show</capture_ref>
										<expr>docsis2.0:</expr>
									</startsWith>
									<gt>
										<capture_ref type="bootp" name="eCM_V4" length="true">Discover.Option60.vendor_class_id.show</capture_ref>
										<expr>11</expr>
									</gt>
								</and>
								<then>
									<assign name="DocsisVersion">
										<expr>2</expr>
									</assign>
								</then>
							</verify>
						</then>
					</elseif>
					<elseif>
						<eq>
							<msg_ref type="platform">DUT.DOCSIS Version</msg_ref>
							<expr>3.0</expr>
						</eq>
						<then>
							<verify step="3" group="DocsisVer">
								<!-- test length is 59 or less -->
								<and>
									<eq>
										<capture_ref type="bootp" name="eCM_V4">Discover.Option60.vendor_class_id.show</capture_ref>
										<expr>docsis3.0:</expr>
									</eq>
									<eq>
										<capture_ref type="bootp" name="eCM_V4" length="true">Discover.Option60.vendor_class_id.show</capture_ref>
										<expr>10</expr>
									</eq>
								</and>
								<then>
									<assign name="DocsisVersion">
										<expr>3</expr>
									</assign>
								</then>
							</verify>
						</then>
					</elseif>
				</if>
				
				<verify step="4" group="step4">
					<eq ignoreCase="true">
						<capture_ref type="bootp" name="eCM_V4">Discover.mac_addr</capture_ref>
						<msg_ref type="platform">DUT.CM MAC Address</msg_ref>
					</eq>
				</verify>

				<!-- STEP 5, 6 (PP) B.2.1.1 If eUE supports IPV4, check for following options in Discover-->
				<verify step="5" group="step5">
					<!-- Add verify for 43 using setting to state ECM and ECM:EDVA -->
					<and>
						<notnull>
							<capture_ref type="bootp" name="eCM_V4">Discover.Option125.suboption1</capture_ref>
						</notnull>
					<and>	
						<notnull>
							<capture_ref type="bootp" name="eCM_V4">Discover.Option125.suboption124</capture_ref>
						</notnull>
					<and>	
						<notnull>
							<capture_ref type="bootp" name="eCM_V4">Discover.Option55.suboption122</capture_ref>
						</notnull>
					<and>
						<eq>
							<capture_ref type="bootp" name="eCM_V4">Discover.Option43.suboption2.device_type.show</capture_ref>
							<expr>ECM</expr>
						</eq>
						<contains>
							<capture_ref type="bootp" name="eCM_V4">Discover.Option43.suboption3.esafe_type.show</capture_ref>
							<expr>ECM:EDVA</expr>
						</contains>
					</and>
					</and>
					</and>
					</and>
				</verify>

				<verify step="6" group="step6">
					<or>
					<!-- when option 125 is not used to embed option 123 & 124 --> 
						<and>
							<notnull>
								<capture_ref type="bootp" name="eCM_V4">Offer.Option122.suboption1</capture_ref>
							</notnull>
						<and>
							<eq>
								<capture_ref type="bootp" name="eCM_V4">Offer.Option123.suboption1.show</capture_ref>
								<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
							</eq>
							<notnull>
								<capture_ref type="bootp" name="eCM_V4">Offer.Option123.suboption1</capture_ref>
							</notnull>
						</and>
						</and>
					<!-- when option 125 is used to embed option 123 & 124 --> 
						<and>
							<notnull>
								<capture_ref type="bootp" name="eCM_V4">Offer.Option122.suboption1</capture_ref>
							</notnull>
						<and>
							<notnull>
								<capture_ref type="bootp" name="eCM_V4">Offer.Option125.suboption123</capture_ref>
								<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
							</notnull>
							<notnull>
								<capture_ref type="bootp" name="eCM_V4">Offer.Option125.suboption124</capture_ref>
							</notnull>
						</and>
						</and>					
					</or>
				</verify>
				
				<!-- STEP 7 (PP) B.2.1.1   Options in REQUEST-->
				<verify step="7" group="step7">
					<!--  Test Request sent to proper DHCP Server IP address also need Option 43 tests here. -->
					<and>
						<notnull>
							<capture_ref type="bootp" name="eCM_V4">Request.Option55.suboption122</capture_ref>
						</notnull>
					<and>
						<eq>
							<capture_ref type="bootp" name="eCM_V4">Request.ip.dst_host.show</capture_ref>
							<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
						</eq>
					<and>
						<eq>
							<capture_ref type="bootp" name="eCM_V4">Request.Option43.suboption2.device_type.show</capture_ref>
							<expr>ECM</expr>
						</eq>
						<contains>
							<capture_ref type="bootp" name="eCM_V4">Request.Option43.suboption3.esafe_type.show</capture_ref>
							<expr>ECM:EDVA</expr>
						</contains>
					</and>
					</and>
					</and>
				</verify>
				
				<verify step="8" group="step8">
					<gt>
						<capture_ref type="bootp" name="eCM_V4">ACK.num</capture_ref>
						<expr>0</expr>
					</gt>
				</verify>
				
				<verify step="9" group="step9">
					<and>
						<eq>
							<capture_ref type="bootp" name="eCM_V4">ACK.file.show</capture_ref>
							<capture_ref type="tftp" name="eCM_Prov">Read Request.source_file.show</capture_ref>
						</eq>
						<eq>
							<capture_ref type="tftp" name="eCM_Prov">Read Request.ip.dst_host.show</capture_ref>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</eq>
					</and>
				</verify>
				
				<verify step="10" group="step10">
					<and>
						<notnull>
							<capture_ref type="time" name="eCM_Prov">Request.num</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="time" name="eCM_Prov">Response.num</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="tftp" name="eCM_Prov">Read Request.num</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="tftp" name="eCM_Prov">Data Packet.num</capture_ref>
						</notnull>
						<notnull>
							<capture_ref type="tftp" name="eCM_Prov">Acknowledgement.num</capture_ref>
						</notnull>
					</and>
					</and>
					</and>
					</and>
				</verify>

				<verify step="11" group="step11">
					<contains>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</contains>
				</verify>
			</response>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>

		<state ID="DHCPv6 Server">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<!-- <expr>DOCS-IF3-MIB::docsIf3CmStatusValue.0</expr> -->
						<expr>DOCS-CABLE-DEVICE-MIB::docsDevServerBootState.0</expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<mod modtype="replace" hdr="version">
                    	<expr>2c</expr>
                    </mod>
				</send>
			</prelude>
			<response>
				<verify step="3" group="DocsisVer">
					<neq>
						<expr>Does IPv6 require this IPv4 verification step?</expr>
						<expr>No, IPv6 does not - just balancing the DocsisVer 'group' attribute.</expr>
					</neq>
				</verify>
				
				<verify step="4" group="step4">
					<neq>
						<expr>Does IPv6 require this IPv4 verification step?</expr>
						<expr>No, IPv6 does not - just balancing the DocsisVer 'group' attribute.</expr>
					</neq>
				</verify>				
				
			<!-- 2.1.2 SOLICIT, ADVERTISE, REQUEST -->
				<!-- Step 3 SOLICIT message, OPTION_VENDOR_OPTS(17), sub-options/values
					- CL_OPTION_ORO(1)
					- CL_OPTION_IP_PREF(39)
					- CL_OPTION_CCC (2170)
					- CL_OPTION_CCCV6(2171)
					- CL_OPTION_IP_PREF(39) value 0x111
				-->
				<verify step="3" group="step5">
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption1.showname</capture_ref>
							<expr>1</expr>
						</contains>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption1.showname</capture_ref>
							<expr>39</expr>
						</contains>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption1.showname</capture_ref>
							<expr>2170</expr>
						</contains>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption1.showname</capture_ref>
							<expr>2171</expr>
						</contains>
					    <or>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption39.showname</capture_ref>
							<expr>1</expr>
						</contains>
					    <or>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption39.showname</capture_ref>
							<expr>2</expr>
						</contains>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption39.showname</capture_ref>
							<expr>6</expr>
						</contains>
						</or>
						</or>
					</and>
					</and>
					</and>
					</and>
				</verify>

				<!-- Step 4 - ADVERTISE to eCM contains
					CL_OPTION_IP_PREF(39) (value of '2' (IPv6 only mode)) 
					CL_OPTION_CCC (2170)  sub-option 1 values 
					CL_OPTION_CCCV6(2171) sub-option 1 value
				-->
				<verify step="4" group="step6">
					<and>
					<or>
						<contains>
							<!--<capture_ref type="dhcpv6" name="eCM_V6" substring="30">Advertise.Option17.suboption39.show</capture_ref> -->
							<capture_ref type="dhcpv6" name="eCM_V6">Advertise.Option17.suboption39.showname</capture_ref>
							<expr>IPv4</expr>
						</contains>
					<or>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Advertise.Option17.suboption39.showname</capture_ref>
							<expr>IPv6</expr>
						</contains>
						<contains>
							<capture_ref type="dhcpv6" name="eCM_V6">Advertise.Option17.suboption39.showname</capture_ref>
							<expr>Dual Stack</expr>
						</contains>
					</or>
					</or>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eCM_V6">Advertise.Option17.suboption2170</capture_ref>
						</notnull>
						<notnull>
							<capture_ref type="dhcpv6" name="eCM_V6">Advertise.Option17.suboption2171</capture_ref>
						</notnull>
					</and>
					</and>
				</verify>

				<!-- STEP 5 Options in REQUEST
					eCM REQUEST message sent with proper option codes and corresponding values.
				-->
				<verify step="5" group="step7">
					<eq>
						<capture_ref type="dhcpv6" name="eCM_V6">Solicit.Option17.suboption1.show</capture_ref>
						<capture_ref type="dhcpv6" name="eCM_V6">Request.Option17.suboption1.show</capture_ref>
					</eq>
				</verify>

				<!-- STEP 6 REPLY sent to eCM. -->
				<verify step="6" group="step8">
					<gt>
						<capture_ref type="dhcpv6" name="eCM_V6">Reply.num</capture_ref>
						<expr>0</expr>
					</gt>
				</verify>

				<!-- STEP 7 TFTP
					TFTP download file name.
					CM issues TFTP Read Request containing boot file name given in DHCP ACK.
					The corresponding TFTP ACK confirms download of proper configuration file.
				-->				
				<verify step="7" group="step9">
					<contains>
						<capture_ref type="tftp" name="eCM_Prov">Read Request.source_file.show</capture_ref>
						<msg_ref type="platform">DUT.DOCSIS Configuration File</msg_ref>
					</contains>
				</verify>
				
				<!-- STEP 8 Device sends messages to complete the provisioning process,
					including time of day and tftp. -->
				<verify step="8" group="step10">
					<and>
						<notnull>
							<capture_ref type="time" name="eCM_Prov">Request.num</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="time" name="eCM_Prov">Response.num</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="tftp" name="eCM_Prov">Read Request.num</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="tftp" name="eCM_Prov">Data Packet.num</capture_ref>
						</notnull>
						<notnull>
							<capture_ref type="tftp" name="eCM_Prov">Acknowledgement.num</capture_ref>
						</notnull>
					</and>
					</and>
					</and>
					</and>
				</verify>
				
				<verify step="9" group="step11">
					<contains>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</contains>
				</verify>
			</response>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	</add_to>
</pc2xml>