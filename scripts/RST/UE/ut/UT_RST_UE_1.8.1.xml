<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<pc2xml version="$Revision: 8188 $" name="UT_RST_UE_1.8.1" 
	descrip="This is a unit test script for the RST_UE_1.8.1.xml test case" 
	number="1">
	<fsm name="UE0">
		<models>
			<session/>
		</models>
		<NE sim_type="term" elements="DUT" targets="UE0 DUT"/>
		<states initialstate="Register">
			<state ID="PendingRegister" timer="500">
				<transition to="Setup" event="Registered"/>
				<transition to="Register" event="TimerExpired"/>
			</state>
			<!-- REGISTER State -->
			<state ID="Register">
				<prelude>
					<send protocol="sip" msgtype="Register" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="Digest" event="401-Register"/>
				<transition to="Setup" event="200-Register"/>
			</state>
			<state ID="Digest">
				<prelude>
					<send protocol="sip" msgtype="Register" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="Setup" event="200-Register"/>
			</state>
			<!-- SETUP STATE -->
			<state ID="Setup">
				<!-- Step 1 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram -
               Test 18x response for reliability for possible Prack message- send Invite -->
				<prelude>
					<log promptUser="true" expr="Start the test script if you haven't already."/>
					<sleep time="3000"/>
					<send protocol="sip" msgtype="Invite" target="UE1" originator="DUT">
						<mod modtype="add" hdr="Supported">
							<expr>join</expr>
						</mod>
					</send>
				</prelude>
				<!-- Expected responses are 100, 180, 183 or 200 -->
				<response>
					<!-- Step 4 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram -
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Setup state -->
				<transition from="Setup" to="Proceeding" event="100-INVITE"/>
				<transition from="Setup" to="Alerting" event="180-INVITE"/>
				<transition from="Setup" to="Alerting" event="183-INVITE"/>
				<transition from="Setup" to="Connected" event="200-INVITE"/>
			</state>
			<!-- PROCEEDING STATE -->
			<!-- Step 2 from the Default Message Flow Call-Term-at-UE(DUT) 
           Sequence Diagram - received 100-Invite -->
			<state ID="Proceeding">
				<!-- Expected responses are 180, 183 or 200 -->
				<response>
					<!-- Step 4 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram-
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<!-- Step 3 from the Default Message Flow Call-Term-at-UE(DUT) 
                   Sequence Diagram- send Prack -->
							<send protocol="sip" msgtype="Prack" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Proceeding state -->
				<transition from="Proceeding" to="Alerting" event="180-INVITE"/>
				<transition from="Proceeding" to="Alerting" event="183-INVITE"/>
				<transition from="Proceeding" to="Connected" event="200-INVITE"/>
			</state>
			<!-- ALERTING STATE -->
			<!-- Step 5 from the Default Message Flow Call-Term-at-UE(DUT) 
           Sequence Diagram- requires no special processing we simply need a transition 
			     back to this state. -->
			<state ID="Alerting" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Take DUT phone off hook-->
							<send protocol="utility" msgtype="OffHook"/>
						</then>
					</if>
					<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
					<!-- Step 6 from the Default Message Flow Call-Term-at-UE(DUT) 
               Sequence Diagram - received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) 
                   Sequence Diagram- received UPDATE -->
							<!--QoS required for test, sending a 200-OK to Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" target="UE1" originator="DUT"/>
						</then>
						<!-- Step 8 from the Default Message Flow Call-Term-at-UE(DUT) 
                 Sequence Diagram - received 180 -->
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
									<expr>180</expr>
								</eq>
								<contains>
									<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
									<expr>100rel</expr>
								</contains>
							</and>
							<then>
								<!--Reliablity required for test, sending Prack message to peer.-->
								<send protocol="sip" msgtype="Prack" target="UE1" originator="DUT"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Alerting state -->
				<transition to="Alerting" event="200-PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Alerting" event="18x-INVITE"/>
				<transition to="Answer" event="TimerExpired"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- ANSWER STATE -->
			<state ID="Answer">
				<response>
					<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) 
									Sequence Diagram- received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Update" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Answer state -->
				<transition to="Answer" event="UPDATE"/>
				<transition to="Answer" event="200-PRACK"/>
				<transition to="Answer" event="18x-INVITE"/>
				<transition to="Answer" event="OffHookComplete"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- CONNECTED State -->
			<state ID="Connected">
				<prelude>
					<send protocol="sip" msgtype="ACK" target="UE1" originator="DUT"/>
				</prelude>
				<postlude>
					<send protocol="sip" msgtype="200-SUBSCRIBE" target="UE2" originator="DUT"/>
					<send protocol="sip" msgtype="NOTIFY" subscribeType="dialog" target="UE2" originator="DUT">
						<mod modtype="add" hdr="dialog" param="call-id" body="dialog-info+xml">
							<var_expr>
								<msg_ref type="sip" msg_instance="first">INVITE.Call-ID</msg_ref>
								<expr>&quot; local-tag=&quot;</expr>
								<msg_ref type="sip" msg_instance="first">200-INVITE.To.tag</msg_ref>
								<expr>&quot; remote-tag=&quot;</expr>
								<msg_ref type="sip" msg_instance="first">200-INVITE.From.tag</msg_ref>
							</var_expr>
						</mod>
					</send>
 				</postlude>
				<transition to="Operator" event="Subscribe"/>
			</state>
			<state ID="Operator">
				<transition	to="Joining" event="200-NOTIFY"/>
			</state>
			
			<state ID="Joining">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="100-INVITE" target="UE2" originator="DUT"/>
							<verify step="3">
								<and>
									<notnull>
										<msg_ref type="sip">INVITE.Join</msg_ref>
									</notnull>
								<and>
									<eq>
										<msg_ref type="sip">INVITE.Join.call-id</msg_ref>
										<msg_ref type="dialog-info+xml" msg_instance="last" xml_value="true">NOTIFY.dialog.call-id</msg_ref>
									</eq>
								<and>
									<eq>
										<msg_ref type="sip">INVITE.Join.from-tag</msg_ref>
										<msg_ref type="dialog-info+xml" msg_instance="last" xml_value="true">NOTIFY.dialog.local-tag</msg_ref>
									</eq>
									<eq>
										<msg_ref type="sip">INVITE.Join.to-tag</msg_ref>
										<msg_ref type="dialog-info+xml" msg_instance="last" xml_value="true">NOTIFY.dialog.remote-tag</msg_ref>
									</eq>
								</and>
								</and>
								</and>
							</verify>
							<verify step="3">
								<eq>
									<msg_ref type="sip">INVITE.P-Asserted-Identity.addr-spec</msg_ref>
									<expr>operator ID</expr>
								</eq>
							</verify>
						</then>
					</if>
					<if>
						<and>
							<eq>
								<msg_ref type="extensions">precondition</msg_ref>
								<expr>require</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
									<expr>precondition</expr>
								</contains>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
									<expr>precondition</expr>
								</contains>
							</or>
						</and>
						<then>
							<!--Sending 183-Invite with answer-->
							<send protocol="sip" msgtype="183-Invite" target="UE2" originator="DUT"/>
						</then>
						<elseif>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>Invite</expr>
							</eq>
							<then>
								<!--Sending 180-Invite with SS not supporting precondition.-->
								<send protocol="sip" msgtype="180-Invite" target="UE2" originator="DUT"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Setup state -->
				<transition to="Alerting2" event="INVITE"/>
			</state>
			
			<state ID="Alerting2" timer="3000">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>PRACK</expr>
							</eq>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test sending 200-Prack message to peer.-->
							<send protocol="sip" msgtype="200-PRACK" target="UE2" originator="DUT"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" target="UE2" originator="DUT"/>
						</then>
					</if>
					<!-- Test whether to send 180 -->
					<!-- Step 8 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Status-Code</msg_ref>
								<expr>183</expr>
							</contains>
							<eq>
								<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
								<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
							</eq>
						</and>
						<then>
							<!--Sending 180 for required preconditions.-->
							<send protocol="sip" msgtype="180-Invite" target="UE2" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Alerting state -->
				<transition to="Alerting2" event="PRACK"/>
				<transition to="Alerting2" event="UPDATE"/>
				<transition to="Answer2" event="TimerExpired"/>
			</state>
			
			<state ID="Answer2">
				<prelude once="true">
					<!--Sending 200-Invite-->
					<send protocol="sip" msgtype="200-INVITE" target="UE2" originator="DUT"/>
				</prelude>
				<response>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" target="UE2" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Answer state -->
				<transition to="Answer2" event="UPDATE"/>
				<transition to="Answer2" event="TimerExpired"/>
				<transition to="Connected2" event="ACK"/>
			</state>
			
			<state ID="Connected2">
				<postlude>
					<send protocol="sip" msgtype="200-BYE" target="UE1" originator="DUT"/>
					<send protocol="sip" msgtype="BYE" target="UE2" originator="DUT"/>
				</postlude>
				<transition to="END" event="BYE"/>
			</state>
					
			<state ID="CallComplete">	
				<transition to="END" event="200-BYE"/>
			</state>
		</states>
	</fsm>
</pc2xml>
