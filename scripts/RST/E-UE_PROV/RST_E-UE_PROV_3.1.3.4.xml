<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################

 Change History: (Author & Date)

-->

<pc2xml version="$Revision: 8188 $" name="RST_E-UE_PROV 3.1.3.4"
		descrip="Ability of RST eUE to Implement the User and Network Announcement Call Feature Tables"
		number="RST_E-UE_PROV 3.1.3.4">

	<!-- Next we define the each of state machines -->
	<template file="./templates/EUE_Prov_B_1_1_1.xml" name="RebootCM"/>

	<add_to fsm="RebootCM">
		<transition from="StartCapture_RebootWait" to="VerifyProvision" event="TimerExpired"/>
		
		<state ID="VerifyProvision">
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="2">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="GetRSTAncTable" event="SNMPResp"/>
			<transition to="GetRSTAncTable" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTAncTable">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="3">
					<and>
						<!--  Test for pktcEUERSTAncPrefLang  -->
						<eq ignoreCase="true">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>199</expr>
						</eq>
						<!-- Test for pktcEUERSTAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>	
				</verify>
			</response>
			<transition to="GetRSTNfAncTable" event="SNMPResp"/>
			<transition to="GetRSTNfAncTable" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncTable">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="4">
					<and>
						<!-- Test for pktcEUERSTNfAncRes   -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>URI for media server</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncDomain  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>cablelabs.com</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncPath   -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>announcement path URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMIMEType  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 4 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMapTable" event="SNMPResp"/>
			<transition to="GetRSTNfAncMapTable" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMapTable">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="5">
					<and>
						<!-- Test for pktcEUERSTNfAncMapRspCode  -->
						<gte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>400</expr>
						</gte>
					<and>
						<lte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>603</expr>
						</lte>
					<and>
						<!--  Test for pktcEUERSTNfAncMapURI   -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>response code URI</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMapStatus  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMediaMapTable" event="SNMPResp"/>
			<transition to="GetRSTNfAncMediaMapTable" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMediaMapTable">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="6">
					<and>
						<!-- Test for pktcEUERSTNfAncMediaId  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaCachMaxAge    -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>3600</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMediaStatus   -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMLocalMediaTable" event="SNMPResp"/>
			<transition to="GetRSTNfAncMLocalMediaTable" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMLocalMediaTable">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="7">
					<and>
						<!-- Test for pktcEUERSTNfAncLclMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaType  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaData  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncLclMediaStatus  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<postlude>
				<stop_capture/>
			</postlude>
			<transition to="EDVAIPv4Hybrid" event="SNMPResp"/>
			<transition to="EDVAIPv4Hybrid" event="SNMPRespFailure"/>
		</state>
		
		<state ID="EDVAIPv4Hybrid" provFile="MAC_H.bin" 
				policyFile="3basic.cfg" nextState="Reboot2"/>
				
		<state ID="Reboot2" timer="10000">
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot2" event="SNMPResp"/>
			<transition to="Register2" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot2" event="REGISTER"/>
		</state>
		
		<state ID="Register2">
			<transition to="Provisioned2" event="Registered"/>
		</state>
		
		<state ID="Provisioned2">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="9">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="GetRSTAncTable2" event="SNMPResp"/>
			<transition to="GetRSTAncTable2" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTAncTable2">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="10-3">
					<and>
						<!--  Test for pktcEUERSTAncPrefLang  -->
						<eq ignoreCase="true">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>199</expr>
						</eq>
						<!-- Test for pktcEUERSTAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>	
				</verify>
			</response>
			<transition to="GetRSTNfAncTable2" event="SNMPResp"/>
			<transition to="GetRSTNfAncTable2" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncTable2">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="10-4">
					<and>
						<!-- Test for pktcEUERSTNfAncRes   -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>URI for media server</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncDomain  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>cablelabs.com</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncPath   -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>announcement path URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMIMEType  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 4 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMapTable2" event="SNMPResp"/>
			<transition to="GetRSTNfAncMapTable2" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMapTable2">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="10-5">
					<and>
						<!-- Test for pktcEUERSTNfAncMapRspCode  -->
						<gte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>400</expr>
						</gte>
					<and>
						<lte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>603</expr>
						</lte>
					<and>
						<!--  Test for pktcEUERSTNfAncMapURI   -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>response code URI</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMapStatus  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMediaMapTable2" event="SNMPResp"/>
			<transition to="GetRSTNfAncMediaMapTable2" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMediaMapTable2">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="10-6">
					<and>
						<!-- Test for pktcEUERSTNfAncMediaId  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaCachMaxAge    -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>3600</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMediaStatus   -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMLocalMediaTable2" event="SNMPResp"/>
			<transition to="GetRSTNfAncMLocalMediaTable2" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMLocalMediaTable2">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="10-7">
					<and>
						<!-- Test for pktcEUERSTNfAncLclMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaType  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaData  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncLclMediaStatus  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<postlude>
				<stop_capture/>
			</postlude>
			<transition to="EDVAIPv6Secure" event="SNMPResp"/>
			<transition to="EDVAIPv6Secure" event="SNMPRespFailure"/>
		</state>
		
		<state ID="EDVAIPv6Secure" provFile="MAC_S.bin" 
				policyFile="3basic.cfg" nextState="Reboot3"/>
				
		<state ID="Reboot3" timer="10000">
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot3" event="SNMPResp"/>
			<transition to="Register3" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot3" event="REGISTER"/>
		</state>
		
		<state ID="Register3">
			<transition to="Provisioned3" event="Registered"/>
		</state>
		
		<state ID="Provisioned3">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="12">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="GetRSTAncTable3" event="SNMPResp"/>
			<transition to="GetRSTAncTable3" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTAncTable3">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="13-3">
					<and>
						<!--  Test for pktcEUERSTAncPrefLang  -->
						<eq ignoreCase="true">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>199</expr>
						</eq>
						<!-- Test for pktcEUERSTAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>	
				</verify>
			</response>
			<transition to="GetRSTNfAncTable3" event="SNMPResp"/>
			<transition to="GetRSTNfAncTable3" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncTable3">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="13-4">
					<and>
						<!-- Test for pktcEUERSTNfAncRes   -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>URI for media server</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncDomain  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>cablelabs.com</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncPath   -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>announcement path URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMIMEType  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 4 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMapTable3" event="SNMPResp"/>
			<transition to="GetRSTNfAncMapTable3" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMapTable3">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="13-5">
					<and>
						<!-- Test for pktcEUERSTNfAncMapRspCode  -->
						<gte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>400</expr>
						</gte>
					<and>
						<lte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>603</expr>
						</lte>
					<and>
						<!--  Test for pktcEUERSTNfAncMapURI   -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>response code URI</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMapStatus  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMediaMapTable3" event="SNMPResp"/>
			<transition to="GetRSTNfAncMediaMapTable3" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMediaMapTable3">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="13-6">
					<and>
						<!-- Test for pktcEUERSTNfAncMediaId  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaCachMaxAge    -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>3600</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMediaStatus   -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMLocalMediaTable3" event="SNMPResp"/>
			<transition to="GetRSTNfAncMLocalMediaTable3" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMLocalMediaTable3">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="13-7">
					<and>
						<!-- Test for pktcEUERSTNfAncLclMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaType  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaData  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncLclMediaStatus  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<postlude>
				<stop_capture/>
			</postlude>
			<transition to="EDVAIPv6Hybrid" event="SNMPResp"/>
			<transition to="EDVAIPv6Hybrid" event="SNMPRespFailure"/>
		</state>
		
		<state ID="EDVAIPv6Hybrid" provFile="MAC_H.bin" 
				policyFile="3basic.cfg" nextState="Reboot4"/>
				
		<state ID="Reboot4" timer="10000">
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot4" event="SNMPResp"/>
			<transition to="Register4" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot4" event="REGISTER"/>
		</state>
		
		<state ID="Register4">
			<transition to="Provisioned4" event="Registered"/>
		</state>
		
		<state ID="Provisioned4">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="15">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="GetRSTAncTable4" event="SNMPResp"/>
			<transition to="GetRSTAncTable4" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTAncTable4">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="16-3">
					<and>
						<!--  Test for pktcEUERSTAncPrefLang  -->
						<eq ignoreCase="true">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>199</expr>
						</eq>
						<!-- Test for pktcEUERSTAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>		
				</verify>
			</response>
			<transition to="GetRSTNfAncTable4" event="SNMPResp"/>
			<transition to="GetRSTNfAncTable4" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncTable4">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="16-4">
					<and>
						<!-- Test for pktcEUERSTNfAncRes   -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>URI for media server</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncDomain  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>cablelabs.com</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncPath   -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>announcement path URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMIMEType  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncStatus  -->
						<eq>
							<msg_ref type="utility" index="0 4 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMapTable4" event="SNMPResp"/>
			<transition to="GetRSTNfAncMapTable4" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMapTable4">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="16-5">
					<and>
						<!-- Test for pktcEUERSTNfAncMapRspCode  -->
						<gte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>400</expr>
						</gte>
					<and>
						<lte>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>603</expr>
						</lte>
					<and>
						<!--  Test for pktcEUERSTNfAncMapURI   -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>response code URI</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMapStatus  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMediaMapTable4" event="SNMPResp"/>
			<transition to="GetRSTNfAncMediaMapTable4" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMediaMapTable4">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="16-6">
					<and>
						<!-- Test for pktcEUERSTNfAncMediaId  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>announcement identifier URI</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncMediaCachMaxAge    -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>3600</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncMediaStatus   -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<transition to="GetRSTNfAncMLocalMediaTable4" event="SNMPResp"/>
			<transition to="GetRSTNfAncMLocalMediaTable4" event="SNMPRespFailure"/>
		</state>
		
		<state ID="GetRSTNfAncMLocalMediaTable4">
			<prelude>
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-RST-MIB::pktcEUERSTNfAncMediaMapTable</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="16-7">
					<and>
						<!-- Test for pktcEUERSTNfAncLclMediaURI  -->
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaType  -->
						<eq>
							<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
							<expr>file:///PacketCableRST/ct</expr>
						</eq>
					<and>
						<!--  Test for pktcEUERSTNfAncLclMediaData  -->
						<eq>
							<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
						<!-- Test for pktcEUERSTNfAncLclMediaStatus  -->
						<eq>
							<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
				</verify>
			</response>
			<postlude>
				<stop_capture/>
			</postlude>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	</add_to>
</pc2xml>
