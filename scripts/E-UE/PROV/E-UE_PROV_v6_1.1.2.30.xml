<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################
 Change History: (Author & Date)
-->
<pc2xml version="$Revision: 7768 $"
        name="EUE Prov 1.1.2.30"
        descrip="eUE returns to first step in provisioning flow when TFTP server unresponsive."
        number="EUE Prov 1.1.2.30">

    <template file="./templates/EUE_Prov_B_1_1_1.xml" name="UnresponsiveTFTP"/>

    <add_to fsm="UnresponsiveTFTP">
        <transition from="StartCapture_RebootWait" to="EDVAProvisions" event="TimerExpired"/>

        <!-- E/MTA DUT reports provisioning pass code (1) to provisioning service (SNMP Entity). -->
        <state ID="EDVAProvisions">
            <prelude once="true">
                <stop_capture/>
                <send protocol="utility" msgtype="SNMPGet">
			<mod modtype="add" hdr="oids">
				<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
			</mod>
			<mod modtype="replace" hdr="agentip">
				<msg_ref type="platform">DUT.IP</msg_ref>
			</mod>
			<mod modtype="replace" hdr="version">
				<expr>3</expr>
			</mod>
                </send>
            </prelude>
            <response>
                <verify step="5">
                    <contains>
                        <msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
                        <expr>1</expr>
                    </contains>
                </verify>
            </response>
            <transition to="blocktftp" event="SNMPResp"/>
        </state>

	<state ID="blocktftp">
		<prelude once="true">
			<send protocol="utility" msgtype="PROVManagePort">
				<mod modtype="add" hdr="protocol">
					<expr>tftp</expr>
				</mod>
				<mod modtype="add" hdr="timer">
					<expr>100</expr>
				</mod>
				<mod modtype="replace" hdr="operation">
					<expr>stop</expr>
				</mod>
			</send>
		</prelude>
		
		<transition to="END" event="PROVManagePortFailure"/>
		<transition to="Reset2" event="PROVManagePortAck"/>
	</state>
	         
        <!-- Reset the UE DUT (not the CM) and bring it to an operational state. -->
         <state ID="Reset2" timer="60000">
            <prelude once="true">
                <start_capture>
			<filter>
				<var_expr>
					<expr>host </expr>
					<msg_ref type="platform">DUT.IP</msg_ref>
					<expr> || host </expr>
					<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					<expr> || host </expr>
					<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
				</var_expr>
			</filter>
                </start_capture>

                <send protocol="utility" msgtype="SNMPSet">
                    <mod modtype="add" hdr="array">
                        <var_expr>
                            <expr>varBind 1 1 3 \r\n ][ , </expr>
                            <expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
                        </var_expr>
                    </mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.IP Address</msg_ref>
                    </mod>
                    <mod modtype="replace" hdr="version">
                        <expr>3</expr>
                    </mod>
                </send>
            </prelude>
            <response>
                <if>
                    <eq>
                        <msg_ref type="utility">Response</msg_ref>
                        <expr>SNMPRespFailure</expr>
                    </eq>
                    <then>
                        <fail/>
                    </then>
		    <elseif>
			<eq>
				<msg_ref type="utility">Response</msg_ref>
				<expr>SNMPResp</expr>
			</eq>
			<then>
				<verify step="7">
				    <contains>
					<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
					<expr>1</expr>
				    </contains>
				</verify>
			</then>
		    </elseif>
                </if>
                <if>
                    <or>
                        <eq>
                            <msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
                            <expr>0</expr>
                        </eq>
                        <eq>
                            <msg_ref type="sip">REGISTER.Expires.value</msg_ref>
                            <expr>0</expr>
                        </eq>
                    </or>
                    <then>
                        <send protocol="sip" msgtype="200-REGISTER"/>
                    </then>
                </if>
            </response>
            <transition to="ReadsAndSolicits" event="TimerExpired"/>
            <transition to="Reset2" event="SNMPResp"/>
            <transition to="Reset2" event="REGISTER"/>
            <transition to="END" event="SNMPRespFailure"/>
        </state>


        <state ID="ReadsAndSolicits">
            <prelude once="true">
                <stop_capture/>

                <parse_capture name="eUE_Prov">
                    <parser_filter protocol="tftp" ip="DUT.IP"/>
                </parse_capture>
                <parse_capture name="eUE_v6">
                    <parser_filter protocol="dhcpv6" clientMAC="DUT.MAC Address"/>
                </parse_capture>

                <!-- MTA sends several (3) TFTP Read request to the TFTP server. -->
                <!-- MTA begins broadcast Discover messages before provisioning timer expires. -->
                <verify step="8">
                        <eq>
                            <capture_ref type="tftp" name="eUE_Prov" msg_instance="first">Read Request.ipv6.dst_host.show</capture_ref>
			    <msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
                        </eq>
                </verify>
		
                <verify step="9">
                        <notnull>
                            <capture_ref type="tftp" name="eUE_Prov" msg_instance="5">Read Request.num</capture_ref>
                        </notnull>
                </verify>
		
                <verify step="10">
                        <gt>
                            <capture_ref type="dhcpv6" name="eUE_v6" msg_instance="first" add="1800.0">Solicit.frame.time_epoch.show</capture_ref>
			    <capture_ref type="dhcpv6" name="eUE_v6" msg_instance="last">Solicit.frame.time_epoch.show</capture_ref>
                        </gt>
                </verify>
		<generate event="Branch1Event"/>
            </prelude>
	    <transition to="END" event="Branch1Event"/>
        </state>
    </add_to>
</pc2xml>
