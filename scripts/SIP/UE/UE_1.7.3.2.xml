<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SIP-UE 1.7.3.2" 
	descrip="CRLF appearing before the start-line " 
	number="SIP-UE 1.7.3.2">
	
	<configure name="SIP Default Transport Protocol" value="TCP"/>
	
	<fsm name="Term Call Template">
		<models>
			<session/>
		</models>
		<NE sim_type="orig" elements="UE1 PCSCF2 SCSCF1 PCSCF1" targets="UE1"/>
		
		<states initialstate="Register">
			<state ID="Register">
				<transition to="Setup" event="Registered"/>
			</state>
			
			<state ID="Setup">
				<prelude>
					<send protocol="sip" msgtype="Invite">
						<mod modtype="add" hdr="Request-Line" before="true">
							<expr>\r\n</expr>
						</mod>
					</send>
				</prelude>
				<!-- Expected responses are 100, 180, 183 or 200 -->
				<response>
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliability required for test sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack">
								<mod modtype="add" hdr="Request-Line" before="true">
									<expr>\r\n</expr>
								</mod>
							</send>
						</then>
					</if>
				</response>
				<transition to="Proceeding" event="100-INVITE"/>
				<transition to="Alerting" event="180-INVITE"/>
				<transition to="Alerting" event="183-INVITE"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			
			<state ID="Proceeding">
				<!-- Expected responses are 180, 183 or 200 -->
				<response>
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliability required for test sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack">
								<mod modtype="add" hdr="Request-Line" before="true">
									<expr>\r\n</expr>
								</mod>
							</send>
						</then>
					</if>
				</response>
				<transition to="Alerting" event="180-INVITE"/>
				<transition to="Alerting" event="183-INVITE"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			
			<state ID="Alerting" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Take DUT phone off hook-->
							<send protocol="utility" msgtype="OffHook"/>
						</then>
					</if>
					<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required for test, sending a 200-OK to Update message to peer.-->
							<send protocol="sip" msgtype="200-Update">
								<mod modtype="add" hdr="Response-Line" before="true">
									<expr>\r\n</expr>
								</mod>
							</send>
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
									<expr>180</expr>
								</eq>
								<contains>
									<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
									<expr>100rel</expr>
								</contains>
							</and>
							<then>
								<!--Reliability required for test, sending Prack message to peer.-->
								<send protocol="sip" msgtype="Prack">
									<mod modtype="add" hdr="Request-Line" before="true">
										<expr>\r\n</expr>
									</mod>
								</send>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="Alerting" event="200-PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Alerting" event="18x-INVITE"/>
				<transition to="Answer" event="TimerExpired"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			
			<state ID="Answer">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Update">
								<mod modtype="add" hdr="Response-Line" before="true">
									<expr>\r\n</expr>
								</mod>
							</send>
						</then>
					</if>
					<if>
						<eq>
							<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
							<expr>200</expr>
						</eq>
						<then>
							<verify step="1" requirements="RFC355">
								<eq>
									<msg_ref type="sip">Response</msg_ref>
									<expr>200-INVITE</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				
				<transition to="Answer" event="UPDATE"/>
				<transition to="Answer" event="200-PRACK"/>
				<transition to="Answer" event="18x-INVITE"/>
				<transition to="Answer" event="OffHookComplete"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			
			<state ID="Connected" timer="30000">
				<prelude once="true">
					<send protocol="sip" msgtype="ACK">
						<mod modtype="add" hdr="Request-Line" before="true">
							<expr>\r\n</expr>
						</mod>
					</send>
				</prelude>
				<transition to="Connected" event="OffHookComplete"/>
				<transition to="Releasing" event="TimerExpired"/>
			</state>
			
			<state ID="Releasing">
				<prelude>
					<send protocol="sip" msgtype="Bye">
						<mod modtype="add" hdr="Request-Line" before="true">
							<expr>\r\n</expr>
						</mod>
					</send>
				</prelude>
				<transition to="OnHook" event="200-BYE"/>
			</state>
			
			<state ID="OnHook">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<transition to="END" event="OnHookComplete"/>
			</state>
		</states>
	</fsm>
</pc2xml>
