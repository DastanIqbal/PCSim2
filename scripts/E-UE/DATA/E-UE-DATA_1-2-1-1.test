################################################################################
#// Filename: E-UE-DATA_1-2-1-1.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: Feb 26, 2009
#// Modified by:
################################################################################
#// Description:
#//     TC2741 TEST CASE E-UE-DATA 1.2.1.1 - Ability of eUE to Implement the
#//	    Operator Table
#//
#// Objective:
#//     TThis test verifies the eUE ability to properly implement the pktcEUEDevOpTable defined in
#//     CL-PKTC-EUE-DEV-MIB. It also verifies that the eUE properly reports its device profile version.
#//
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//
#//
#// Notes:
#//     - Requires provPrimitives.tcl
#//
#//
################################################################################
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-1-1.test 7769 2011-01-25 18:13:14Z botte $ }

set test_case E-UE-DATA_1-2-1-1-
set step_num 1

Init_PROV
Init_PART


set NON_WRITABLE 2

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap_CW69_RST_Baseline_MotoCW71.cfg
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 C.1.2.3.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}${step_num}_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

## Get all the values and verify

DoStep ${test_case}[incr step_num] "pktcEUEDevProfileVersion Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcEUEDevProfileVersion $MTA_IP]
    LogMsg "The Value pktcEUEDevProfileVersion is: $val"
} {IsEqual $val "1.0"}

DoStep ${test_case}[incr step_num] "pktcEUEDevProfileVersion Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUEDevProfileVersion STRING "1.0" $MTA_IP]
    LogMsg "The Value of pktcEUEDevProfileVersion is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]_1 "pktcEUEDevOpDomain Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevOpDomain is: $val"
} {
    IsEqual $val redlab.com
}

DoStep ${test_case}${step_num}_2 "pktcEUEDevOpSTUNAddrTypeContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrType is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}_3 "pktcEUEDevOpSTUNAddr Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevOpSTUNAddr is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}_4 "pktcEUEDevOpSTUNAddrPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrPort is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}_5 "pktcEUEDevOpTURNAddrType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevOpTURNAddrType  is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}_6 "pktcEUEDevOpTURNAddr  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevOpTURNAddr  is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}_7 "pktcEUEDevOpTURNAddrPort  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevOpTURNPort  is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}_8 "pktcEUEDevOpTURNCredsType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevOpTURNCredsType  is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}_9 "pktcEUEDevOpTURNCreds  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevOpTURNCreds  is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}_10 "pktcEUEDevOpRowStatus  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevOpRowStatus  is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure1"
} { PASS_STEP }


DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap_STUN_TURN.cfg
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 C.1.2.10.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}${step_num}_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUEDevOpDomain Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevOpDomain is: $val"
} {
    IsEqual $val redlab.com
}

DoStep ${test_case}${step_num}_2 "pktcEUEDevOpSTUNAddrTypeContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_3 "pktcEUEDevOpSTUNAddr Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevOpSTUNAddr is: $val"
    set hexip [ decIpToHexIp $PROV_DNS1_IP ]
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}_4 "pktcEUEDevOpSTUNAddrPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrPort is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}_5 "pktcEUEDevOpTURNAddrType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevOpTURNAddrType  is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_6 "pktcEUEDevOpTURNAddr  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevOpTURNAddr  is: $val"
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}_7 "pktcEUEDevOpTURNAddrPort  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevOpTURNAddrPort  is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}_8 "pktcEUEDevOpTURNCredsType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevOpTURNCredsType  is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}_9 "pktcEUEDevOpTURNCreds  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevOpTURNCreds  is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}_10 "pktcEUEDevOpRowStatus  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevOpRowStatus  is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure2"
} { PASS_STEP }


set step_num 1

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 HybridFlow_BasicCall_DigitMap_Inactive.cfg
    # PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Hybrid_Flow_BasicCall_DigitMap_CW69_RST_Baseline_MotoCW71.cfg
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 C.1.2.3.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

## Get all the values and verify

DoStep ${test_case}[incr step_num]h "pktcEUEDevProfileVersion Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcEUEDevProfileVersion $MTA_IP]
    LogMsg "The Value pktcEUEDevProfileVersion is: $val"
} {IsEqual $val "1.0"}


DoStep ${test_case}[incr step_num]h "pktcEUEDevProfileVersion Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcEUEDevProfileVersion STRING "1.0" $MTA_IP]
    LogMsg "The Value of pktcEUEDevProfileVersion is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]h_1 "pktcEUEDevOpDomain Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevOpDomain is: $val"
} {
    IsEqual $val redlab.com
}

DoStep ${test_case}${step_num}h_2 "pktcEUEDevOpSTUNAddrTypeContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrType is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcEUEDevOpSTUNAddr Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevOpSTUNAddr is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}h_4 "pktcEUEDevOpSTUNAddrPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrPort is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_5 "pktcEUEDevOpTURNAddrType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevOpTURNAddrType  is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_6 "pktcEUEDevOpTURNAddr  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevOpTURNAddr  is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}h_7 "pktcEUEDevOpTURNAddrPort  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevOpTURNAddrPort  is: $val"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_8 "pktcEUEDevOpTURNCredsType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevOpTURNCredsType  is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}h_9 "pktcEUEDevOpTURNCreds  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevOpTURNCreds  is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}_10 "pktcEUEDevOpRowStatus  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevOpRowStatus  is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid1"
} { PASS_STEP }

DoStep ${test_case}[incr step_num]h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 HybridFlow_BasicCall_DigitMap_Inactive_STUN_TURN.cfg
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 C.1.2.10.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h_1 "pktcEUEDevOpDomain Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevOpDomain is: $val"
} {
    IsEqual $val redlab.com
}

DoStep ${test_case}${step_num}h_2 "pktcEUEDevOpSTUNAddrTypeContent Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_3 "pktcEUEDevOpSTUNAddr Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevOpSTUNAddr is: $val"
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}h_4 "pktcEUEDevOpSTUNAddrPort Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevOpSTUNAddrPort is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}h_5 "pktcEUEDevOpTURNAddrType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUEDevOpTURNAddrType  is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_6 "pktcEUEDevOpTURNAddr  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 6]
    LogMsg "The Value of pktcEUEDevOpTURNAddr  is: $val"
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}h_7 "pktcEUEDevOpTURNAddrPort  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 7]
    LogMsg "The Value of pktcEUEDevOpTURNAddrPort  is: $val"
} {
    IsEqual $val 5060
}

DoStep ${test_case}${step_num}h_8 "pktcEUEDevOpTURNCredsType  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 8]
    LogMsg "The Value of pktcEUEDevOpTURNCredsType  is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}${step_num}h_9 "pktcEUEDevOpTURNCreds  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 9]
    LogMsg "The Value of pktcEUEDevOpTURNCreds  is: $val"
} {
    IsEqual $val ""
}

DoStep ${test_case}${step_num}_10 "pktcEUEDevOpRowStatus  Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevOpTable.1 $MTA_IP 10]
    LogMsg "The Value of pktcEUEDevOpRowStatus  is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid2"
} { PASS_STEP }

DoStep ${test_case}[incr step_num] "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


############### Reset CM and MTA and Verify Provisioning ################

DoStep ${test_case}[incr step_num] "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup

