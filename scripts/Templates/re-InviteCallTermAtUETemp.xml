<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" name="re-INVITE Call terminating at UE template1" descrip="This is a template for testing re-INVITE in SIP call terminating at UE (DUT)." number="OCTemplate.1">
	<!-- Next we define all of the network elements and extension controls to be used in this test -->
	<fsm name="re-INVITE Term Call Template">
		<models>
			<!-- By default the SS will release the call after 30 seconds and a re-INVITE will be sent 10
				  seconds after connected state-->
			<session/>
		</models>
		<NE sim_type="orig" elements="UE1 SCSCF1 PCSCF1" targets="UE1"/>
		<!-- NOTE - The test platform is assumed to be performing the registrar between tests -->
		<!-- All of the states for the test. References to "Step x" are from both Default Message Flow 
			Call-Term-at-UE(DUT) and re-INVITE Call-Term-at-UE(DUT) Sequence Diagram -->
		<states initialstate="Register">
			<!-- REGISTER STATE -Default Message Flow Call-Term-at-UE(DUT)-->
			<state ID="Register">
				<!-- Transitions for Register state -->
				<transition to="Setup" event="Registered"/>
			</state>
			<!-- SETUP STATE -Default Message Flow Call-Term-at-UE(DUT) -->
			<state ID="Setup">
				<!-- Step 1 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - send Invite -->
				<prelude>
					<send protocol="sip" msgtype="Invite"/>
				</prelude>
				<!-- Expected responses are 100, 180, 183 or 200 -->
				<response>
					<!-- Step 4 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - 
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Setup state - Default Message Flow Call-Term-at-UE(DUT) -->
				<transition to="Proceeding" event="100-INVITE"/>
				<transition to="Alerting" event="180-INVITE"/>
				<transition to="Alerting" event="183-INVITE"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- PROCEEDING STATE- Default Message Flow Call-Term-at-UE(DUT) -->
			<!-- Step 2 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 100-Invite -->
			<state ID="Proceeding">
				<!-- Expected responses are 180, 183 or 200 -->
				<response>
					<!-- Step 4 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - 
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<!-- Step 3 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - send Prack -->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Proceeding state - Default Message Flow Call-Term-at-UE(DUT) -->
				<transition to="Alerting" event="180-INVITE"/>
				<transition to="Alerting" event="183-INVITE"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- ALERTING STATE - Default Message Flow Call-Term-at-UE(DUT) -->
			<!-- Step 5 - Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - requires no special 
				  processing we simply need a transition back to this state. -->
			<state ID="Alerting" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Take DUT phone off hook-->
							<send protocol="utility" msgtype="OffHook"/>
						</then>
					</if>
					<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
					<!-- Step 6 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!-- Step 7 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received UPDATE -->
							<!--QoS required for test, sending a 200-OK to Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
						<!-- Step 8 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 180 -->
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip" hdr_instance="any">Response.Status-Line.status-code</msg_ref>
									<expr>180</expr>
								</eq>
								<contains>
									<msg_ref type="sip">180-INVITE</msg_ref>
									<expr>100rel</expr>
								</contains>
							</and>
							<then>
								<!--Reliablity required for test, sending Prack message to peer.-->
								<send protocol="sip" msgtype="Prack"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Alerting state -Default Message Flow Call-Term-at-UE(DUT) -->
				<transition to="Alerting" event="200-PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Alerting" event="18x-INVITE"/>
				<transition to="Answer" event="TimerExpired"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- GLH voicetronix on both UEs in some cases need to think about how answer is going to work for that case-->
			<!-- ANSWER STATE - Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram -->
			<state ID="Answer">
				<!-- Transitions for Answer state -Default Message Flow Call-Term-at-UE(DUT) -->
				<transition to="Answer" event="UPDATE"/>
				<transition to="Answer" event="200-PRACK"/>
				<transition to="Answer" event="18x-INVITE"/>
				<transition to="Answer" event="OffHookComplete"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- CONNECTED STATE - Default Message Flow Call-Term-at-UE(DUT) -->
			<state ID="Connected" timer="10000">
				<prelude>
					<!-- Step 11 of Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 200-OK to Invite -->
					<send protocol="sip" msgtype="ACK"/>
				</prelude>
				<!-- Step 1 of Default Message Flow re-INVITE Call-Term-at-UE(DUT) Sequence Diagram - send re-Invite -->
				<postlude>
					<send protocol="sip" msgtype="REINVITE"/>
				</postlude>
				<!-- Transitions for Connected state -Default Message Flow re-INVITE Call-Term-at-UE(DUT) -->
				<transition to="ChangeMedia" event="TimerExpired"/>
			</state>
			<!-- CHANGEMEDIA STATE - Default Message Flow re-INVITE Call-Term-at-UE(DUT) -->
			<state ID="ChangeMedia">
				<!-- Expected responses are 100, 180, 183 or 200 -->
				<response>
					<!-- Step 4 Default Message Flow re-INVITE Call-Term-at-UE(DUT) Sequence Diagram -
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</if>
					<!-- Step 5 Default Message Flow re-INVITE Call-Term-at-UE(DUT) Sequence Diagram - 
                      requires no special processing we simply need a transition back to this state. -->
					<!-- Expected responses are 180, 183, PRACK, UPDATE or 200 -->
					<!-- Step 6 Default Message Flow re-INVITE Call-Term-at-UE(DUT) Sequence Diagram - received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!-- Step 7 of Default Message Flow re-INVITE Call-Term-at-UE(DUT) Sequence Diagram - received UPDATE -->
							<!--QoS required for test, sending a 200-OK to Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
						<!-- Step 8 of Default Message Flow re-INVITE Call-Term-at-UE(DUT) Sequence Diagram- received 180 -->
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
									<expr>180</expr>
								</eq>
								<contains>
									<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
									<expr>100rel</expr>
								</contains>
							</and>
							<then>
								<!--Reliablity required for test, sending Prack message to peer.-->
								<send protocol="sip" msgtype="Prack"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for ChangeMedia state - Default Message Flow re-INVITE Call-Term-at-UE(DUT)-->
				<transition to="ChangeMedia" event="100-INVITE"/>
				<transition to="ChangeMedia" event="200-PRACK"/>
				<transition to="ChangeMedia" event="UPDATE"/>
				<transition to="ChangeMedia" event="18x-INVITE"/>
				<transition to="MediaComplete" event="200-INVITE"/>
			</state>
			<!-- MEDIACOMPLETE STATE - Default Message Flow re-INVITE Call-Term-at-UE(DUT) -->
			<state ID="MediaComplete" timer="20000">
				<prelude>
					<send protocol="sip" msgtype="ACK"/>
				</prelude>
				<!-- Transitions for MediaComplete state -->
				<transition to="Releasing" event="TimerExpired"/>
			</state>
			<!-- RELEASING STATE - Default Message Flow Call-Term-at-UE(DUT)-->
			<state ID="Releasing">
				<prelude>
					<send protocol="sip" msgtype="Bye"/>
				</prelude>
				<!-- Transitions for Releasing state -Default Message Flow Call-Term-at-UE(DUT) -->
				<transition to="OnHook" event="200-BYE"/>
			</state>
			<!-- ONHOOK STATE - Default Message Flow Call-Term-at-UE(DUT) -->
			<state ID="OnHook">
				<prelude>
					<!-- This message is only sent to the third party tools
               when Voicetronix is enabled in the platform settings. 
               Otherwise the utility stack will always return a 
               OnHookComplete event. -->
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<!-- Transitions for OnHook state-Default Message Flow Call-Term-at-UE(DUT) -->
				<transition to="END" event="OnHookComplete"/>
			</state>
		</states>
	</fsm>
</pc2xml>
