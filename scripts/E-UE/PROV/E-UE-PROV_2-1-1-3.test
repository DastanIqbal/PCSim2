################################################################################
#// Filename: E-UE-PROV_2-1-1-3.test
#// Author:   Matthew Forbes
#// Creation Date: 10/30/2008
#// Modified by:  
################################################################################
#// Description:
#//     TC2828 TEST CASE E-UE-PROV_2-1-1-3 Ability of MTA not to distinguish between
#//     a Hard Reboot versus a Soft Reset
#// Objective:
#//     To verify that the MTA does not differentiate between a hard reboot and a soft
#//     reset in the case of Secure Provisioning Flow, specifically that the NVRAM
#//     storage of tickets is unaffected.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Configure provisioning server
#//     - Start sniffer capture
#//     - Hard Reboot DUT
#//     - Check Provisioning state
#//     - Stop sniffer capture
#//     - Reset Kerberos Tickets
#//     - Start sniffer capture
#//     - Hard Reboot DUT
#//     - Check Provisioning state
#//     - Stop sniffer capture
#//     - Verify AS REQ sequence
#//     - Start sniffer capture
#//     - Reset MTA using SNMPv3
#//     - Stop sniffer capture
#//     - Verify no AS REQ sequence
#//     - Start sniffer capture
#//     - Hard Reboot DUT
#//     - Check Provisioning state
#//     - Stop sniffer capture
#//     - Reset Kerberos Tickets
#//     - Start sniffer capture
#//     - Hard Reboot DUT
#//     - Check Provisioning state
#//     - Stop sniffer capture
#//     - Verify AS REQ sequence
#//     - Start sniffer capture
#//     - Reset MTA using SNMPv3
#//     - Stop sniffer capture
#//     - Verify no AS REQ sequence
#//     - Cleanup
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//
################################################################################

global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: }

################################################################################


DoStep "E-UE-PROV_2-1-1-3_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep "E-UE-PROV_2-1-1-3_3-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_2-1-1-3_4-1" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP ]
    LogMsg "Reset of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_2-1-1-3_5-1" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 60 seconds for CM/MTA to provision" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_2-1-1-3_5-2" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} { PASS_STEP }

########################## Clear Tickets ##################################

DoStep "E-UE-PROV_2-1-1-3_6-1" "pktcMtaDevResetKrbTickets Reset Kerberos Tickets" {
    set val [SNMP_SET $oid_pktcMtaDevResetKrbTickets OCTET-STRING 0xC0 $MTA_IP]
} {
    if {$val == 0} {
        LogMsg "Kerberos Tickets Have been cleared"
        PASS_STEP
    } else {
        FAIL_STEP "Cannot reset Kerberos tickets"
    }
}

DoStep "E-UE-PROV_2-1-1-3_6-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    # Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reboot CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_2-1-1-3_7-1" "Reboot CM/MTA" {
    LogMsg "Hard Reboot DUT"
} {
    verify_signal "Hard reboot(power cycle) DUT"
}

DoStep "E-UE-PROV_2-1-1-3_8-1" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 60 seconds for CM/MTA to provision" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_2-1-1-3_8-2" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hard_Reboot"
} { PASS_STEP }


########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_2-1-1-3_9-1" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_2-1-1-3_9-2" "Parse IP data into database" {
    
    # Parse data
    
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
    
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


######Assumption is MTA is first time provisioning in the test network#######
DoStep "E-UE-PROV_2-1-1-3_9-3" "Kerberos AS-REQ: EXISTS" {
    LogMsg "Verify AS REQUEST EXISTS"
        set CONTINUE_PAST_STEP_ERROR 1
} {
    VerifyValue $msgID_MTA "INFIRST KRB KRB_AS_REQ KRB_TYPE" "EXISTS" "" AND \
            "HEADERSRCIP" "IS" "$MTA_IP"
}

################## Start Sniffer and soft reset MTA #####################

DoStep "E-UE-PROV_2-1-1-3_9-4" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    #    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_2-1-1-3_10-1" "Reset the MTA" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        actionWait "Wait 60 seconds for CM/MTA to provision" 60
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        LogMsg "MTA Provisioning State" 49
        LogMsg "             - Expected : 1" 49
        LogMsg "             - Received : $val" 49
} {IsEqual $val 1}


DoStep "E-UE-PROV_2-1-1-3_11-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Soft_Reset"
} { PASS_STEP }

######################### VERIFY KERBEROS MESSAGE ##########################

DoStep "E-UE-PROV_2-1-1-3_12-1" "Analyze flow data" {
    # Initial PARSER TOOL
    # Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }


DoStep "E-UE-PROV_2-1-1-3_12-2" "Parse IP data into database" {
    
    # Parse data
    
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA2          [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


DoStep "E-UE-PROV_2-1-1-3_12-3" "Kerberos AS-REQ: DOES NOT EXIST" {
    LogMsg "Verify NO AS REQUEST EXISTS"
} {
    VerifyNotValue $msgID_MTA2 "INFIRST KRB KRB_AS_REQ KRB_TYPE" "EXISTS" "" AND \
            "HEADERSRCIP" "IS" "$MTA_IP"
}


DoStep "E-UE-PROV_2-1-1-3_3a-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    # Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reboot CM and MTA and Verify Provisioning ################


DoStep "E-UE-PROV_2-1-1-3_4a-1" "Reboot CM/MTA" {
    LogMsg "Hard Reboot DUT"
} {
    verify_signal "Hard reboot(power cycle) DUT"
}

DoStep "E-UE-PROV_2-1-1-3_5a-1" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 70 seconds for CM/MTA to provision" 70
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_2-1-1-3_5a-2" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }

########################## Clear Tickets ##################################

DoStep "E-UE-PROV_2-1-1-3_6a-1" "pktcMtaDevResetKrbTickets Reset Kerberos Tickets" {
    set val [SNMP_SET $oid_pktcMtaDevResetKrbTickets OCTET-STRING 0xC0 $MTA_IP]
} {
    if {$val == 0} {
        LogMsg "Kerberos Tickets Have been cleared"
        PASS_STEP
    } else {
        FAIL_STEP "Cannot reset Kerberos tickets"
    }
}

DoStep "E-UE-PROV_2-1-1-3_6a-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    # Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reboot CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_2-1-1-3_7a-1" "Reset the MTA" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait 60 seconds for CM/MTA to provision" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {IsEqual $val 1}



DoStep "E-UE-PROV_2-1-1-3_8a-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Soft_Reset_2"
} { PASS_STEP }


########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_2-1-1-3_9a-1" "Analyze flow data" {
    # Initial PARSER TOOL
    # Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_2-1-1-3_9a-2" "Parse IP data into database" {
    
    # Parse data
    
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
    
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


######Assumption is MTA is first time provisioning in the test network#######
DoStep "E-UE-PROV_2-1-1-3_9a-3" "Kerberos AS-REQ: EXISTS" {
    LogMsg "Verify AS REQUEST EXISTS"
    set CONTINUE_PAST_STEP_ERROR 1
} {
    VerifyValue $msgID_MTA "INANY KRB KRB_AS_REQ KRB_TYPE" "EXISTS" "" AND \
            "HEADERSRCIP" "IS" "$MTA_IP"
}

################## Start Sniffer and soft reset MTA #####################

DoStep "E-UE-PROV_2-1-1-3_9a-4" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    #    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}



DoStep "E-UE-PROV_2-1-1-3_10a-1" "Reboot CM/MTA" {
    LogMsg "Hard Reboot DUT"
} {
    verify_signal "Hard reboot(power cycle) DUT"
}

DoStep "E-UE-PROV_2-1-1-3_11a-1" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 70 seconds for CM/MTA to provision" 70
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_2-1-1-3_11a-2" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hard_Reboot_2"
} { PASS_STEP }

######################### VERIFY KERBEROS MESSAGE ##########################

DoStep "E-UE-PROV_2-1-1-3_12a-1" "Analyze flow data" {
    # Initial PARSER TOOL
    # Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }


DoStep "E-UE-PROV_2-1-1-3_12a-2" "Parse IP data into database" {
    
    # Parse data
    
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA2          [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


DoStep "E-UE-PROV_2-1-1-3_12a-3" "Kerberos AS-REQ: DOES NOT EXIST" {
    LogMsg "Verify NO AS REQUEST EXISTS"
} {
    VerifyNotValue $msgID_MTA2 "INANY KRB KRB_AS_REQ KRB_TYPE" "EXISTS" "" AND \
            "HEADERSRCIP" "IS" "$MTA_IP"
}


################################################################################
# Cleanup
################################################################################

set CONTINUE_PAST_STEP_ERROR 0

Cleanup
return 0




