#//********************************************************************
#// Filename: E-UE-DATA_1-2-4-2_2.test
#// Author: Matthew Forbes
#// Creation Date: 11/10/2008
#// Modified by:
#//
#//
#//********************************************************************
#// Description:
#//    TC1582 Test Case E-UE-DATA_1-2-4-2_2 pktcDevEvSyslogAddress Content Verification
#//
#//
#// Objective:
#//    To verify the content of the MIB object pktcDevEvSyslogAddress
#//
#// PacketCable DUT:
#//    MTA
#//
#// Test Steps:
#//    - Initial configuration
#//    - Start sniffer
#//    - TFTP GET MTA config file
#//    - TFTP PUT and SNMP RESET
#//    - Check Provisioning state
#//    - Perform mib check
#//    - Stop sniffer
#//    - Delete MTA config file
#//    
#//
#// Notes:
#//    - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-4-2_2.test 7769 2011-01-25 18:13:14Z botte $ }

set test_case E-UE-DATA_1-2-4-2_2
set step_num 1

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV
    LogMsg "--- Restore Initial Configuration ---"
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
    
} {PASS_STEP}


DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}


DoStep ${test_case}[incr step_num] "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} {PASS_STEP}


########################## INVOKE PARSING TOOL ##################################

DoStep ${test_case}[incr step_num] "Parse all data into database" {
    # Initial PARSER TOOL
    Init_PART
    #set ::PART_SHOW_DB_WRITE 1
    # Set up parser file
    set PARSERFILE $ETH_DEFAULT_TXT_FILE    
    
    # #Find MTA gateway IP      
    # set MTA_GATEWAY_IP [regsub -- {[^.]+$} $MTA_IP 1]
    # 
    # #[ParseFile $fileName { { p pType {op} {sMac} {sIP} {sPo} {dMac} {dIP} {dPo} } }]
    # set DHCP_sIP	"{DHCP {} {} {} {$MTA_GATEWAY_IP} {} {} {} {} }"
    # set DHCP_dIP	"{DHCP {} {} {} {} {} {} {$MTA_GATEWAY_IP} {} }"    
    # 
    # set msgID_MTA [ParseFile $PARSERFILE "$DHCP_sIP $DHCP_dIP" ]


set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP"]

} { 
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep ${test_case}[incr step_num] "Analyze DHCP Option 7 Log Server = pktcDevEvSyslogAddress " {   

    # Find CM MAC with colons
    set MTA_MAC_COL [AddColMac $MTA_MAC]
    set msgStr "Verify MTA DHCP Response: Option 7 Syslog Server"
    set option7 0
    LogMsg "--- $msgStr ---"

    set option7 [GetValue $msgID_MTA "INANY DHCP ACK OPTION7" AND "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"]

    LogMsg "--- option7 = $option7" 
    set ip_list "" 
    set new_ip_list [split $option7 .] 
    foreach ip_part $new_ip_list {
        set ipa [format %x $ip_part]
        if {[string length $ipa] != 2} {
            lappend ip_list "0$ipa"
        } else  {
            lappend ip_list $ipa
        }
    }
    set default_ip [string toupper "$ip_list"]
    # set default_ip 0x[join $ip_list :]
} {PASS_STEP}


# DoStep ${test_case}[incr step_num] "pktcDevEvSyslogAddress Content Verification" #{
    # set type STRING
    # set default_value $default_ip
    # set set_list {5555 0000 ffff} 
# } #{SnmpRWVerify $oid_pktcDevEvSyslogAddress $MTA_IP $type $default_value $set_list 1}


DoStep ${test_case}[incr step_num] "pktcDevEvSyslogAddress Content Verification" {
    # SNMP_SET $oid_pktcDevEvSyslogAddress STRING 10.20.30.40 $MTA_IP
    SNMP_SET $oid_pktcDevEvSyslogAddress HEX-STRING 0A141E28 $MTA_IP
    set val [SNMP_GET $oid_pktcDevEvSyslogAddress $MTA_IP]
} {IsEqual $val "0A 14 1E 28"}

DoStep ${test_case}[incr step_num] "pktcDevEvSyslogAddress Content Verification" {
    # SNMP_SET $oid_pktcDevEvSyslogAddress STRING 0.0.0.0 $MTA_IP
    SNMP_SET $oid_pktcDevEvSyslogAddress HEX-STRING 00000000 $MTA_IP
    set val [SNMP_GET $oid_pktcDevEvSyslogAddress $MTA_IP]
} {IsEqual $val "00 00 00 00"}

DoStep ${test_case}[incr step_num] "pktcDevEvSyslogAddress Content Verification" {
    # SNMP_SET $oid_pktcDevEvSyslogAddress STRING 255.255.255.255 $MTA_IP
    SNMP_SET $oid_pktcDevEvSyslogAddress HEX-STRING FFFFFFFF $MTA_IP
    set val [SNMP_GET $oid_pktcDevEvSyslogAddress $MTA_IP]
} {IsEqual $val "FF FF FF FF"}

Cleanup
