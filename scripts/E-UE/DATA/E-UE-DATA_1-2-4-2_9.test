#//********************************************************************
#// Filename: E-UE-DATA_1-2-4-2_9.test
#// Author: Matthew Forbes
#// Creation Date: 11/10/2008
#// Modified by:
#//
#//
#//********************************************************************
#// Description:
#//    TC1593 Test Case E-UE-DATA_1-2-4-2_9 pktcDevEvLogTime Content Verification
#//
#//
#// Objective:
#//    To verify the content of the MIB object pktcDevEvLogTime
#//
#// PacketCable DUT:
#//    MTA
#//
#// Test Steps:
#//    - Initial configuration
#//    - Start sniffer
#//    - TFTP GET MTA config file
#//    - TFTP PUT and SNMP RESET
#//    - Check Provisioning state
#//    - Perform mib check
#//    - Stop sniffer
#//    - Delete MTA config file
#//    
#//
#// Notes:
#//    - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-4-2_9.test 7406 2010-07-20 17:17:37Z dthakore $ }

set test_case MEM_E-UE-DATA_1-2-4-2_9-
set step_num 1

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV

    Init_CONTROLLER_LAN

    # Initial PARSER TOOL
    Init_PART
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
    
} {PASS_STEP}

# Added reset and clear table - MLF - 4/11/08
DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "Clear pktcDevEventLogTable" {
    LogMsg "Clear pktcDevEventLogTable"
    set val [SNMP_SET 1.3.6.1.4.1.4491.2.2.3.1.1.0 bits 0 $MTA_IP]
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"    
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]     
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {    
        set search_index [lsearch $text_list $pctext]       
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}   
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index] 
    if {$index == ""} { set command FAIL_STEP } 
} {eval $command}

DoStep ${test_case}[incr step_num] "Verify pktcDevEvLogTime UTC Format" {
    set command FAIL_STEP
    set val1 [SNMP_GET ${oid_pktcDevEvLogTime}.$index $MTA_IP 20]
    # set val1 [SnmpDateTimeConverter $val1]
    LogMsg "Value for pktcDevEvLogTime.$index = $val1"
    if {[llength [split $val1 ,]] == 3} {
        if {[regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9][,]([+|-])([0-9]|10|11)[:]([1-5]?[0-9])} $val1]} {
            set command PASS_STEP
        }
    } elseif {[llength [split $val1 ,]] == 2}  {
        if {[regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9]} $val1]} {
            set command PASS_STEP
        }
    } 
} {eval $command}

DoStep ${test_case}[incr step_num] "pktcDevEvLogTime Content Verification" {
    set type OCTET-STRING
    set val [SNMP_SET ${oid_pktcDevEvLogTime}.$index $type "07D5010101010101" $MTA_IP]
} {IsEqual $val 2}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
LogMsg "--- Stop sniffer ---"
StopCaptureControllerLan
SaveToFileControllerLan "Reset-1"
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Parse all data into database" {
#set ::PART_SHOW_DB_WRITE 1
# Set up parser file
set PARSERFILE    $ETH_DEFAULT_TXT_FILE    
set PARAMS_SNMP         "{SNMP SNMP_INFORM {} {} {$MTA_IP} {} {} {} {} {}}"
set msgID_MTA_SNMP  [ParseFile $PARSERFILE "$PARAMS_SNMP"]

} { 
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep ${test_case}[incr step_num] "Verify SNMPv3 Inform Exists" {
    LogMsg "Verify SNMPv3 INFORM: EXISTS"
} {
    VerifyValue $msgID_MTA_SNMP "INANY SNMP SNMP_INFORM SNMP_VERSION" "IS" "3.*" 
}

DoStep ${test_case}[incr step_num] "GET TIMESTAMP of FINAL SNMP INFORM" {
    set command PASS_STEP
    #DECLARE A NEW VARIABLE
    catch { unset ::SNMP_INFORM_TIME }
    variable ::SNMP_INFORM_TIME

    #CALL INRANGE TO RETURN THE TIMESTAMP FOR ALL THE SNMP INFORMS PARSED FROM THE FILE AND ORIGINATED BY THE MTA
    VerifyValue $msgID_MTA_SNMP "INRANGEALL(AFTER:-1,BEFORE:-1):(::SNMP_INFORM_TIME):(TIMES,SNMP_VERSION,FNUM) SNMP SNMP_INFORM SNMP_VERSION" "IS" "3.*"
        
    #Get the time for the last SNMP_INFORM packet
    set timeOfCurrentPacket1 $::SNMP_INFORM_TIME($msgID_MTA_SNMP,[ lindex $::SNMP_INFORM_TIME($msgID_MTA_SNMP) end],TIMES)
    set frameCurrentPacket1  $::SNMP_INFORM_TIME($msgID_MTA_SNMP,[ lindex $::SNMP_INFORM_TIME($msgID_MTA_SNMP) end],FNUM)
    LogMsg "--- Final SNMP_INFORM Time = $timeOfCurrentPacket1, Frame # = $frameCurrentPacket1 "
    if {$frameCurrentPacket1 < 1 } {
        set command FAIL_STEP
    }
} {eval $command}

# Added clear table - MLF - 4/11/08
DoStep ${test_case}[incr step_num] "Clear pktcDevEventLogTable" {
    LogMsg "Clear pktcDevEventLogTable"
    set val [SNMP_SET 1.3.6.1.4.1.4491.2.2.3.1.1.0 bits 0 $MTA_IP]
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "Start sniffer" {
LogMsg "--- Start sniffer ---"    
SetupCaptureControllerLan "host $MTA_IP || udp port 67"
StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
# Get the OID from the MTA and check it using our previously defined
set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]     
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {    
        set search_index [lsearch $text_list $pctext]       
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}   
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index] 
    if {$index == ""} { set command FAIL_STEP } 
} {eval $command}

DoStep ${test_case}[incr step_num] "Verify pktcDevEvLogTime UTC Format" {
    set command FAIL_STEP
    set val2 [SNMP_GET ${oid_pktcDevEvLogTime}.$index $MTA_IP 20]
    # set val2 [SnmpDateTimeConverter $val2]
    LogMsg "Value for pktcDevEvLogTime.$index = $val2"
    if {[llength [split $val2 ,]] == 3} {
        if {[regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9][,]([+|-])([0-9]|10|11)[:]([1-5]?[0-9])} $val2]} {
            set command PASS_STEP
        }
    } elseif {[llength [split $val2 ,]] == 2}  {
        if {[regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9]} $val2]} {
            set command PASS_STEP
        }
    } 
} {eval $command}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
LogMsg "--- Stop sniffer ---"
StopCaptureControllerLan
SaveToFileControllerLan "Reset-2"
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Parse all data into database" {

# Set up parser file
set PARSERFILE    $ETH_DEFAULT_TXT_FILE    
set PARAMS_SNMP         "{SNMP SNMP_INFORM {} {} {$MTA_IP} {} {} {} {} {}}"
set msgID_MTA_SNMP  [ParseFile $PARSERFILE "$PARAMS_SNMP"]

} { 
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep ${test_case}[incr step_num] "Verify SNMPv3 Inform Exists" {
    LogMsg "Verify SNMPv3 INFORM: EXISTS"
} {
    VerifyValue $msgID_MTA_SNMP "INANY SNMP SNMP_INFORM SNMP_VERSION" "IS" "3.*" 
}

DoStep ${test_case}[incr step_num] "GET TIMESTAMP of FINAL SNMP INFORM" {
    set command PASS_STEP
    #DECLARE A NEW VARIABLE
    catch { unset ::SNMP_INFORM_TIME }
    variable ::SNMP_INFORM_TIME

    #CALL INRANGE TO RETURN THE TIMESTAMP FOR ALL THE SNMP INFORMS PARSED FROM THE FILE AND ORIGINATED BY THE MTA
    VerifyValue $msgID_MTA_SNMP "INRANGEALL(AFTER:-1,BEFORE:-1):(::SNMP_INFORM_TIME):(TIMES,SNMP_VERSION,FNUM) SNMP SNMP_INFORM SNMP_VERSION" "IS" "3.*"
        
    #Get the time for the last SNMP_INFORM packet
    set timeOfCurrentPacket2 $::SNMP_INFORM_TIME($msgID_MTA_SNMP,[ lindex $::SNMP_INFORM_TIME($msgID_MTA_SNMP) end],TIMES)
    set frameCurrentPacket2  $::SNMP_INFORM_TIME($msgID_MTA_SNMP,[ lindex $::SNMP_INFORM_TIME($msgID_MTA_SNMP) end],FNUM)
    LogMsg "--- Final SNMP_INFORM Time = $timeOfCurrentPacket2, Frame # = $frameCurrentPacket2 "
    if {$frameCurrentPacket2 < 1 } {
        set command FAIL_STEP
    }
} {eval $command}

DoStep ${test_case}[incr step_num] "Check/Verify TimeStamps of SNMP_INFORM to pktcDevEvLogTime" {
    set command PASS_STEP

    #Get local time, same time as Ethereal use
    set local_time [clock format [clock seconds] -format "%b %d %Y" -gmt true]
    set local_date [clock format [clock seconds] -format "%d" -gmt true]
    set local_date [string trimleft $local_date 0]
    set local_mth  [clock format [clock seconds] -format "%m" -gmt true]
    # For single digit month--MLF 10/9/07
    # regsub 0 $local_mth "" local_mth
    if {$local_mth != 10} {
        regsub 0 $local_mth "" local_mth
    }
    set local_year [clock format [clock seconds] -format "%Y"]
    
    #First need to get Ethereal Time into GMT/UTC, this is only to figure hours offset
    set frame_time1 "[lindex $local_time 0] [lindex $local_time 1] [lindex [split $timeOfCurrentPacket1 .] 0] [lindex $local_time 2]"
    set frame_time2 "[lindex $local_time 0] [lindex $local_time 1] [lindex [split $timeOfCurrentPacket2 .] 0] [lindex $local_time 2]"
    set frame_time1_hour [lindex [split [lindex [clock format [clock scan $frame_time1] -format "%b %d %H:%M:%S %Y" -gmt 1] 2] :] 0]
    set frame_time2_hour [lindex [split [lindex [clock format [clock scan $frame_time2] -format "%b %d %H:%M:%S %Y" -gmt 1] 2] :] 0]
    
    # Get the minutes reported from the SNMP_INFORM frames
    set frame_time1_min [lindex [split $timeOfCurrentPacket1 :] 1]
    set frame_time2_min [lindex [split $timeOfCurrentPacket2 :] 1]

    # Break down the pktcDevEvLogTime into individual parts so as to report if one fails
    set val1_year [lindex [split [lindex [split $val1 ,] 0] -] 0]
    set val1_mth  [lindex [split [lindex [split $val1 ,] 0] -] 1]
    set val1_date [lindex [split [lindex [split $val1 ,] 0] -] 2]
    set val1_hour [lindex [split [lindex [split $val1 ,] 1] :] 0]
    set val1_min  [lindex [split [lindex [split $val1 ,] 1] :] 1]
    
    set val2_year [lindex [split [lindex [split $val2 ,] 0] -] 0]
    set val2_mth  [lindex [split [lindex [split $val2 ,] 0] -] 1]
    set val2_date [lindex [split [lindex [split $val2 ,] 0] -] 2]
    set val2_hour [lindex [split [lindex [split $val2 ,] 1] :] 0]
    set val2_min  [lindex [split [lindex [split $val2 ,] 1] :] 1]
    
    if {$val1_year != $local_year || $val2_year != $local_year} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime year; $val1_year , $val2_year, year = $local_year"
    }
    if {$val1_mth != $local_mth || $val2_mth != $local_mth} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime month; $val1_mth , $val2_mth, month = $local_mth"
    }
    if {$val1_date != $local_date || $val2_date != $local_date} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime date; $val1_date , $val2_date, date = $local_date"
    }
    if {$val1_hour != $frame_time1_hour || $val2_hour != $frame_time2_hour} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime hour; $val1_hour vs. $frame_time1_hour, $val2_hour vs. $frame_time2_hour"
    }
    if {$val1_min != $frame_time1_min || $val2_min != $frame_time2_min} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime minute; $val1_min vs. $frame_time1_min, $val2_min vs. $frame_time2_min"
    }   

} {eval $command}

###############################################################################

Cleanup
