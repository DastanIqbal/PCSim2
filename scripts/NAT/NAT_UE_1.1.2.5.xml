<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################
	
	
	Change History: (Author & Date)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	
	
	
	
-->

<pc2xml version="$Revision: 8188 $" name="NAT_UE_1.1.2.5"
	descrip="SIP OUTBOUND Proper Use of Existing Flows "
	number="NAT_UE_1.1.2.5" inspector="disable">

	<template file="./templates/UERegAndSubTemp.xml" name="Registrar" />
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1" />

	<add_to fsm="UE1">
		<states initialstate="WaitRegistered" />
		<state ID="WaitRegistered">
			<transition to="OffHook" event="Registered" />
		</state>
	</add_to>

	<remove_from fsm="Registrar">
		<state ID="Reboot" />
		<state ID="Registered" sub="prelude" />
		<state ID="NotificationComplete" />
	</remove_from>
	<add_to fsm="Registrar">
		<state ID="Reboot" timer="5000">
			<!-- First we need to power cycle the UE to conduct the test -->
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host</expr>
							<msg_ref type="platform">UE0.IP</msg_ref>
							<expr>|| host</expr>
							<msg_ref type="platform">PCSCF1.IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<!--log expr="Power on (or reset) the UE. "/-->
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
							<expr>varBind 1 1 3 \r\n ][ ,</expr>
							<expr>
								PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n
							</expr>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail />
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER" />
					</then>
				</if>
			</response>
			<!-- Transitions for PendingRegistration state -->
			<transition to="Reboot" event="SNMPResp" />
			<transition to="PendingRegistration" event="TimerExpired" />
			<transition to="END" event="SNMPRespFailure" />
			<transition to="Reboot" event="REGISTER" />
		</state>
		<!-- REGISTERED State -->
		<state ID="Registered" sub="prelude">
			<send protocol="sip" msgtype="200-Register" />
			<generate event="Registered" fsm="UE1" />
		</state>
		<state ID="NotificationComplete" ES="true" />
	</add_to>
	<remove_from fsm="UE1">
		<state ID="Setup" />
	</remove_from>
	<add_to fsm="UE1">
		<state ID="Setup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<!-- If the current message that we received is an Invite, answer with
					a 100-trying -->
				<!-- Step 2 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE" />
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
					or a 180 to the INVITE -->
				<!-- Step 3 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip"	hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip"	hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<sleep time="200" />
						<send protocol="sip" msgtype="183-Invite" />
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<sleep time="200" />
							<send protocol="sip" msgtype="180-Invite" />
						</then>
					</elseif>
				</if>
				<verify step="2" requirements="RFC4300" group="step2">
					<and>
						<neq>
							<msg_ref type="platform">Platform.SIP Default Transport Protocol</msg_ref>
							<expr>TCP</expr>
						</neq>
						<neq>
							<msg_ref type="platform">Platform.SIP Default Transport Protocol</msg_ref>
							<expr>TCP</expr>
						</neq>
					</and>
				</verify>
				<verify step="2" requirements="RFC4300" group="step2">
					<or>
						<neq>
							<msg_ref type="platform">Platform.SIP Default Transport Protocol</msg_ref>
							<expr>UDP</expr>
						</neq>
						<eq>
							<msg_ref type="sip">INVITE.SourceAddress.port</msg_ref>
							<msg_ref type="sip" msg_instance="last">REGISTER.SourceAddress.port</msg_ref>
						</eq>
					</or>
				</verify>
				<verify step="2" requirements="RFC4300" group="step2">
					<or>
						<neq>
							<msg_ref type="platform">Platform.SIP Default Transport Protocol</msg_ref>
							<expr>UDP</expr>
						</neq>
						<eq>
							<msg_ref type="sip">INVITE.SourceAddress.IP</msg_ref>
							<msg_ref type="sip" msg_instance="last">REGISTER.SourceAddress.IP</msg_ref>
						</eq>
					</or>
				</verify>
			</response>
			<!-- Transitions for Setup state -->
			<transition to="Setup" event="DialDigitsComplete" />
			<transition to="Alerting" event="INVITE" />
		</state>
	</add_to>
</pc2xml>
