#//**************************************************************************
#// Filename: E-UE-PROV_2-1-3-2.test
#// Author:   Matthew Forbes
#// Creation Date: November 03, 2008
#// Modified by: 
#//****************************************************************************
#// Description:
#//     TC2839 TEST CASE PROV E-UE-PROV 2-1-3-2 Ability of eUE to adhere to SNMP Notification Retry
#//     and Timeout Values when TLV38.4 and TLV38.5 are not configured
#//
#// Objective:
#//     To verify that the eUE adheres to the values in TLV 38.4 (SNMP
#// Notification Receiver Timeout) and TLV 38.5 (SNMP Notification Receiver
#// Retries) for the SNMP Inform message.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Notes: 
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_2-1-3-2.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_2-1-3-2_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # Need to set to IP address that will not respond to SNMP
    set PROV_SNMP3_IP 10.32.0.24
    # ProvCreateConfig 1448 $MTA_MAC

} {PASS_STEP}


DoStep "E-UE-PROV_2-1-3-2_3-1" "Configure provisioning server" {
    LogMsg "--- Configure provisioning server ---"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 cfg-2839.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}


DoStep "PRESTEP_E-UE-PROV_2-1-3-2_4-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_2-1-3-2_5-1" "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for CM/MTA to reboot" 60
} {PASS_STEP}


DoStep "E-UE-PROV_2-1-3-2_6-1" "pktcMtaDevProvisioningState Content Verification" {
    actionWait "Wait 15 seconds for MIB update" 15
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {
    IsEqual $val 1
}


DoStep "E-UE-PROV_2-1-3-2_6-2" "Wait for SNMPv2 INFORMS" {
} {
    actionWait "Wait for CM/MTA to reboot" 60
}

DoStep "E-UE-PROV_2-1-3-2_6-3" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} {PASS_STEP}


    #Matt/Sumanth - 12/28/2004
DoStep "E-UE-PROV_2-1-3-2_7-1" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_2-1-3-2_7-2" "Parse all data into database" {
    #verify_signal "
    #Verify
    #- MTA sends SNMPv2c INFORM to IP1
    #- Total number of SNMPv2c INFORM is 4
    #- Interval between each retries is about 15 seconds"
    #Matt/Sumanth - 12/28/2004
    # set PARAMS_SNMP         "{SNMP SNMP_INFORM {} {} {$MTA_IP} {} {} {} {} {}}"
    set PARAMS_SNMP         "{SNMP {} {} {} {$MTA_IP} {} {} {} {} {}}"
    #set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    #set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} {} {}}"
    set msgID_MTA_SNMP [ParseFile $PARSERFILE "$PARAMS_SNMP"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "E-UE-PROV_2-1-3-2_7-3" "Verify SNMPv3 Inform" {
    LogMsg "Verify SNMPv3 INFORM: EXISTS"
} {
    VerifyValue $msgID_MTA_SNMP "INANY SNMP SNMP_INFORM SNMP_VERSION" "IS" "3.*" AND \
            "HEADERDSTIP" "IS" "$PROV_DHCP1_IP"
}

DoStep "E-UE-PROV_2-1-3-2_8-1" "Verify SNMPv2c INFORM retries" {
    #DECLARE A NEW VARIABLE
    catch { unset ::MATT }
    variable ::MATT

    #CALL INRANGE TO RETURN THE TIMESTAMPS FOR ALL THE SNMP INFORMS PARSED FROM THE FILE AND ORIGINATED BY THE MTA
    VerifyValue $msgID_MTA_SNMP "INRANGEALL(AFTER:-1,BEFORE:-1):(::MATT):(TIMESP,SNMP_VERSION,FNUM) SNMP SNMP_INFORM SNMP_VERSION" "IS" "2C.*" 
    #tk_messageBox -message "DELETEME: The packets which match this type are: $::MATT($msgID_MTA_SNMP) "

    if { [ llength $::MATT($msgID_MTA_SNMP) ] < 3 }  {
        verify_signal "ERROR: The capture file captured less than 2 retries, increase the time to wait and please rerun the test case! Abort?"
    }


    #Get the time for the first packet
    set timeOfCurrentPacket $::MATT($msgID_MTA_SNMP,[ lindex $::MATT($msgID_MTA_SNMP) 0],TIMESP)
    set frameCurrentPacket  $::MATT($msgID_MTA_SNMP,[ lindex $::MATT($msgID_MTA_SNMP) 0],FNUM)

    #tk_messageBox -message "DELETEME: Dealing with FNUM: $frameCurrentPacket , [ lindex $::MATT($msgID_MTA_SNMP) 0]"
    #tk_messageBox -message "DELETEME: RANGE NEXT:   [ lrange $::MATT($msgID_MTA_SNMP) 1 end ]"


    foreach i  [ lrange $::MATT($msgID_MTA_SNMP) 1 end ] { 
       set timeOfNextPacket $::MATT($msgID_MTA_SNMP,$i,TIMESP)
       set frameNextPacket  $::MATT($msgID_MTA_SNMP,$i,FNUM)

       set diffTime [ expr $timeOfNextPacket - $timeOfCurrentPacket ]

       if { ( $diffTime > 16.5 ) || ( $diffTime < 13.5 ) } {
            verify_signal "ERROR: The time difference between retries is NOT within the acceptable range (13.5-16.5s); Frames under consideration include $frameCurrentPacket and $frameNextPacket. Is this correct?"
            LogMsg "Fail: The time difference between retries is NOT within the acceptable range (13.5-16.5s)" 49
            # return 1
       } else {
            # verify_signal "PASS: The time difference between retries is within the acceptable range (13.5-16.5s); Frames under consideration include $frameCurrentPacket and $frameNextPacket; DIFF TIME = $diffTime; Continue?"
            LogMsg "PASS: The time difference between retries is within the acceptable range (13.5-16.5s); DIFF TIME = $diffTime" 49
       }

       #tk_messageBox -message "DELETEME: Dealing with FNUM: $frameNextPacket , $i"

       #tk_messageBox -message "DELETEME: CURRENT PACKET: $timeOfCurrentPacket ($frameCurrentPacket) NEXT PACKET: $timeOfNextPacket ($frameNextPacket) DIFF = [ expr $timeOfNextPacket - $timeOfCurrentPacket ]"

       set  timeOfCurrentPacket $timeOfNextPacket 
       set  frameCurrentPacket  $frameNextPacket
    }
} {PASS_STEP}


DoStep "E-UE-PROV_2-1-3-2_9-3" "SNMP RESET" {
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for CM/MTA to reboot" 40
} {PASS_STEP}

Cleanup
