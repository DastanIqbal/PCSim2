#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-3-8.test
#// Author:   Matthew Forbes
#// Creation Date: February 11, 2009
#// Modified by:
#//*****************************************************************************
#// Description:
#//     TC2805 TEST CASE E-UE-PROV_1-1-3-8 Ensure that DHCP ACK message is treated as
#//     authoritative
#//     
#// Objective:
#//     Test the ability of the eUE to treat the DHCP ACK message as authoritative
#//     if its message content differs from the DHCP OFFER.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial Configuration: Configure DHCP server to have DHCP-ACK
#//       option 122.3 different value than DHCP-OFFER.
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state of eUE
#//     - Stop sniffer
#//     - Invoke parsing tool and validate using Pass/Fail scripts
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.                
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-3-8.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_1-1-3-8-PreStep-1" "Initialize Test Platform" {
    Init_PROV
    Init_CONTROLLER_LAN
    # Initial PARSER TOOL
    Init_PART
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-3-8_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"    
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_MODIFY_DEVICE_NEG $MTA_MAC MTAFORCW_939
    PROV_DEPLOY_DHCP
} { PASS_STEP }


################################################################################
# set msgStr "Configure DHCP SERVER: \n\
#         Option 122.3 in DHCP-OFFER is configured to a valid FQDN (overide.props mtamac.OFFER122=FQDN), \n\
#         and option 122.3 in the DHCP-ACK is configured to an FQDN that resolves to a different IP \n\
#         address than that of the SNMP entity used for provisioning (MTAFORCW_939)."
# DoStep "E-UE-PROV_1-1-3-8_3-1" $msgStr {
# } {
#     verify_signal $msgStr
# }
################################################################################

set msgStr "Start Sniffer"
DoStep "E-UE-PROV_1-1-3-8_4-1" $msgStr {
    LogMsg "--- $msgStr ---"
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_1-1-3-8_5-1" "Reset MTA" {
    LogMsg "SNMP set: pktcMtaDevResetNow - 1"
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Please wait 5 minutes for MTA to try to reset." 300
} {PASS_STEP}

################################################################################
# set msgStr "Verify MTA does NOT provision via prov state"
# DoStep "E-UE-PROV_1-1-3-8_6-1" $msgStr {
#     WaitProvCompletion 100
#     # Get the OID from the MTA and check it using our previously defined
#     set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
#     LogMsg "The Value of MTA Provisioning State is: $val" 49
# } {
#     IsEqual $val -1
# }
################################################################################


set msgStr "Stop Sniffer"
DoStep "E-UE-PROV_1-1-3-8_6-2" $msgStr {    
    LogMsg "--- $msgStr ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_1-1-3-8_6-3" "Analyze flow data" {
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-3-8_6-4" "Parse all data into database" {
    # Parse data
set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
# set PARAMS_CM_SRC       "{{} {} {} {} $CM_IP {} {} {} {}}"
# set PARAMS_CM_DST       "{{} {} {} {} {} {} {} $CM_IP {}}"
# set msgID_CM            [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_CM_SRC $PARAMS_CM_DST"]
set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
if { $::PART_RETURN == 0 } {
    PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

set msgStr "DHCP DISCOVER: EXISTS"
DoStep "E-UE-PROV_1-1-3-8_6-5" $msgStr {
    LogMsg "--- $msgStr ---"
    # Find MTA MAC with colons
    set MTA_MAC_COL [AddColMac $MTA_MAC]
} {
    # Verify OPTION 60 EXISTS
    VerifyValue $msgID_MTA "INANY DHCP DISCOVER OPTION60" "EXISTS" "" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"
}

set msgStr "DHCP OFFER EXISTS: 122.3 = $PROV_SNMP_ENTITY"
DoStep "E-UE-PROV_1-1-3-8_6-6" $msgStr {
    LogMsg "--- $msgStr ---"
    # Find MTA MAC with colons
    set MTA_MAC_COL [AddColMac $MTA_MAC]
} {
    # Verify OPTION 122.3 = $PROV_SNMP_ENTITY   
    VerifyValue $msgID_MTA "INANY DHCP OFFER OPTION122SUBOPTION3" "IS" ".*$PROV_SNMP_ENTITY.*" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"
}

set msgStr "Verify DHCP REQUEST: EXISTS"
DoStep "E-UE-PROV_1-1-3-8_6-7" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    VerifyValue $msgID_MTA "INANY DHCP REQUEST OPTION54" "EXISTS" "" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"
}


set msgStr "Verify SNMP INFORM: DOES NOT EXIST"
DoStep "E-UE-PROV_1-1-3-8_6-7" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    set mtaMac [string toupper [regsub -all {:} [AddColMac $MTA_MAC] { }] ]
    # Verify MTA MAC
    VerifyNotValue $msgID_MTA "INANY SNMP SNMP_INFORM SNMP_PROVSTATE" "EXISTS" ""
}

set msgStr "Verify MTA DHCP sequence"
DoStep "E-UE-PROV_1-1-3-8_6-8" $msgStr {
    LogMsg "--- $msgStr ---"    
    set MTA_SEQUENCE_MAIN "DHCP:DISCOVER,DHCP:OFFER,DHCP:REQUEST,DHCP:ACK,\
            DHCP:DISCOVER,DHCP:DISCOVER,DHCP:DISCOVER"
    regsub -all { } $MTA_SEQUENCE_MAIN {} MTA_SEQUENCE_MAIN    
} {
    # Verify MTA Sequence
    VerifyValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE_MAIN" "" ""
}


################################################################################
# Cleanup
################################################################################
set msgStr "Restore DHCP server policy(MTAFORCW122) and comment out override.props."
DoStep "E-UE-PROV_1-1-3-8-PostStep-1" $msgStr {
} {
    PROV_MODIFY_DEVICE_NEG $MTA_MAC {""}
    PROV_DEPLOY_DHCP
    SNMPvN_RESET $CM_IP
    actionWait "Wait 60 seconds for reset" 60
}

Cleanup
