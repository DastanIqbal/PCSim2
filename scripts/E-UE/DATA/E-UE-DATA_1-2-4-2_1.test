#//********************************************************************
#// Filename: E-UE-DATA_1-2-4-2_1.test
#// Author: Matthew Forbes
#// Creation Date: 11/10/2008
#// Modified by: 
#//
#//
#//********************************************************************
#//    EDVA
#//
#// Test Steps:
#//    - Initial configuration
#//    - Start sniffer
#//    - TFTP GET MTA config file
#//    - TFTP PUT and SNMP RESET
#//    - Check Provisioning state
#//    - Perform mib check
#//    - Stop sniffer
#//    - Delete MTA config file
#//    
#//
#// Notes:
#//    
#//************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-4-2_1.test 7406 2010-07-20 17:17:37Z dthakore $ }

set test_case E-UE-DATA_1-2-4-2_1-
set step_num 1

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}


DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_SET $oid_pktcDevEvControl OCTET-STRING 0x80 $MTA_IP]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 0}

#Currently Alopa API sets 0x40 as @ symbol and this gives an error. Add this step for PACT

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_SET $oid_pktcDevEvControl OCTET-STRING 0x40 $MTA_IP]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_SET $oid_pktcDevEvControl OCTET-STRING 0xC0 $MTA_IP]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 0}

# DoStep ${test_case}[incr step_num] "pktcDevEvControl Content Verification" {
    # set type OCTET-STRING
    # set default_value " (HEX) -> 00 " ;# resetEventLogTable(0) 
    # set set_list {0x80 0xC0} 
    # #Currently Alopa API sets 0x40 as @ symbol and this gives an error. 
# } {SnmpRWVerify ${oid_pktcDevEvControl} $MTA_IP $type $default_value $set_list 0 0}

DoStep ${test_case}[incr step_num] "pktcDevEvControl Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcDevEvControl $MTA_IP 20]
    LogMsg "The Value pktcDevEvControl is: $val"
} {IsEqual $val "00"}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} {PASS_STEP}


Cleanup