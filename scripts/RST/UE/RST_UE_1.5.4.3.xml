<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-540 : Update the verification of no REFER in UE1Wait state to only execute on a relevant message 
		(ghassler 09/27/2010)




-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.5.4.3" 
	descrip="Transferee does not support the Target-Dialog header - Transferor" 
	number="RST-UE 1.5.4.3" inspector="disable">
	
	<template file="./templates/Call_Transfer_Transferor.xml"/>
	
	<remove_from fsm="UE1 Calls DUT">
		<state ID="UE1Wait"/>
		<state ID="UE1Setup"/>
		<state ID="UE1Alerting"/>
		<state ID="UE1Answer"/>
		<state ID="UE1GoOnHold"/>
	</remove_from>
	
	<remove_from fsm="UE2 Calls DUT">
		<state ID="UE2Connected"/>
	</remove_from>
	
	<add_to fsm="UE1 Calls DUT">
		<state ID="UE1Setup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<!-- If the current message that we received is an Invite, answer with
              a 100-trying -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE">
							<mod modtype="delete" hdr="Supported" hdr_instance="4"/>
						</send>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
					 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<sleep time="200"/>
						<send protocol="sip" msgtype="183-Invite">
							<mod modtype="delete" hdr="Supported" hdr_instance="4"/>
						</send>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<sleep time="200"/>
							<send protocol="sip" msgtype="180-Invite">
								<mod modtype="delete" hdr="Supported" hdr_instance="4"/>
							</send>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="UE1Setup" event="DialDigitsComplete"/>
			<transition to="UE1Alerting" event="INVITE"/>
		</state>
		
		<state ID="UE1Alerting">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
						 the system is using reliability -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliability required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite">
							<mod modtype="delete" hdr="Supported" hdr_instance="4"/>
						</send>
					</then>
				</if>
			</response>
			<transition to="UE1Alerting" event="DialDigitsComplete"/>
			<transition to="UE1Alerting" event="PRACK"/>
			<transition to="UE1Alerting" event="UPDATE"/>
			<transition to="UE1Answer" event="ALERTING_UAS"/>
		</state>
		
		<state ID="UE1Answer" timer="15000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Sending 200-Invite-->
						<send protocol="sip" msgtype="200-INVITE">
							<mod modtype="delete" hdr="Supported" hdr_instance="4"/>
						</send>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="UE1Answer" event="UPDATE"/>
			<transition to="UE1Answer" event="TimerExpired"/>
			<transition to="UE1Connected" event="ACK"/>
		</state>
		
		<state ID="UE1GoOnHold">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>REINVITE</expr>
					</eq>
					<then>
						<!-- HookFlash Step 2 and 3 -Sending 100-Invite and 200-Invite to Invite -->
						<send protocol="sip" msgtype="100-INVITE"/>
						<send protocol="sip" msgtype="200-INVITE">
							<mod modtype="delete" hdr="Supported" hdr_instance="4"/>
						</send>
					</then>
				</if>
			</response>
			<transition to="WaitCall2" event="ACK"/>
			<transition to="UE1GoOnHold" event="REINVITE"/>
			<transition to="UE1GoOnHold" event="HookFlashComplete"/>
		</state>
				
		<state ID="WaitCall2">
			<prelude once="true">
				<!-- Step 3 test case SIP xxx -->
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE2.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<transition to="UE1Wait" event="Branch1Event"/>
			<transition to="WaitCall2" event="DialDigitsComplete"/>
		</state>
		
		<state ID="UE1Wait" timer="10000">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
					<or>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>BYE</expr>
						</eq>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REFER</expr>
						</eq>
					</or>
					</or>
					<then>
						<verify step="4" requirements="REQ13832">
							<and>
								<or>
									<eq>
										<msg_ref type="event"/>
										<expr>TimerExpired</expr>
									</eq>
									<eq>
										<msg_ref type="sip">Request</msg_ref>
										<expr>BYE</expr>
									</eq>
								</or>
								<neq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REFER</expr>
								</neq>
							</and>
						</verify>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>BYE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-BYE"/>
					</then>
				</if>
			</response>
			<transition to="UE1WaitForByeOrSucceed" event="TimerExpired"/>
			<transition to="UE1WaitForByeOrSucceed" event="REFER"/>
			<transition to="UE1Wait" event="SucceedEvent"/>
			<transition to="END" event="BYE"/>
		</state>
	</add_to>
	
	<add_to fsm="UE2 Calls DUT">
		<state ID="UE2Connected">
			<prelude>
				<generate event="Branch1Event" fsm="UE1 Calls DUT"/>
				<sleep time="5000"/>
				<!-- Hang up on DUT..-->
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="UE2DUTHangUp" event="OnHookComplete"/>
		</state>
	</add_to>
</pc2xml>
