###########################################################
#   Author: Vikas Sarawat (CableLabs)
#   Date :   06/22/07  
#   DUT:     Control-Point
#   Title   : TEST CASE CPD-Control Point 2.2.1 – Message format and interaction when authentication is turned on
#   Objective: Verify the message format with authentication turned.
#
#
#
##
###########################################################


# Step 1.1
set procNum 1
set stepNum 0 ;# (next used +1)

set mod cpd
set cpd ::$mod\::

set str "InitModule CPD"
DoStep "Step $procNum.[incr stepNum]" $str {
    # Doc: InitModule CPD (Source-Link Plugin-Module & Open Socket)
    set isOk [set soc [ InitModule $mod ] ]
    if { $soc != -1 } {
        # Set flag for SocRaw (enable IPv4 option Router Alert)
        $soc.socRaw 1
    } ;# END if
} { if {$isOk == -1 } {FAIL_STEP $str } else {PASS_STEP} }

set str "initializing some message for speed"
DoStep "Step $procNum.[incr stepNum]" $str {
    # Anchor A nonce
    set A_Challenge_Nonce 000102030405060708090a0b0c0d0e0f
    # Begin Speed? #################
    set txData_Auth_3 [ $cpd\MsgNew Auth_3 ] ; # this is initialized here for speed
    # Static
    set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr flags 0x10 ]
            
    set macData_B [ $cpd\MsgNew MAC_B ] ; # this is initialized here for speed
    # Re-use static A_Challenge nonce
    set results [ $cpd\MsgSetVal $macData_B A_Challenge nonce $A_Challenge_Nonce ]
    
    set macData_C [ $cpd\MsgNew MAC_C ]
    # End Speed? ###################

    # Anchor AGID_Transform_expected
    set AGID_Transform_expected 8

    # Anchor Default HMAC SHA1 Key "64*a"
    set hmacSha1Key aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

} { PASS_STEP }


set str "Build & Tx CPD Auth_1 Msg"
DoStep "Step $procNum.[incr stepNum]" $str {
    # Doc: Instantiate New Message 
    set txData_Auth_1 [ $cpd\MsgNew Auth_1 ]
    
    # Set CPD-Hdr AX_CHALLENGE flag
    set results [ $cpd\MsgSetVal $txData_Auth_1 Hdr flags 0x08 ]
    
    
    # Set CPD AGID (first)
    set results [ $cpd\MsgSetVal $txData_Auth_1 AGID id $AGID_Transform_expected  ]
    
    # Set CPD A_CHALLENGE nonce (16-bytes)
    set results [ $cpd\MsgSetVal $txData_Auth_1 A_Challenge nonce $A_Challenge_Nonce ]
    
    set txHex_Auth_1 [ $cpd\MsgBuild $txData_Auth_1 ]
    # Doc: Build & Tx Message to DstIp, DstPort
    set msgLen [ $cpd\MsgTx $txHex_Auth_1 $soc $::gCPD_REMOTE_IP $::gCPD_REMOTE_PORT ]
    
} { if {$isOk == -1 } {FAIL_STEP $str } else {PASS_STEP} }

set str "Rx CPD Auth_2 Msg"
DoStep "Step $procNum.[incr stepNum]" $str {
    # Doc: Rx 1st Message
    #B -> A : HDR2, REQUEST, AGID, B_CHALLENGE, A_RESPONSE
    set rxData_Auth_2 [ $cpd\MsgRx ]
    
} { if {$isOk == -1 } {FAIL_STEP $str } else {PASS_STEP} }

set str "verify the A_Response"
DoStep "Step $procNum.[incr stepNum]" $str {

    #HDR1, REQUEST, AGID*, A_CHALLENGE
    #HDR1||REQUEST||AGID||A_CHALLENGE||A_RESPONSE||B_CHALLENGE
    # fetchin B_Challenge from Auth_2
    set B_CHALLENGE [$cpd\MsgGetVal $rxData_Auth_2 B_Challenge nonce]
    set B_CHALLENGE_len [format %04x [$cpd\MsgGetVal $rxData_Auth_2 B_Challenge len]]
    set B_CHALLENGE 000B[set B_CHALLENGE_len][set B_CHALLENGE]

    # 0 ing out A_RESPONSE
    set A_RESPONSE 000A0010000000000000000000000000
   
    # For the purpose of the MAC calculation for A_RESPONSE, the "entire   NLS message" is:
    set DATA_For_A_Response $txHex_Auth_1$A_RESPONSE$B_CHALLENGE 

    # Compute SHA1 HMAC for to calc A_RESPONSE
    set EXP_A_RESPONSE [sha1::hmac $hmacSha1Key [comConvertHexToStr $DATA_For_A_Response ] ]

    # Trim HMAC to 96-bits = 12-bytes = 24-char
    set EXP_A_RESPONSE [string range $EXP_A_RESPONSE 0 23 ]

    set RCVD_A_RESPONSE [$cpd\MsgGetVal $rxData_Auth_2 A_Response mac]
    if { $RCVD_A_RESPONSE != $EXP_A_RESPONSE } {
        LogMsg "ERROR Rx A_Response.mac != Local MAC\n    ($RCVD_A_RESPONSE != $EXP_A_RESPONSE) "
        set isOk -1
    } else  {
        LogMsg "-v- Rx A_Response.mac == Local MAC !!!"
    } ; # END if else (verify MAC)
} { if {$isOk == -1 } {FAIL_STEP $str } else {PASS_STEP} }


set str "Build and send AUTH_3"
DoStep "Step $procNum.[incr stepNum]" $str {
        # 3.  A -> B : HDR3, REQUEST, AGID, B_RESPONSE
        set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr len \
                [ $cpd\MsgGetVal $rxData_Auth_2 Hdr len ] ]
        set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr flags \
                [ $cpd\MsgGetVal $rxData_Auth_2 Hdr flags ] ]
        set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr checksum \
                [ $cpd\MsgGetVal $rxData_Auth_2 Hdr checksum ] ]

        
        # Copy CPD AppPayload.*
        set results [ $cpd\MsgSetVal $txData_Auth_3 AppPayload transactionId \
                [ $cpd\MsgGetVal $rxData_Auth_2 AppPayload transactionId ] ]
        set results [ $cpd\MsgSetVal $txData_Auth_3 AppPayload flags \
                [ $cpd\MsgGetVal $rxData_Auth_2 AppPayload flags ] ]

        # Copy AGID
        set results [ $cpd\MsgSetVal $txData_Auth_3 AGID id \
                [ $cpd\MsgGetVal $rxData_Auth_2 AGID id ] ]

       
         #HDR2||REQUEST||AGID||B_RESPONSE||A_CHALLENGE||B_CHALLENGE
         set DATA_FOR_B_RESPONSE [ $cpd\MsgBuild $txData_Auth_3 ]
         set A_CHALLENGE 00090014$A_Challenge_Nonce
         set DATA_FOR_B_RESPONSE $DATA_FOR_B_RESPONSE$A_CHALLENGE$B_CHALLENGE
         #LogMsg "-v- DATA_FOR_B_RESPONSE= =$DATA_FOR_B_RESPONSE"
         # Compute SHA1 HMAC for to calc A_RESPONSE
         set B_RESPONSE [sha1::hmac $hmacSha1Key [comConvertHexToStr $DATA_FOR_B_RESPONSE ] ]

         # Trim HMAC to 96-bits = 12-bytes = 24-char
         set B_RESPONSE [string range $B_RESPONSE 0 23 ]
         #LogMsg "-v- B_RESPONSE= =$B_RESPONSE"


        set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr len 0]
        set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr flags \
                [expr [ $cpd\MsgGetVal $rxData_Auth_2 Hdr flags ] & 0x0f7 ] ]
        set results [ $cpd\MsgSetVal $txData_Auth_3 Hdr checksum 0 ] 

        set results [ $cpd\MsgSetVal $txData_Auth_3 B_response mac $B_RESPONSE]

       set HextxData_Auth_3 [ $cpd\MsgBuild $txData_Auth_3 ]
       set msgLen [ $cpd\MsgTx $HextxData_Auth_3 $soc $::gCPD_REMOTE_IP $::gCPD_REMOTE_PORT ]
 

    #HDR3, REQUEST, AGID, B_RESPONSE
} { if {$isOk == -1 } {FAIL_STEP $str } else {PASS_STEP} }


set str "receive message 4 and validate"
DoStep "Step $procNum.[incr stepNum]" $str {
        # B -> A : HDR4, REPLY, AUTHENTICATION
        set rxData_Auth_4 [ $cpd\MsgRx ]

        set sequenceNumber [$cpd\MsgGetVal $rxData_Auth_4 Authentication sequenceNumber]
        set mac [$cpd\MsgGetVal $rxData_Auth_4 Authentication mac]
        set len [$cpd\MsgGetVal $rxData_Auth_4 Authentication len]

        set zeroMac [string repeat 00 [expr $len - 8]] ; # deducting hdr and sequence

        set results [$cpd\MsgSetVal $rxData_Auth_4 Authentication mac $zeroMac]
        set results [$cpd\MsgSetVal $rxData_Auth_4 hdr checksum 0000]

        set HexrxData_Auth_4 [ $cpd\MsgBuild $rxData_Auth_4]
        set HexrxData_Auth_4 $HexrxData_Auth_4$A_CHALLENGE

         # Compute SHA1 HMAC for to calc A_RESPONSE
         set expMac [sha1::hmac $hmacSha1Key [comConvertHexToStr $HexrxData_Auth_4 ] ]
         #LogMsg "-v- HexrxData_Auth_4=$HexrxData_Auth_4"


         # Trim HMAC to 96-bits = 12-bytes = 24-char
         set expMac [string range $expMac 0 23 ]
         #LogMsg "-v- expMac = $expMac="

        if { $mac != $expMac } {
           LogMsg "ERROR Rx mac != Local MAC\n    ($mac != $expMac) "
           set isOk -1
        } else  {
           LogMsg "-v- Rx mac == Local MAC !!!"
        } ; # END if else (verify MAC)

       set IPV4 [ $cpd\MsgGetVal $rxData_Auth_4 AppPayload controlPointIpAddress0]
       set subnetPrefix [$cpd\MsgGetVal $rxData_Auth_4 AppPayload subnetPrefix0 ]
       set prefixLength [ $cpd\MsgGetVal $rxData_Auth_4 AppPayload prefixLength ] 

       LogMsg "---controlPointIpAddress=$IPV4 "
       LogMsg "---subnetPrefix=$subnetPrefix "
       LogMsg "---prefixLength$prefixLength "



    #HDR3, REQUEST, AGID, B_RESPONSE
} { if {$isOk == -1 } {FAIL_STEP $str } else {PASS_STEP} }


Cleanup 
