<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	2011-11-15	Seung Lee - final version




-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 6076 $" name="UE Transferee Template" descrip="Call Transfer - TransfereeÂ " number="1">
	<!-- Next we define all of the network elements and extension 
     controls to be used in this test -->
	<fsm name="UE1">
		<models>
			<!-- By default the SS will release the call after 30 seconds. -->
			<session/>
		</models>
		<NE sim_type="orig" elements="UE1 SCSCF1 PCSCF1" targets="UE1"/>
		<!-- NOTE - The test platform is assumed to be performing the 
            registrar between tests. The session model requests
						to be informed when the DUT registers and the fsm
						will receive the Registered event once the DUT is
						registered -->
		<!-- All of the states for the test. References to "Step x" are from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram -->
		<states initialstate="DUTRegister">
			<!-- DUTREGISTER STATE -->
			<state ID="DUTRegister">
				<postlude>
					<sleep time="3000"/>
				</postlude>
				<!-- Transitions for DUTRegister state -->
				<transition to="UE1Setup" event="Registered"/>
			</state>
			<!-- UE1SETUP STATE -->
			<state ID="UE1Setup">
				<!-- Step 1 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram -
               Test 18x response for reliability for possible Prack message- send Invite -->
				<prelude>
					<send protocol="sip" msgtype="Invite">
						<mod modtype="replace" hdr="Request-Line" param="username">
							<msg_ref type="platform">UE0.phone number 1</msg_ref>
						</mod>
					</send>
				</prelude>
				<!-- Expected responses are 100, 180, 183 or 200 -->
				<response>
					<!-- Step 4 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram -
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</if>
				</response>
				<!-- Transitions for UE1Setup state -->
				<transition to="UE1Proceeding" event="100-INVITE"/>
				<transition to="UE1Alerting" event="180-INVITE"/>
				<transition to="UE1Alerting" event="183-INVITE"/>
				<transition to="UE1Connected" event="200-INVITE"/>
			</state>
			<!-- UE1PROCEEDING STATE -->
			<!-- Step 2 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 100-Invite -->
			<state ID="UE1Proceeding">
				<!-- Expected responses are 180, 183 or 200 -->
				<response>
					<!-- Step 4 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram-
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<!-- Step 3 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram- send Prack -->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</if>
				</response>
				<!-- Transitions for UE1Proceeding state -->
				<transition to="UE1Alerting" event="180-INVITE"/>
				<transition to="UE1Alerting" event="183-INVITE"/>
				<transition to="UE1Connected" event="200-INVITE"/>
			</state>
			<!-- UE1ALERTING STATE -->
			<!-- Step 5 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram- requires no special processing we simply need a transition 
			     back to this state. -->
			<state ID="UE1Alerting" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Take DUT phone off hook-->
							<send protocol="utility" msgtype="OffHook"/>
						</then>
					</if>
					<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
					<!-- Step 6 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram- received UPDATE -->
							<!--QoS required for test, sending a 200-OK to Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
						<!-- Step 8 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 180 -->
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
									<expr>180</expr>
								</eq>
								<contains>
									<msg_ref type="sip">180-INVITE.Require</msg_ref>
									<expr>100rel</expr>
								</contains>
							</and>
							<then>
								<!--Reliablity required for test, sending Prack message to peer.-->
								<send protocol="sip" msgtype="Prack"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for UE1Alerting state -->
				<transition to="UE1Alerting" event="200-PRACK"/>
				<transition to="UE1Alerting" event="UPDATE"/>
				<transition to="UE1Alerting" event="18x-INVITE"/>
				<transition to="UE1Answer" event="TimerExpired"/>
				<transition to="UE1Connected" event="200-INVITE"/>
			</state>
			<!-- UE1ANSWER STATE -->
			<state ID="UE1Answer">
				<response>
					<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram- received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Update"/>
						</then>
					</if>
				</response>
				<!-- Transitions for UE1Answer state -->
				<transition to="UE1Answer" event="UPDATE"/>
				<transition to="UE1Answer" event="200-PRACK"/>
				<transition to="UE1Answer" event="18x-INVITE"/>
				<transition to="UE1Answer" event="OffHookComplete"/>
				<transition to="UE1Connected" event="200-INVITE"/>
			</state>
			<!-- UE1CONNECTED STATE -->
			<state ID="UE1Connected">
				<prelude once="true">
					<!-- Step 11 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 200-OK to Invite -->
					<send protocol="sip" msgtype="ACK"/>
					<sleep time="5000"/>
					<send protocol="sip" msgtype="REINVITE">
						<mod modtype="replace" hdr="mode" param="value">
							<expr>inactive</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Response</msg_ref>
							<expr>200-INVITE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="ACK"/>
							<sleep time="3000"/>
							<send protocol="sip" msgtype="REINVITE">
								<!--mod modtype="replace" hdr="Request-Line" param="username">
									<msg_ref type="platform">UE0.phone number 1</msg_ref>
								</mod>
								<mod modtype="replace" hdr="Call-ID" param="value">
									<msg_ref type="sip" msg_instance="last">200-INVITE.Call-ID</msg_ref>
								</mod-->
								<mod modtype="replace" hdr="o" param="address">
									<msg_ref type="platform">UE2.IP</msg_ref>
								</mod>
								<mod modtype="replace" hdr="o" param="user">
									<msg_ref type="platform">UE2.phone number 1</msg_ref>
								</mod>
								<mod modtype="replace" hdr="c" param="address">
									<msg_ref type="platform">UE2.IP</msg_ref>
								</mod>
								<!--mod modtype="replace" hdr="From" param="local-tag">
									<msg_ref type="sip" msg_instance="last">18x-INVITE.To.tag</msg_ref>
								</mod>
								<mod modtype="replace" hdr="Target-Dialog" param="remote-tag">
									<msg_ref type="sip" msg_instance="last">18x-INVITE.From.tag</msg_ref>
								</mod-->
							</send>
						</then>
					</if>
					<if>
						<eq>
							<msg_ref type="sip">Response</msg_ref>
							<expr>200-INVITE</expr>
						</eq>
						<then>
							<generate event="SucceedEvent" fsm="UE2"/>
						</then>
					</if>
				</response>
				<!-- Transitions for UE1Connected state -->
				<transition to="UE1Connected" event="100-INVITE"/>
				<transition to="TRANSFER" event="200-INVITE"/>
			</state>
			<!-- TRANSFER State -->
			<state ID="TRANSFER">
				<prelude once="True">
					<send protocol="sip" msgtype="ACK"/>
					<generate event="SucceedEvent" fsm="UE2"/>
				</prelude>
				<!--response>
					<if>	
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>200-INVITE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="ACK"/>
							<generate event="SucceedEvent" fsm="UE2"/>
						</then>
					</if>
				</response-->
				<!-- Transitions for UE1WaitForNotify state -->
				<!-- The BYE may come in before the Branch1Event is generated -->
				<transition to="TRANSFER" event="100-INVITE"/>
				<transition to="TRANSFER" event="200-INVITE"/>
				<transition to="UE1Transferred" event="BYE"/>
				<transition to="TRANSFER" event="NOTIFY"/>
				<transition to="UE1WaitBYE" event="SucceedEvent"/>
			</state>
			<!-- UE1WaitBYE State -->
			<state ID="UE1WaitBYE">
				<response>
					<if>	
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>BYE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-BYE"/>
							<generate event="SucceedEvent" fsm="UE2"/>
						</then>
					</if>
				</response>
				<transition to="UE1Transferred" event="BYE"/>
			</state>
					
			<!-- UE1Transferred State -->
			<state ID="UE1Transferred" ES="True" offHookOK="true"/>
		</states>
	</fsm>
	<fsm name="UE2">
		<models>
			<session/>
		</models>
		<!-- Next we define all of the network elements and extension 
     controls to be used in this test -->
		<NE sim_type="term" elements="UE2 SCSCF1 PCSCF1" targets="UE2"/>
		<!-- NOTE - The test platform is assumed to be performing 
            the registrar between tests. The session model 
						requests to be informed when the DUT registers
						and the fsm will receive the Registered event	
						once the DUT is registered -->
		<states initialstate="DUTRegister">
			<!-- DUTREGISTER State -->
			<state ID="DUTRegister">
				<!-- Transitions for DUTRegister state -->
				<transition to="UE2WaitingForUE1Transferred" event="Registered"/>
			</state>
			<!-- UE2WaitingForUE1Transferred State -->
			<state ID="UE2WaitingForUE1Transferred">
				<!-- Transitions for UE2Register state -->
				<transition to="UE2Setup" event="SucceedEvent"/>
			</state>
			
			<!-- UE2SETUP State -->
			<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
			<!-- Step 1 of the Call-Orig-at_UE(DUT) Default Message Flow document. -->
			<state ID="UE2Setup">
				<response>
					<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
					<!-- Step 2 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="100-INVITE"/>
						</then>
					</if>
					<!-- This set of tests determines whether to send 183 with Answer
						 or a 180 to the INVITE -->
					<!-- Step 3 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<eq>
								<msg_ref type="extensions">precondition</msg_ref>
								<expr>require</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
									<expr>precondition</expr>
								</contains>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
									<expr>precondition</expr>
								</contains>
							</or>
						</and>
						<then>
							<!--Sending 183-Invite with answer-->
							<sleep time="200"/>
							<send protocol="sip" msgtype="183-Invite"/>
						</then>
						<elseif>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>Invite</expr>
							</eq>
							<then>
								<!--Sending 180-Invite with SS not supporting precondition.-->
								<sleep time="200"/>
								<send protocol="sip" msgtype="180-Invite"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for UE2Setup state -->
				<transition to="UE2Alerting" event="INVITE"/>
			</state>
			<!-- UE2ALERTING State -->
			<!-- NOTE: This is were all of the optional message processing before the 
           session is complete will occur during an originate test call. -->
			<state ID="UE2Alerting">
				<response>
					<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
					<!-- Steps 4 and 5 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<!-- test for need to answer second PRACK -->
					<!-- Steps 9 and 10 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<!-- This is same as for steps 4 and 5 -->
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>PRACK</expr>
							</eq>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test sending 200-Prack message to peer.-->
							<send protocol="sip" msgtype="200-PRACK"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
					</if>
					<!-- Test whether to send 180 -->
					<!-- Step 8 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<contains>
								<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
								<expr>183</expr>
							</contains>
							<eq>
								<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
								<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
							</eq>
						</and>
						<then>
							<!--Sending 180 for required preconditions.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</if>
				</response>
				<!-- Transitions for UE2Alerting state -->
				<transition to="UE2Alerting" event="PRACK"/>
				<transition to="UE2Alerting" event="UPDATE"/>
				<transition to="UE2Answer" event="ALERTING_UAS"/>
			</state>
			<!-- UE2ANSWER State -->
			<state ID="UE2Answer" timer="15000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Sending 200-Invite-->
							<send protocol="sip" msgtype="200-INVITE"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
					</if>
				</response>
				<!-- Transitions for UE2Answer state -->
				<transition to="UE2Answer" event="UPDATE"/>
				<transition to="UE2Answer" event="TimerExpired"/>
				<transition to="UE2Connected" event="ACK"/>
			</state>
			<!-- UE2CONNECTED State -->
			<state ID="UE2Connected" timer="10000">
				<!-- Transitions for UE2Connected state -->
				<transition to="UE2WaitBYE" event="TimerExpired"/>
			</state>
			
			<!-- UE2WaitBYE State -->
			<state ID="UE2WaitBYE">
				<prelude>
					<!--Sending BYE to peer to terminate call.-->
					<send protocol="sip" msgtype="BYE"/>
				</prelude>
				<!-- Transitions for UE2Releasing state -->
				<transition to="END" event="200-BYE"/>
			</state>
			
		</states>
	</fsm>
</pc2xml>
