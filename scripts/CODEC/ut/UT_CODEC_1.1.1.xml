<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<pc2xml version="$Revision: 8188 $" name="UT_Codec_1.1.1" descrip="This is a unit test for the Codec 1.1.1 test script." number="1">
	<fsm name="UE1">
		<models>
			<session/>
		</models>
		<NE sim_type="term" elements="DUT" targets="UE0 DUT"/>
		<states initialstate="Register">
			<!-- REGISTER State -->
			<state ID="Register">
				<prelude>
					<send protocol="sip" msgtype="Register" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="Digest" event="401-Register"/>
				<transition to="Setup" event="200-Register"/>
			</state>
			<state ID="Digest">
				<prelude>
					<send protocol="sip" msgtype="Register" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="Setup" event="200-Register"/>
			</state>
			<!-- SETUP State -->
			<state ID="Setup" timerExpired="1000">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="100-INVITE" target="UE1" originator="DUT"/>
						</then>
					</if>
					<if>
						<and>
							<eq>
								<msg_ref type="extensions">precondition</msg_ref>
								<expr>require</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
									<expr>precondition</expr>
								</contains>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
									<expr>precondition</expr>
								</contains>
							</or>
						</and>
						<then>
							<!--Sending 183-Invite with answer-->
							<send protocol="sip" msgtype="183-Invite" target="UE1" originator="DUT">
							<mod modtype="replace" hdr="ptime" param="value">
								<expr>10</expr>
							</mod>
						</send>
						</then>
						<elseif>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>Invite</expr>
							</eq>
							<then>
								<!--Sending 180-Invite with SS not supporting precondition.-->
								<send protocol="sip" msgtype="180-Invite" target="UE1" originator="DUT"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Setup state -->
				<transition to="Alerting" event="INVITE"/>
				<transition to="Register" event="TimerExpired"/>
			</state>
			<!-- ALERTING State -->
			<state ID="Alerting">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>PRACK</expr>
							</eq>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test sending 200-Prack message to peer.-->
							<send protocol="sip" msgtype="200-PRACK" target="UE1" originator="DUT"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" target="UE1" originator="DUT"/>
						</then>
					</if>
					<!-- Test whether to send 180 -->
					<!-- Step 8 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Status-Code</msg_ref>
								<expr>183</expr>
							</contains>
							<eq>
								<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
								<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
							</eq>
						</and>
						<then>
							<!--Sending 180 for required preconditions.-->
							<send protocol="sip" msgtype="180-Invite" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Alerting state -->
				<transition to="Alerting" event="PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Answer" event="ALERTING_UAS"/>
			</state>
			<!-- ANSWER State -->
			<state ID="Answer" timer="15000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Sending 200-Invite-->
							<send protocol="sip" msgtype="200-INVITE" target="UE1" originator="DUT">
							<mod modtype="replace" hdr="ptime" param="value">
								<expr>10</expr>
							</mod>
						</send>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Answer state -->
				<transition to="Answer" event="UPDATE"/>
				<transition to="Answer" event="TimerExpired"/>
				<transition to="Connected" event="ACK"/>
			</state>
			<!-- CONNECTED State -->
			<state ID="Connected">
				<postlude>
					<send protocol="sip" msgtype="200-BYE" target="UE1" originator="DUT"/>
				</postlude>
				<transition to="END" event="BYE"/>
			</state>
		</states>
	</fsm>
</pc2xml>
