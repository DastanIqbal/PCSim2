<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SIP-UE 1.12.4" 
	descrip="Verify the SDP format" 
	number="SIP-UE 1.12.4">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	
	<add_to fsm="UE1">
		<transition from="Connected" to="SendUpdate" event="TimerExpired"/>
		
		<!-- Step 2 from the test case SIP 1.12.4 - Send an UPDATE to 
			the UE and include the default SDP from SDP Offer from SS with 
			the following modifications: .-->
		<state ID="SendUpdate">
			<prelude once="true">
				<send protocol="sip" msgtype="UPDATE" bodies="SDP">
					<mod modtype="replace" hdr="c" param="address">
						<msg_ref type="platform">UE1.IP2</msg_ref>
					</mod>
					<mod modtype="replace" hdr="audio" param="port">
						<msg_ref type="platform">UE1.SDPPort2</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<!-- Step 3 from the test case 1.12.4 - Verify 2xx-UPDATE-->
				<if>
					<eq>
						<msg_ref type="sip">Response.CSeq.method</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC1428" group="sdp">
							<contains>
								<msg_ref type="sip">2xx-UPDATE.SDP</msg_ref>
								<expr>rtpmap</expr>
							</contains>
						</verify>
					</then>
				</if>
			</response>
			<transition to="WaitRTP" event="xxx-UPDATE"/>
			<transition to="WaitRTP" event="SucceedEvent"/>
		</state>
		
		<state ID="WaitRTP">
			<!-- prelude>
				<sleep time="10000"/>
			</prelude-->
			<response>
				<!-- Step 3 from the test case 1.12.4 - Verify 2xx-UPDATE-->
				<if>
					<eq>
						<msg_ref type="sip">Response.CSeq.method</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC1428" group="sdp">
							<contains>
								<msg_ref type="sip">2xx-UPDATE.SDP</msg_ref>
								<expr>rtpmap</expr>
							</contains>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Releasing" event="SucceedEvent"/>
			<transition to="Releasing" event="xxx-UPDATE"/>
		</state>
	</add_to>
	
	<!--  Now we need an FSM to handle the RTP validation -->
	<fsm name="Media">
		<models>
			<session/>
		</models>
		<NE sim_type="orig" elements="UE1" targets="RTP"/>
		<states initialstate="Register">
			<state ID="Register">
				<transition to="FirstMedia" event="Registered"/>
			</state>
			
			<state ID="FirstMedia">
				<transition to="SecondMedia" event="RTP"/>
				<transition to="SecondMedia" event="MediaComplete"/>
			</state>
			
			<state ID="SecondMedia">
				<response>
					<if>
						<eq>
							<msg_ref type="rtp">Request</msg_ref>
							<expr>RTP</expr>
						</eq>
						<then>
							<verify step="4" requirements="RFC1428">
								<and>
									<eq>
										<msg_ref type="rtp">RTP.DestinationAddress.IP</msg_ref>
										<msg_ref type="platform">UE1.IP2</msg_ref>
									</eq>
									<eq>
										<msg_ref type="rtp">RTP.DestinationAddress.Port</msg_ref>
										<msg_ref type="platform">UE1.SDPPort2</msg_ref>
									</eq>
								</and>
								<then>
									<generate event="SucceedEvent" fsm="UE1"/>
								</then>
							</verify>
						</then>
					</if>
				</response>
				<transition to="EndMedia" event="RTP"/>
				<transition to="SecondMedia" event="MediaComplete"/>
			</state>
			<state ID="EndMedia" ES="true" offHookOK="true"/>
		</states>
	</fsm>
</pc2xml>
