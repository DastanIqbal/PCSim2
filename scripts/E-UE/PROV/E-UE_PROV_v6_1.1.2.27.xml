<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################
 Change History: (Author & Date)
-->
<pc2xml version="$Revision: 7768 $"
        name="EUE Prov 1.1.2.27"
        descrip="eUE when provisioned in hybrid mode to try all resolved IP addresses for
                 SNMP entity FQDN contained in sub-option 3 before returning to the first
                 step in the provisioning flow."
        number="EUE Prov 1.1.2.27">

    <template file="./templates/EUE_Prov_B_1_1_1.xml" name="MultipleIP"/>

    <add_to fsm="MultipleIP">
        <transition from="StartCapture_RebootWait" to="EDVAProvisions" event="TimerExpired"/>

        <!-- E/MTA DUT reports provisioning pass code (1) to provisioning service (SNMP Entity). -->
        <state ID="EDVAProvisions">
            <prelude once="true">
                <stop_capture/>
                <send protocol="utility" msgtype="SNMPGet">
			<mod modtype="add" hdr="oids">
				<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
			</mod>
			<mod modtype="replace" hdr="agentip">
				<msg_ref type="platform">UE0.IP</msg_ref>
			</mod>
			<mod modtype="replace" hdr="version">
				<expr>2c</expr>
			</mod>
                </send>
            </prelude>
            <response>
                <verify step="5">
                    <contains>
                        <msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
                        <expr>1</expr>
                    </contains>
                </verify>
            </response>
            <transition to="ReConfigure" event="SNMPResp"/>
        </state>

        <!-- Configure DNS server and DHCP server. -->
        <state ID="ReConfigure"
               provFile="v6.C.1.2.2_hybrid.bin"
               policyFile="X_eUEv6_Hybrid_3SNMP"
               nextState="DNSLookUp"/>
	       
	<state ID="DNSLookUp" >
		<prelude>
			<log promptUser="true" expr="Run nslookup of SNMP entity multiple times so that working SNMP entity shows up 2nd in the que."/>
			<generate event="Branch1Event"/>
		</prelude>
		<transition to="Reset2" event="Branch1Event"/>
	</state>
	
        <!-- Reset the UE DUT (not the CM) and bring it to an operational state. -->
        <!-- Longer timer due to nature of test. -->
        <state ID="Reset2" timer="200000">
            <prelude once="true">
                <start_capture>
			<filter>
				<var_expr>
					<expr>host </expr>
					<msg_ref type="platform">DUT.IP</msg_ref>
					<expr> || host </expr>
					<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					<expr> || host </expr>
					<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
				</var_expr>
			</filter>
                </start_capture>

                <send protocol="utility" msgtype="SNMPSet">
                    <mod modtype="add" hdr="array">
                        <var_expr>
                            <expr>varBind 1 1 3 \r\n ][ , </expr>
                            <expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
                        </var_expr>
                    </mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.IP Address</msg_ref>
                    </mod>
                    <mod modtype="replace" hdr="version">
                        <expr>2c</expr>
                    </mod>
                </send>
            </prelude>
            <response>
                <if>
                    <eq>
                        <msg_ref type="utility">Response</msg_ref>
                        <expr>SNMPRespFailure</expr>
                    </eq>
                    <then>
                        <fail/>
                    </then>
		    <elseif>
			<eq>
				<msg_ref type="utility">Response</msg_ref>
				<expr>SNMPResp</expr>
			</eq>
			<then>
				<verify step="7">
				    <contains>
					<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
					<expr>1</expr>
				    </contains>
				</verify>
			</then>
		    </elseif>
                </if>
                <if>
                    <or>
                        <eq>
                            <msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
                            <expr>0</expr>
                        </eq>
                        <eq>
                            <msg_ref type="sip">REGISTER.Expires.value</msg_ref>
                            <expr>0</expr>
                        </eq>
                    </or>
                    <then>
                        <send protocol="sip" msgtype="200-REGISTER"/>
                    </then>
                </if>
            </response>
            <transition to="VerifyInformAndResponse" event="TimerExpired"/>
            <transition to="Reset2" event="SNMPResp"/>
            <transition to="Reset2" event="REGISTER"/>
            <!-- Step 7 MTA resets properly -->
            <transition to="END" event="SNMPRespFailure"/>
        </state>

        <state ID="VerifyInformAndResponse">
            <prelude once="true">
                <stop_capture/>

                <parse_capture name="eUE_Prov">
                    <parser_filter protocol="snmp" ip="DUT.IP"/>
                </parse_capture>
		<parse_capture name="eUE_DHCP">
                    <parser_filter protocol="dhcpv6" clientMAC="DUT.MAC Address"/>
                </parse_capture>

		<generate event="Branch1Event"/>
            </prelude>

            <response>
		<verify step="8 18">
                    <neq>
                        <capture_ref type="snmp" name="eUE_Prov" msg_instance="3">Inform Request.ipv6.dst_host.show</capture_ref>
			<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
                    </neq>
                </verify>
		
		<verify step="10 18">
			<neq>
				<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Get Response.ipv6.src_host.show</capture_ref>
				<capture_ref type="snmp" name="eUE_Prov" msg_instance="3">Inform Request.ipv6.dst_host.show</capture_ref>
			</neq>
                </verify>	

		<verify step="11 18">
			<and>
				<neq>
					<capture_ref type="snmp" name="eUE_Prov" msg_instance="11">Inform Request.ipv6.dst_host.show</capture_ref>
					<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
				</neq>
				<neq>
					<capture_ref type="snmp" name="eUE_Prov" msg_instance="3">Inform Request.ipv6.dst_host.show</capture_ref>
					<capture_ref type="snmp" name="eUE_Prov" msg_instance="11">Inform Request.ipv6.dst_host.show</capture_ref>
				</neq>
			</and>
                </verify>
		
		<verify step="13 18">
			<neq>
				<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Get Response.ipv6.src_host.show</capture_ref>
				<capture_ref type="snmp" name="eUE_Prov" msg_instance="11">Inform Request.ipv6.dst_host.show</capture_ref>
			</neq>
                </verify>
		
		<verify step="14 19">
			<and>
				<eq>
					<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.ipv6.dst_host.show</capture_ref>
					<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
				</eq>
				<neq>
					<capture_ref type="snmp" name="eUE_Prov" msg_instance="9">Inform Request.ipv6.dst_host.show</capture_ref>
					<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.ipv6.dst_host.show</capture_ref>
				</neq>
			</and>
                </verify>
		
		<verify step="16">
			<eq>
				<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Trap.1-3-6-1-2-1-2-2-1-8-10.int.show</capture_ref>
				<expr>1</expr>
			</eq>
                </verify>
		
            </response>
	    <transition to="END" event="Branch1Event"/>
        </state>
    </add_to>
</pc2xml>
