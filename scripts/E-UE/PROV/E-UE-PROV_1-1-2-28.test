################################################################################
#// Filename: E-UE-PROV_1-1-2-28.test
#// Author:   Matthew Forbes
#// Creation Date: 05/02/06
#// Modified by:
#//	Matt Forbes 11/27/07
#//		changed filter on capture to prov server instead of dhcp udp port
#//		Step 7-1 changed the set type from i to INTEGER
################################################################################
#// Description:
#//     TC1574 TEST CASE PROV 5.72 Ability to use selected IP addresses when
#//     Multiple IP addresses are resolved from SNMP entity FQDN (No SNMPv2c Response in Hybrid Flow)
#//
#// Objective:
#//     Test the MTA ability in the secure flow to use only the selected IP address
#//     through MTA-25 when multiple IP addresses are resolved for SNMP Entity FQDN contained
#//     in Option 122, sub-option 3 in the case where Hybrid flow is indicated and no SNMPv2c response is received.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Configure provisioning server for Hybrid2
#//     - Start sniffer capture
#//     - Reset MTA
#//     - Check Provisioning state
#//     - Clear Kerberos Tickets
#//     - Reset MTA using SNMPv2c
#//     - Verify SNMPv2c enrollment inform to first IP address
#//     - Verify No SNMPv2c response, if response exists skip to step 16
#//     - Verify multiple SNMPv2c enrollment informs to first IP address
#//     - Verify SNMPv2c enrollment inform to second IP address
#//     - Verify No SNMPv2c response, if response exists skip to step 16
#//     - Verify multiple SNMPv2c enrollment informs to second IP address
#//     - Verify SNMPv2c enrollment inform to third IP address
#//     - Verify SNMPv2c response (step 16)
#//     - Verify DUT completes provisioning
#//     - Verify destination addresses for SNMPv2c INFORM messages
#//     - Restore provisioning server
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Cleanup
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//
################################################################################


global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-28.test 7406 2010-07-20 17:17:37Z dthakore $ }

################################################################################

DoStep "E-UE-PROV_1-1-2-28_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 1457 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep "E-UE-PROV_1-1-2-28_3-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    # changed filter to prov server instead of dhcp udp port - MF 11/27/07
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || host $PROV_DHCP1_IP"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-2-28_4-1" "Hard reboot MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Hard reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-28_5-1" "pktcMtaDevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for 120 seconds for reboot" 120
    
    # Initial variables
    set start_time   [clock clicks -milliseconds]
    set current_time [clock clicks -milliseconds]
    set diff_time    [expr $current_time - $start_time]
    set timeout      60000
    
    while {($val != 1) && ($diff_time < $timeout)} {
        set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
        
        update ;# Update other events
        set current_time [clock clicks -milliseconds]
        set diff_time    [expr $current_time - $start_time]
        after 2000 ;# Wait for a few seconds
    }
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_1-1-2-28_6-1" "Setup policy in provisioning server" {
    LogMsg "Setup policy in provisioning server"
} {
    PROV_MODIFY_DEVICE $MTA_MAC MTATC1574
    PROV_DEPLOY_DHCP
}


##############################################################################
#         MTA RESET
###############################################################################
DoStep "E-UE-PROV_1-1-2-28_7-1" "Reset MTA" {
    set val [SNMPvN_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP]
    LogMsg "Reset MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-28_8-1" "Monitor Trace for SNMPv2c enrollment inform to one of the IP addresses" {
    LogMsg "Monitor Trace for SNMPv2c enrollment inform to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there an SNMPv2c enrollment inform from the MTA($MTA_IP) to either $PROV_DHCP1_IP/205/210?"
}

DoStep "E-UE-PROV_1-1-2-28_9-1" "Monitor Trace for SNMPv2c response to one of the IP addresses" {
    LogMsg "Monitor Trace for SNMPv2c response to one of the IP addresses"
    set choice [tk_messageBox -type yesno -default yes -message "Is there an SNMPv2c response from $PROV_DHCP1_IP to $MTA_IP ?" -icon question]
} {
    PASS_STEP
}

    if {$choice == no} {

DoStep "PROV_5-67_10-1" "Monitor Trace for no SNMPv2c response to one of the IP addresses" {
    LogMsg "Monitor Trace for no SNMPv2c response to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there no SNMPv2c response to the MTA($MTA_IP) from that address?"
}

DoStep "E-UE-PROV_1-1-2-28_11-1" "Monitor Trace for multiple SNMPv2c enrollment informs to one of the IP addresses" {
    LogMsg "Monitor Trace for multiple SNMPv2c enrollment informs to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there multiple SNMPv2c enrollment informs from the MTA($MTA_IP) to that address?"
}

DoStep "E-UE-PROV_1-1-2-28_12-1" "Monitor Trace for SNMPv2c enrollment inform to one of the IP addresses" {
    LogMsg "Monitor Trace for SNMPv2c enrollment inform to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there an SNMPv2c enrollment inform from the MTA($MTA_IP) to a different one of $PROV_DHCP1_IP/205/210?"
}


DoStep "E-UE-PROV_1-1-2-28_13-1" "Monitor Trace for SNMPv2c response to one of the IP addresses" {
    LogMsg "Monitor Trace for SNMPv2c response to one of the IP addresses"
    set choice [tk_messageBox -type yesno -default yes -message "Is there an SNMPv2c response from $PROV_DHCP1_IP to $MTA_IP ?" -icon question]
} {
    PASS_STEP
}

if {$choice == no} {


DoStep "E-UE-PROV_1-1-2-28_14-1" "Monitor Trace for no SNMPv2c response to one of the IP addresses" {
    LogMsg "Monitor Trace for no SNMPv2c response to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there no SNMPv2c response to the MTA($MTA_IP) from that address?"
}

DoStep "E-UE-PROV_1-1-2-28_15-1" "Monitor Trace for multiple SNMPv2c enrollment informs to one of the IP addresses" {
    LogMsg "Monitor Trace for multiple SNMPv2c enrollment informs to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there multiple SNMPv2c enrollment informs from the MTA($MTA_IP) to that address?"
}

DoStep "E-UE-PROV_1-1-2-28_16-1" "Monitor Trace for SNMPv2c enrollment inform to one of the IP addresses" {
    LogMsg "Monitor Trace for SNMPv2c enrollment inform to one of the IP addresses"
} {
    verify_signal "Monitor the trace : Is there an SNMPv2c enrollment inform from the MTA($MTA_IP) to a different one of $PROV_DHCP1_IP/205/210?"
}



DoStep "E-UE-PROV_1-1-2-28_17-1" "Monitor Trace for SNMPv2c response from $PROV_DHCP1_IP" {
    LogMsg "Monitor Trace for SNMPv2c response from $PROV_DHCP1_IP"
} {
    verify_signal "Monitor the trace : Is there an SNMPv2c response to the MTA($MTA_IP) from $PROV_DHCP1_IP?"
}

################################################################################
# Skip to here if Prov server resolves earlier
}
}

DoStep "PROV_-72_18-1" "pktcMtaDevProvisioningState Content Verification" {
        actionWait "Wait 5 seconds for provisioning to complete" 5
        set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_1-1-2-28_18-2" "Monitor Trace for SNMPv2c enrollment and final INFORMs to $PROV_DHCP1_IP" {
    LogMsg "Monitor Trace for SNMPv2c enrollment and final INFORMs to $PROV_DHCP1_IP"
} {
    verify_signal "Monitor the trace : Are the SNMPv2c final and erollment INFORMs sent to $PROV_DHCP1_IP?"
}

## For automated test
# DoStep "E-UE-PROV_1-1-2-28_8-1" "Wait 120 seconds for MTA to attempt to reprovision" {
        # LogMsg "Wait 6 minutes for MTA to attempt to reprovision"
    # # actionWait "Wait 6 minutes for CM/MTA to attempt to provision" 360
    # verify_signal "Monitor trace until 3AP REQs to 3 IP Addresses (9 AP REQs) occur and DUT returns to MTA1-4,
    # DHCP Discover-Ack, then hit yes immediately"
# } {
    # PASS_STEP
# }


DoStep "E-UE-PROV_1-1-2-28_19-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }


################################################################################

# }
# Parsing below for automated test
if {000} {

################ Initialize parsing tool and parse data ################

DoStep "E-UE-PROV_1-1-2-28_9-1" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }


DoStep "E-UE-PROV_1-1-2-28_9-2" "Parse all data into database" {
    set SNMP_IP1 10.32.0.201
    # Parse data
    
    set PARAMS_SNMP_SRC      "{{} {} {} {} $SNMP_IP1 {} {} {} {}}"
    set PARAMS_SNMP_DST      "{{} {} {} {} {} {} {} $SNMP_IP1 {}}"
    set msgID_SNMP1          [ParseFile $PARSERFILE "$PARAMS_SNMP_SRC $PARAMS_SNMP_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


DoStep "E-UE-PROV_1-1-2-28_10-1" "Verify 3 and only 3 AS-REQs to the first IP address" {
    #DECLARE A NEW VARIABLE
    catch { unset ::MATT }
    variable ::MATT
    #CALL INRANGE TO RETURN THE TIMESTAMPS FOR ALL THE AS-REQs PARSED FROM THE FILE AND ORIGINATED BY THE MTA
    VerifyValue $msgID_SNMP1 "INRANGEALL(AFTER:-1,BEFORE:-1):(::MATT):(PKKM_AP_REQ) PKKM PKKM_AP_REQ PKKM_KRB_TYPE" "IS" "AP-REQ"
    # tk_messageBox -message "DELETEME: The packets which match this type are: $::MATT($msgID_MTA_KRB) "
    
    
    if { [ llength $::MATT($msgID_SNMP1) ] != 3 } {
        verify_signal "ERROR: The capture file captured less/more than 3 AP-REQ. Is this correct?"
        FAIL_STEP "Incorrect number of AS REQ"
    }
} {PASS_STEP}

DoStep "E-UE-PROV_1-1-2-28_11-1" "Parse all data into database" {
    set SNMP_IP2 10.32.0.202
    # Parse data
    
    set PARAMS_SNMP_SRC      "{{} {} {} {} $SNMP_IP2 {} {} {} {}}"
    set PARAMS_SNMP_DST      "{{} {} {} {} {} {} {} $SNMP_IP2 {}}"
    set msgID_SNMP2           [ParseFile $PARSERFILE "$PARAMS_SNMP_SRC $PARAMS_SNMP_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "E-UE-PROV_1-1-2-28_13-1" "Verify 3 and only 3 AS-REQs to the second IP address" {
    #DECLARE A NEW VARIABLE
    catch { unset ::MATT }
    variable ::MATT
    #CALL INRANGE TO RETURN THE TIMESTAMPS FOR ALL THE AS-REQs PARSED FROM THE FILE AND ORIGINATED BY THE MTA
    VerifyValue $msgID_SNMP2 "INRANGEALL(AFTER:-1,BEFORE:-1):(::MATT):(PKKM_AP_REQ) PKKM PKKM_AP_REQ PKKM_KRB_TYPE" "IS" "AP-REQ"
    # tk_messageBox -message "DELETEME: The packets which match this type are: $::MATT($msgID_MTA_KRB) "
    
    
    if { [ llength $::MATT($msgID_SNMP2) ] != 3 } {
        verify_signal "ERROR: The capture file captured less/more than 3 AP-REQ. Is this correct?"
        FAIL_STEP "Incorrect number of AS REQ"
    }
} {PASS_STEP}


DoStep "E-UE-PROV_1-1-2-28_14-1" "Parse all data into database" {
    set SNMP_IP3 10.32.0.203
    # Parse data
    
    set PARAMS_SNMP_SRC      "{{} {} {} {} $SNMP_IP3 {} {} {} {}}"
    set PARAMS_SNMP_DST      "{{} {} {} {} {} {} {} $SNMP_IP3 {}}"
    set msgID_SNMP3           [ParseFile $PARSERFILE "$PARAMS_SNMP_SRC $PARAMS_SNMP_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "E-UE-PROV_1-1-2-28_16-1" "Verify 3 and only 3 AS-REQs to the third IP address" {
    #DECLARE A NEW VARIABLE
    catch { unset ::MATT }
    variable ::MATT
    #CALL INRANGE TO RETURN THE TIMESTAMPS FOR ALL THE AS-REQs PARSED FROM THE FILE AND ORIGINATED BY THE MTA
    VerifyValue $msgID_SNMP3 "INRANGEALL(AFTER:-1,BEFORE:-1):(::MATT):(PKKM_AP_REQ) PKKM PKKM_AP_REQ PKKM_KRB_TYPE" "IS" "AP-REQ"
    # tk_messageBox -message "DELETEME: The packets which match this type are: $::MATT($msgID_MTA_KRB) "
    
    
    if { [ llength $::MATT($msgID_SNMP3) ] != 3 } {
        verify_signal "ERROR: The capture file captured less/more than 3 AP-REQ. Is this correct?"
        FAIL_STEP "Incorrect number of AS REQ"
    }
} {PASS_STEP}

DoStep "E-UE-PROV_1-1-2-28_17-1" "Parse all data into database" {
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


DoStep "E-UE-PROV_1-1-2-28_17-2" "MTA Sequence" {
    LogMsg "Verify MTA Sequence"
    
    # Set MTA SEQUENCE to check
    set MTA_SEQUENCE "DHCP:DISCOVER,DHCP:OFFER,DHCP:REQUEST,DHCP:ACK,\
            DNS:DNS_QUERY_SRV,DNS:DNS_RESPONSE_SRV,DNS:DNS_QUERY_HOST,DNS:DNS_RESPONSE_HOST,\
            KRB:KRB_AS_REQ,KRB:KRB_AS_REP,PKKM:PKKM_AP_REQ,PKKM:PKKM_AP_REQ,PKKM:PKKM_AP_REQ,\
            PKKM:PKKM_AP_REQ,PKKM:PKKM_AP_REQ,PKKM:PKKM_AP_REQ,PKKM:PKKM_AP_REQ,PKKM:PKKM_AP_REQ,\
            PKKM:PKKM_AP_REQ,DHCP:DISCOVER,DHCP:OFFER,DHCP:REQUEST,DHCP:ACK"
    # Remove whitespace
    regsub -all { } $MTA_SEQUENCE {} MTA_SEQUENCE
} {
    # Verify TOD Response
    VerifyValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE" "" ""
}

#Remove below for automated test
}
################################################################################


DoStep "E-UE-PROV_1-1-2-28_22-1" "Restore policy in provisioning server" {
    LogMsg "Setup policy in provisioning server"
} {
    # verify_signal "Restore MTA policy (MTAFORCW_122)"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
}

################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-2-28_22-2" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP ]
    LogMsg "Reset of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-28_22-3" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 60 seconds for CM/MTA to provision" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

################################################################################
# Cleanup
################################################################################

Cleanup
return 0

