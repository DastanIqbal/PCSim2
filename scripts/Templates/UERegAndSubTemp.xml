<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="UE Subscription Case" 
	descrip="This is a template for testing UE SIP Subscription" 
	number="xxxx">
	<!-- Next we define the each of state machines -->
	<fsm name="UE Reg-Sub template">
		<models>
			<registrar/>
		</models>
		<!-- Next we define all of the network elements -->
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		<!-- All of the states for the test. References to "Step x" from the Default Message Flow - UE Registration (DUT) 
        and UE Subscription (DUT) Sequence Diagram -->
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<!--log expr="Power on (or reset) the UE. "/-->
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			<!-- PENDINGREGISTRATION State - Default Message Flow - 
			UE Registration (DUT) Sequence Diagram-->
			<state ID="PendingRegistration">
				<!-- Step 1 from the Default Message Flow - 
					UE Registration (DUT) Sequence Diagram- received REGISTER message-->
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<!-- Step-2 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- send 401-REGISTER-->
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Authorization" event="REGISTER"/>
			</state>
			<!--State changes from PENDINGREGISTRATION to AUTHORIZATION on receiving (Step-3) REGISTER message-->
			<!-- AUTHORIZATION State -->
			<!-- Step-3 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- received REGISTER message-->
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Authorization state -->
				<transition to="Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			<!-- REGISTERED State  - Default Message Flow - UE Registration (DUT) Sequence Diagram -->
			<state ID="Registered">
				<!-- Step  4, send 200-REGISTER upon AuthenticateSucceed event  - Default Message Flow - UE Registration (DUT) Sequence Diagram-->
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<or>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>dialog</expr>
									</contains>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>message-summary</expr>
									</contains>
								</or>
							</or>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Registered state -->
				<transition to="Registered" event="REGISTER"/>
				<transition to="Notification" event="SUBSCRIBE"/>
			</state>
			<!-- State changes from Registered to Notification on receiving SUBSCRIBE message-->
			<!-- NOTIFICATION State - Default Message Flow - UE Subscription (DUT) Sequence Diagram -->
			<!-- Step 1, 2 and 3 of Default Message Flow - UE Subscription (DUT) Sequence Diagram - 
				  send 200-SUBSCRIBE and NOTIFY message-->
			<state ID="Notification">
				<!-- Transitions for Notification state -->
				<transition to="NotificationComplete" event="200-NOTIFY"/>
			</state>
			<state ID="NotificationComplete">
				<!-- Transitions for NotificationComplete state -->
				<transition to="Registered" event="REGISTER"/>
			</state>
		</states>
	</fsm>
</pc2xml>
