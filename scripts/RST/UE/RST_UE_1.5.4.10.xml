<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.5.4.10" 
	descrip="Call Transfer - TransfereeÂ " 
	number="RST-UE 1.5.4.10" inspector="disable">
	
	<template file="./templates/Call_Transfer_Transferee.xml"/>
	
	<remove_from fsm="UE1">
		<state ID="UE1WaitForNotify"/>
	</remove_from>
	
	<remove_from fsm="UE2">
		<NE elements="UE1" targets="UE1"/>
		<state ID="UE2Setup"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<state ID="UE1WaitForNotify">
			<prelude once="true">
				<verify step="4" requirements="RFC1779">
					<or>
						<eq>
							<msg_ref type="sip" msg_instance="last">Response</msg_ref>
							<expr>202-REFER</expr>
						</eq>
						<eq>
							<msg_ref type="sip" msg_instance="last">Response</msg_ref>
							<expr>200-REFER</expr>
						</eq>
					</or>
				</verify>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>NOTIFY</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-NOTIFY"/>
					</then>
				</if>
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>NOTIFY</expr>
						</eq>
						<contains>
							<msg_ref type="sip" bodyType="text">NOTIFY</msg_ref>
							<expr>SIP/2.0 200 OK</expr>
						</contains>
					</and>
					<then>
						<verify step="6" requirements="REQ13836, REQ13849, REQ14516, RFC1780, RFC1781, RFC1782, RFC1786, RFC1787, RFC1790">
							<eq>
								<msg_ref type="sip">NOTIFY.Event.event-type</msg_ref>
								<expr>refer</expr>
							</eq>
						</verify>
						<verify step="6" requirements="REQ13836, REQ13849, REQ14516, RFC1780, RFC1781, RFC1782, RFC1786, RFC1787, RFC1790">
							<contains>
								<msg_ref type="sip">NOTIFY.Content-Type</msg_ref>
								<expr>message/sipfrag</expr>
							</contains>
						</verify>
						<verify step="6" requirements="REQ13836, REQ13849, REQ14516, RFC1780, RFC1781, RFC1782, RFC1786, RFC1787, RFC1790">
							<contains>
								<msg_ref type="sip">NOTIFY.SDP</msg_ref>
								<expr>SIP/2.0 200 OK</expr>
							</contains>
						</verify>
						<verify step="6" requirements="REQ13836, REQ13849, REQ14516, RFC1780, RFC1781, RFC1782, RFC1786, RFC1787, RFC1790">
							<eq>
								<msg_ref type="sip">NOTIFY.Subscription-State.substate-value</msg_ref>
								<expr>terminated</expr>
							</eq>
						</verify>
						<verify step="6" requirements="REQ13836, REQ13849, REQ14516, RFC1780, RFC1781, RFC1782, RFC1786, RFC1787, RFC1790">
							<eq>
								<msg_ref type="sip">NOTIFY.Subscription-State.reason</msg_ref>
								<expr>noresource</expr>
							</eq>
						</verify>
						<generate event="SucceedEvent" fsm="UE2"/>
						<generate event="Branch1Event"/>
					</then>
				</if>
				<if>	
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>BYE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-BYE"/>
						<generate event="SucceedEvent" fsm="UE2"/>
					</then>
				</if>
			</response>
			<!-- The BYE may come in before the Branch1Event is generated -->
			<transition to="UE1Transferred" event="BYE"/>
			<transition to="UE1WaitForNotify" event="NOTIFY"/>
			<transition to="UE1WaitBYE" event="Branch1Event"/>
		</state>
	</add_to>
	
	<add_to fsm="UE2">
		<NE elements="UE2" targets="UE2"/>
		
		<state ID="UE2Setup">
			<response>
				<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<verify step="5" requirements="REQ13836, REQ13849, REQ14513, REQ14515, RFC1777, RFC2525">
							<eq>
								<msg_ref type="sip">Invite.Request-Line.Request-URI</msg_ref>
								<msg_ref type="sip" msg_instance="last" fsm="UE1">REFER.Refer-To.uri</msg_ref>
							</eq>
						</verify>
						<verify step="5" requirements="REQ13836, REQ13849, REQ14513, REQ14515, RFC1777, RFC2525">
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>replaces</expr>
							</contains>
						</verify>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
						 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="UE2Alerting" event="INVITE"/>
		</state>
	</add_to>
</pc2xml>
