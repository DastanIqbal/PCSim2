#//**************************************************************************
#// Filename: E-UE-PROV_2-1-3-10.test
#// Author:   Matthew Forbes
#// Creation Date: 11/05/08
#// Modified by:
#//****************************************************************************
#// Description:
#//     TC2847 TEST CASE E-UE-PROV 2.1.3.10 Ability of the eUE to
#// correctly process the Configuration File when TLV38 contains an unknown sub-type.
#//
#// Objective:
#//     To verify that the eUE will process the configuration file and 
#// report "pass with warnings" status when a configuration containing TLLV38 parameters
#// contains an unknown sub-type.
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Notes: 
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_2-1-3-10.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_2-1-3-10_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 1490 $MTA_MAC

} {PASS_STEP}

DoStep "E-UE-PROV_2-1-3-10_3-1" "Configure provisioning server" {
    LogMsg "--- Configure provisioning server ---"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 cfg-2847.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep "PRESTEP_E-UE-PROV_2-1-3-10_4-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_2-1-3-10_4-2" "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait 60 seconds for reboot" 60
} {PASS_STEP}


DoStep "E-UE-PROV_2-1-3-10_5-1" "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {
    IsEqual $val 4
}

DoStep "E-UE-PROV_2-1-3-10_5-2" "pktcMtaDevErrorOidsTable Content Verification" {
    set val {}
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcMtaDevErrorOidsEntry $MTA_IP 3 10]
    LogMsg "The Value of MTA Error OID is: $val"
    # verify_signal "The Value of MTA Error OID should indicate an unknown \
            # value for subTLV. The value is: $val, is this correct?"
    set vala "TLV38 Unrecognized subTLV , subtype=9"
    set valb "TLV38-Error Wrong SubType"
    set valc "Unknown TLV Type 9"
    if {$val == {}} {
        FAIL_STEP "There is no reason in pktcMtaDevErrorOidsTable"
    } else {
        PASS_STEP
    }
} {
    if {$val == $vala || $val == $valb || $val == $valc} {
        PASS_STEP
    } else {
        FAIL_STEP "The value of the MTA Error OID is incorrect."
    }
}

DoStep "E-UE-PROV_2-1-3-10_6-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} {PASS_STEP}


########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_2-1-3-10_6-2" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_2-1-3-10_6-3" "Parse all data into database" {
    # Parse data
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "E-UE-PROV_2-1-3-10_6-4" "Verify SNMPv2 INFORM from DUT to IP1($PROV_SNMP2_IP)" {
    LogMsg "Verify SNMPv2 INFORM from DUT to IP1 from config file ($PROV_SNMP2_IP)"
} {
    # Verify SNMPv2 INFORM
    VerifyValue $msgID_MTA "INANY SNMP SNMP_INFORM SNMP_VERSION" "IS" "2C" AND \
            "HEADERDSTPORT" "IS" "162" AND \
            "HEADERSRCIP" "IS" "$MTA_IP" AND \
            "HEADERDSTIP" "IS" "$PROV_SNMP2_IP"
}

Cleanup
