<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SIP-UE 1.15.7" 
	descrip="User Initiated Deregistration and Support of The Registration-State Event Package  " 
	number="SIP-UE 1.15.7">
	
	<template file="./templates/UERegAndSubTemp.xml" name="Registrar"/>
	
	<remove_from fsm="Registrar">
		<state ID="NotificationComplete"/>
	</remove_from>
	
	<add_to fsm="Registrar">
		<state ID="NotificationComplete" timer="4000">
			<!-- Step  3 test case 1.15.7 - Cause the UE to deregister 
			for the public user identity-->
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
							<expr>varBind 1 1 3 \r\n ][ , </expr>
							<expr>PKTC-IETF-MTA-MIB::pktcMtaDevEnabled.0,INTEGER,2][\r\n</expr>
						</var_expr>
					</mod>
				</send>
				<!-- Step  4 test case 1.15.7 - SS sends a default NOTIFY as 
				part of the dialog created in step 3-->
			</prelude>
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="NotificationComplete" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="NotificationComplete" event="REGISTER"/>
			<transition to="SendNotify" event="TimerExpired"/>
		</state>
		
		<state ID="SendNotify" timer="5000">
			<prelude once="true">
				<send protocol="sip" msgtype="NOTIFY"/>
			</prelude>
			<response>
				<if>
					<neq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPResp</expr>
					</neq>
					<then>
						<verify step="4" requirements="REQ17020">
							<or>
								<eq>
									<msg_ref type="event"/>
									<expr>TimerExpired</expr>
								</eq>
								<and>
									<eq>
										<msg_ref type="sip">Response.CSeq.method</msg_ref>
										<expr>NOTIFY</expr>
									</eq>
									<and>
										<gte>
											<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
											<expr>300</expr>
										</gte>
										<lte>
											<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
											<expr>599</expr>
										</lte>
									</and>
								</and>
							</or>
						</verify>
					</then>
				</if>
			</response>
			<transition to="SendNotify" event="SNMPResp"/>
			<transition to="ActivateEDVA" event="xxx-NOTIFY"/>
			<transition to="ActivateEDVA" event="TimerExpired"/>
		</state>
		
		<state ID="ActivateEDVA">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
							<expr>varBind 1 1 3 \r\n ][ , </expr>
							<expr>PKTC-IETF-MTA-MIB::pktcMtaDevEnabled.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<!-- This state is part of clean up only so if we get a register message while waiting for the SNMP Response 
				simply ignore, but don't allow it to fail the test. -->
			<transition to="ActivateEDVA" event="REGISTER"/>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	</add_to>
</pc2xml>
