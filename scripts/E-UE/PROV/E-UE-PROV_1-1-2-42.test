#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-2-42.test
#// Author:   Infosys
#// Creation Date: Feb 25, 2009
#// Modified by:
#//*****************************************************************************
#// Description:
#//     TC3250 TEST CASE E-UE-PROV 1.1.2.42 - Ability of eUE to Retrieve the ToD 
#//	From eCM When ToD is Successfully Retrieved by the eCM (for 
#//	Secure Provisioning Flow)
#//
#// Objective:
#//     To verify the ability of the eUE, directed to be provisioned in Secure 
#//	mode, to retrieve the ToD from eCM in the scenario when ToD is not 
#//	available to the eCM initially and then becomes available and is 
#//	successfully retrieved by the eCM.
#//
#//
#// PacketCable DUT:
#//     E-UE
#//
#// Test Steps:
#//     - Initial Configuration
#//     - Set policy for no ToD response
#//     - Start sniffer
#//     - Reset DUT
#//     - Observe no flow beyond DHCP ACK
#//     - Change policy for ToD response
#//     - Wait for Provisioning of eUE
#//     - Monitor trace and verify syslog message and return to eUE-1
#//     - Stop sniffer
#//     - Restore policy
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-42.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_1-1-2-42-PreStep-1" "Initialize Test Platform" {
    Init_PROV
    Init_CONTROLLER_LAN
    # Initial PARSER TOOL
    Init_PART
} { PASS_STEP }



set msgStr "Configure DHCP SERVER: Block ToD port and set up policy"
DoStep "E-UE-PROV_1-1-2-42_PreStep-3" $msgStr {
} {
    PROV_BLOCK_PORT 37 udp $PROV_DHCP1_IP
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
}

set msgStr "Start Sniffer"
DoStep "E-UE-PROV_1-1-2-42_2-1" $msgStr {
    LogMsg "--- $msgStr ---"
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_1-1-2-42_2-2" "Reset DUT" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Hard reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}


set msgStr "Monitor Trace: Observe eUE does not go beyond DHCP ACK"
DoStep "E-UE-PROV_1-1-2-42_3-1" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    verify_signal $msgStr
}


set msgStr "Monitor Trace: Wait for some period of time (e.g., 1 or 2 minutes) to ensure the persistent behavior"
DoStep "E-UE-PROV_1-1-2-42_3-2" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    verify_signal $msgStr
}

set msgStr "Configure the ToD Server to be responsive for the ToD requests."
DoStep "E-UE-PROV_1-1-2-42_4-1" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    PROV_UNBLOCK_PORT 37 udp $PROV_DHCP1_IP
}

set msgStr "Wait for the ToD Server to be responsive to the ToD requests(this may take a few of minutes)."
DoStep "E-UE-PROV_1-1-2-42_5-1" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    verify_signal $msgStr
}

DoStep "E-UE-PROV_1-1-2-42_6-1" "pktcMTADevProvisioningState Content Verification" {
    verify_signal "Wait for eUE to complete provisioning (this may take a few minutes)"
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

set msgStr "Verify Syslog message from eUE, 4000960006 time has been retrieved from TOD server, and the timestamp matches the TOD response."
DoStep "E-UE-PROV_1-1-2-42_7-1" $msgStr {
    LogMsg "--- $msgStr ---"
} {
    verify_signal $msgStr
}


set msgStr "Stop Sniffer"
DoStep "E-UE-PROV_1-1-2-42_6-1" $msgStr {
    LogMsg "--- $msgStr ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} {PASS_STEP}

################################################################################
# DoStep "E-UE-PROV_1-1-2-42-5-1" "Analyze flow data" {
#     # Set up parser file
#     set PARSERFILE    $ETH_DEFAULT_TXT_FILE
# } { PASS_STEP }
# 
# DoStep "E-UE-PROV_1-1-2-39-5-2" "Parse all data into database" {
#     # Parse data
#     set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
#     set PARAMS_MTA_SRC       "{{} {} {} {} $MTA_IP {} {} {} {}}"
#     set PARAMS_MTA_DST       "{{} {} {} {} {} {} {} $MTA_IP {}}" 
#     set msgID_MTA            [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
# 
# } { 
#     if { $::PART_RETURN == 0 } {
#         PASS_STEP
#     } else {
#         FAIL_STEP "Cannot find data"
#     }
# }
# 
# DoStep "E-UE-PROV_1-1-2-42_5-3" "TOD Request" {
#     LogMsg "Verify TOD Request"
# } {
#     # Verify TOD Request
#     VerifyValue $msgID_MTA "INANY TIME TIME_TYPE TIME_REQUEST" "EXISTS" ""
# }
# 
# DoStep "E-UE-PROV_1-1-2-42_5-4" "TOD Response" {
#     LogMsg "Verify TOD Response"
#     set msg_head [GetValue $msgID_MTA "INANY TIME TIME_MESSAGE_HEADER"]
#     set new_msg_head [split $msg_head \[ ]
#     set TODtime_stamp_field  "[lindex [lindex $new_msg_head 0] 0] [lindex [lindex $new_msg_head 0] 1] [lindex [lindex $new_msg_head 0] 2] [string range [lindex [lindex $new_msg_head 0] 3] 0 3]"    
# } {
#     # Verify TOD Response
#     VerifyValue $msgID_MTA "INANY TIME TIME_TYPE TIME_RESPONSE" "EXISTS" ""
# }
# 
# 
# DoStep "E-UE-PROV_1-1-2-42_7-1" "Obtain SYSLOG Event Time" {
#     set msg_head [GetValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_MESSAGE_HEADER"]
#     set new_msg_head [split $msg_head \[ ]
#     set time_stamp_field  "[lindex [lindex $new_msg_head 0] 0] [lindex [lindex $new_msg_head 0] 1] [lindex [lindex $new_msg_head 0] 2] [string range [lindex [lindex $new_msg_head 0] 3] 0 3]"
#     LogMsg "TimeStamp field in SYSLOG: $time_stamp_field"
# } {
#     VerifyValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT" "IS" "<4000960006>"
# }
# 
# DoStep "E-UE-PROV_1-1-2-42_7-1" "Verify SYSLOG Event Time" {
#     LogMsg "Timestamp of this Event Messages contains the correct ToD.value "
# } {
#     IsEqual $time_stamp_field $TODtime_stamp_field
# }
# 
################################################################################

################################################################################
# Cleanup
################################################################################
################################################################################
# set msgStr "Restore DHCP SERVER"
# DoStep "E-UE-PROV_1-1-2-40-PostStep-1" $msgStr {
# } {
#     PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
#     PROV_DEPLOY_DHCP
# }
# 
# DoStep "E-UE-PROV_1-1-2-40_PostStep-2" "Reset DUT" {
#     set val [SNMPvN_RESET $CM_IP]
#     LogMsg "Hard reboot of CM and MTA has passed"
# } {
#     IsEqual $val 0
# }
# 
# DoStep "E-UE-PROV_1-1-2-40_PostStep-3" "pktcMTADevProvisioningState Content Verification" {
#     actionWait "Wait 60 seconds for CM/MTA to provision" 60
#     # Get the OID from the MTA and check it using our previously defined
#     set val [GetProvState 1 600]
#     LogMsg "MTA Provisioning State" 49
#     LogMsg "             - Expected : 1" 49
#     LogMsg "             - Received : $val" 49
# } {
#     IsEqual $val 1
# }
# 
################################################################################
Cleanup