<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)	
	PCPCII-139 : Reverted to v. 7406. (botte 11/16/2010)	


-->
<pc2xml version="" 
	name="RST-UE 1.1.5.2" 
	descrip="In-Service and Out-of-Service States Path" 
	number="RST-UE 1.1.5.2">
	
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Connected"/>
		<state ID="OnHook"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<transition from="Register" to="WaitKA" event="Registered"/>
		
		<state ID="WaitKA">
			<transition to="OffHook" event="Branch1Event"/>
		</state>
		
		<transition from="OffHook" to="VerifyDialTone" event="OffHookComplete"/>
		
		<state ID="VerifyDialTone">
			<prelude>
				<send protocol="utility" msgtype="VerifyDialTone"/>
			</prelude>
			<response>
				<verify step="2" requirements="REQ13488, REQ23113">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyDialToneComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="Setup" event="VerifyDialToneComplete"/>
			<transition to="Setup" event="VerifyDialToneError"/>
		</state>
		
		<state ID="Connected">
			<response>
				<if>
					<neq>
						<msg_ref type="event"/>
						<expr>DIALOG_CONFIRMED_UAS</expr>
					</neq>
					<then>
						<verify step="4" requirements="REQ23114, REQ23115">
							<and>
								<eq>
									<msg_ref type="event"/>
									<expr>Branch3Event</expr>
								</eq>
								<neq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>BYE</expr>
								</neq>
							</and>
						</verify>
					</then>
					<elseif>
						<eq>
							<msg_ref type="event"/>
							<expr>DIALOG_CONFIRMED_UAS</expr>
						</eq>
						<then>
							<!-- Step 4, tell the Stun Server to stop processing Binding Requests -->
							<generate event="Branch2Event" fsm="Stun"/>
						</then>
					</elseif>	
				</if>
			</response>
			<transition to="OnHook" event="Branch3Event"/>
			<transition to="EndCall" event="BYE"/>
		</state>
		
		<state ID="OnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="WaitBye" event="OnHookComplete"/>
		</state>
		
		<state ID="WaitBye">
			<response>
				<verify step="5" requirements="REQ23117, REQ23119">
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>BYE</expr>
					</eq>
				</verify>
			</response>
			<transition to="EndCall" event="BYE"/>
		</state>
		
		<state ID="EndCall" ES="true">
			<transition to="CheckOffHook" event="SessionTerminated"/>
		</state>
		
		<state ID="CheckOffHook">
			<prelude>
				<sleep time="6000"/>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="VerifyDialTone2" event="OffHookComplete"/>
		</state>
			
		<state ID="VerifyDialTone2">
			<prelude>
				<send protocol="utility" msgtype="VerifyDialTone">
					<mod modtype="replace" hdr="voiceExpected">
						<expr>no</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="6" requirements="REQ23117, REQ23118">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyDialToneComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="EndCall2" event="VerifyDialToneComplete"/>
			<transition to="EndCall2" event="VerifyDialToneError"/>
		</state>
		
		<state ID="EndCall2" ES="true">
			<transition to="TermSetup" event="SessionTerminated"/>
		</state>
		
		<state ID="TermSetup">
			<prelude>
				<sleep time="5000"/>
				<send protocol="sip" msgtype="Invite"/>
			</prelude>
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliability required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="TermProceeding" event="100-INVITE"/>
			<transition to="TermAlerting" event="180-INVITE"/>
			<transition to="TermAlerting" event="183-INVITE"/>
			<transition to="TermConnected" event="200-INVITE"/>
		</state>
			
		<state ID="TermProceeding">
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="TermAlerting" event="180-INVITE"/>
			<transition to="TermAlerting" event="183-INVITE"/>
			<transition to="TermConnected" event="200-INVITE"/>
		</state>
			
		<state ID="TermAlerting" timer="12000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="TermAlerting" event="200-PRACK"/>
			<transition to="TermAlerting" event="UPDATE"/>
			<transition to="TermAlerting" event="18x-INVITE"/>
			<transition to="TermAnswer" event="TimerExpired"/>
			<transition to="TermConnected" event="200-INVITE"/>
		</state>
			
		<state ID="TermAnswer">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="TermAnswer" event="UPDATE"/>
			<transition to="TermAnswer" event="200-PRACK"/>
			<transition to="TermAnswer" event="18x-INVITE"/>
			<transition to="TermAnswer" event="OffHookComplete"/>
			<transition to="TermConnected" event="200-INVITE"/>
		</state>
		
		<state ID="TermConnected" timer="5000">
			<prelude>
				<send protocol="sip" msgtype="ACK"/>
				<verify step="9" requirements="REQ23117, REQ23130">
					<eq>
						<msg_ref type="sip" msg_instance="last">Response.Status-Line.status-code</msg_ref>
						<expr>200</expr>
					</eq>
				</verify>
			</prelude>
			<transition to="TermOnHook" event="TimerExpired"/>
		</state>
		
		<state ID="TermOnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="TermReleasing" event="OnHookComplete"/>
		</state>
		
		<state ID="TermReleasing">
			<postlude>
				<send protocol="sip" msgtype="200-BYE"/>
			</postlude>
			<!-- Transitions for Releasing state -->
			<transition to="EndCall3" event="BYE"/>
		</state>
		
		<state ID="EndCall3" ES="true">
			<prelude once="true">
				<generate event="Branch4Event" fsm="Registrar"/>
			</prelude>
			<transition to="WaitRegistrar" event="SessionTerminated"/>
		</state>
		
		<state ID="WaitRegistrar">
			<transition to="WaitInvite" event="Branch5Event"/>
		</state>
		
		<state ID="WaitInvite">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<transition to="WaitInvite" event="DialDigitsComplete"/>
			<transition to="RespondAndVerifyCancel" event="INVITE"/>
		</state>
		
		<state ID="RespondAndVerifyCancel">
			<prelude>
				<send protocol="sip" msgtype="100-INVITE"/>
				<send protocol="sip" msgtype="180-INVITE"/>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>CANCEL</expr>
					</eq>
					<then>
						<verify step="13" requirements="REQ23114, REQ23116">
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>CANCEL</expr>
						</eq>
						<then>
							<generate event="SucceedEvent" fsm="Stun"/>
						</then>
					</verify>
					</then>
				</if>
			</response>
			<transition to="END" event="CANCEL"/>
		</state>
	</add_to>
	
	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- Power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
								<generate event="AuthenticateSucceed" fsm="Stun"/>
								<generate event="Registered" fsm="UE1"/>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<transition to="Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Registered">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="Registered" event="REGISTER"/>
				<transition to="Notification" event="SUBSCRIBE"/>
			</state>
			
			<state ID="Notification">
				<postlude>
					<generate event="Registered" fsm="Stun"/>
				</postlude>
				<transition to="NoRegistersAnswer" event="200-NOTIFY"/>
			</state>
			
			<state ID="NoRegistersAnswer">
				<transition to="NoRegistersAnswer" event="REGISTER"/>
				<transition to="PendingRegistration2" event="Branch4Event"/>
			</state>
				
			<state ID="PendingRegistration2">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Authorization2" event="REGISTER"/>
			</state>
			
			<state ID="Authorization2">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
								<generate event="Branch5Event" fsm="Stun"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<transition to="Registered2" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization2" event="REGISTER"/>
			</state>
			
			<state ID="Registered2">
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<or>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>dialog</expr>
									</contains>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>message-summary</expr>
									</contains>
								</or>
							</or>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="Notification2" event="SUBSCRIBE"/>
			</state>
			
			<state ID="Notification2">
				<transition to="WaitNextKA" event="200-NOTIFY"/>
			</state>
			
			<state ID="WaitNextKA">
				<transition to="EndRegistrar" event="Branch5Event"/>
			</state>
			
			<state ID="EndRegistrar" ES="true" offHookOK="true"/>
		</states>
	</fsm>
	
	<fsm name="Stun">
		<models>
			<stun/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="PCSCF1"/>
		
		<states initialstate="WaitReg">
			<state ID="WaitReg">
				<transition to="ProcessBindingReq" event="AuthenticateSucceed"/>
			</state>
			
			<state ID="ProcessBindingReq">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				
				<transition to="ProcessBindingReq" event="BindingRequest"/>
				<transition to="AllowBindingReq" event="Registered"/>
			</state>
			
			<state ID="AllowBindingReq">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<generate event="Branch1Event" fsm="UE1"/>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				
				<transition to="AllowBindingReq" event="BindingRequest"/>
				<transition to="BlockBindingReq" event="Branch2Event"/>
			</state>
			
			<state ID="BlockBindingReq">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="stun">Request</msg_ref>
								<expr>BindingRequest</expr>
							</eq>
							<count>
								<cur_state/>
								<expr>1</expr>
							</count>
						</and>
						<then>
							<generate event="Branch3Event" fsm="UE1"/>
							<!-- Don't RESPOND to the request -->
							<!-- send protocol="stun" msgtype="BindingResponse"/-->
						</then>
					</if>
				</response>
				<transition to="BlockBindingReq" event="BindingRequest"/>
				<transition to="ProcessBindingReq2" event="Branch5Event"/>
			</state>
			
			<state ID="ProcessBindingReq2">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
					<if>
						<and>
							<eq>
								<msg_ref type="stun">Request</msg_ref>
								<expr>BindingRequest</expr>
							</eq>
							<count>
								<cur_state/>
								<expr>2</expr>
							</count>
						</and>
						<then>
							<generate event="Branch5Event" fsm="UE1"/>
							<generate event="Branch5Event"/>
						</then>
					</if>
				</response>
				<transition to="ProcessBindingReq2" event="BindingRequest"/>
				<transition to="BlockBindingReq2" event="Branch5Event"/>
			</state>
			
			<state ID="BlockBindingReq2">
				<transition to="EndStun" event="SucceedEvent"/>
				<transition to="BlockBindingReq2" event="BindingRequest"/>
			</state>
			<!-- PCPCII-95 Add the offHookOK attribute to this state -->
			<state ID="EndStun" ES="true" offHookOK="true"/>
		</states>
	</fsm>
</pc2xml>
