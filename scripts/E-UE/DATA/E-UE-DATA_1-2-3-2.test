################################################################################
#// Filename: E-UE-DATA_1-2-3-2.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: Feb 23, 2009
#// Modified by:
################################################################################
#// Description:
#//     TC2748 TEST CASE E-UE-DATA 1.2.3.2 - Functionality and Content Verification 
#//     for Provisioning MIBs Specific to IPv4 
#//
#// Objective:
#//     This test verifies the eUE ability to properly implement the objects for 
#//	provisioning and management MIBs defined in CL-PKTC-EUE-PROV-MGMT-MIB 
#//	that are specific to IPv4 provisioning. This test is applicable only when 
#//	the eUE is in IPv4 mode
#//
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//
#//
#// Notes:
#//     - Requires provPrimitives.tcl
#//
#//
################################################################################
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-3-2.test 7406 2010-07-20 17:17:37Z dthakore $ }

Init_PROV

set test_case E-UE-DATA_1-2-3-2-
set step_num 1


set DHCP_IP1 [decIpToHexIp $PROV_DHCP1_IP]
set DHCP_IP2 [decIpToHexIp $PROV_DHCP2_IP]
set DHCP_TMP 0A2000CD

set DNS_IP1 [decIpToHexIp $PROV_DNS1_IP]
set DNS_IP2 [decIpToHexIp $PROV_DNS2_IP]
set DNS_TMP 0A2000CD

set NON_WRITABLE 2



DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num] "pktcMtaDevDhcpServerAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevDhcpServerAddressType $MTA_IP]
    LogMsg "The Value pktcMtaDevDhcpServerAddressType is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp1 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevServerDhcp1 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDhcp1 is: $val"
} {IsEqual $val $DHCP_IP1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp2 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevServerDhcp2 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDhcp2 is: $val"
} {IsEqual $val $DHCP_IP2}

DoStep ${test_case}[incr step_num] "pktcMtaDevDnsServerAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevDnsServerAddressType $MTA_IP]
    LogMsg "The Value pktcMtaDevDnsServerAddressType is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns1 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevServerDns1 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDns1 is: $val"
} {IsEqual $val $DNS_IP1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns2 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevServerDns2 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDns2 is: $val"
} {IsEqual $val $DNS_IP2}



DoStep ${test_case}[incr step_num] "pktcMtaDevDhcpServerAddressType Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcMtaDevDhcpServerAddressType INTEGER 1 $MTA_IP]
    LogMsg "The Value of pktcMtaDevDhcpServerAddressType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp1 Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcMtaDevServerDhcp1 Hex-STRING $DHCP_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDhcp1 is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp2 Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcMtaDevServerDhcp2 Hex-STRING $DHCP_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDhcp2 is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevDnsServerAddressType Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcMtaDevDnsServerAddressType INTEGER 1 $MTA_IP]
    LogMsg "The Value of pktcMtaDevDnsServerAddressType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns1 Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcMtaDevServerDns1 Hex-STRING $DNS_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDns1 is: $val"
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns1 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevServerDns1 $MTA_IP 20]
    set val [regsub -all " " $val ""]
    LogMsg "The Value pktcMtaDevServerDns1 is: $val"
} {IsEqual $val $DNS_TMP}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns2 Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcMtaDevServerDns2 Hex-STRING $DHCP_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDns2 is: $val"
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns2 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevServerDns2 $MTA_IP 20]
    set val [regsub -all " " $val ""]
    LogMsg "The Value pktcMtaDevServerDns2 is: $val"
} {IsEqual $val $DNS_TMP}


DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure_Prov"
} { PASS_STEP }

DoStep ${test_case}[incr step_num] "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    # Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_5-4" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num] "pktcMtaDevDhcpServerAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevDhcpServerAddressType $MTA_IP]
    LogMsg "The Value pktcMtaDevDhcpServerAddressType is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp1 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevServerDhcp1 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDhcp1 is: $val"
} {IsEqual $val $DHCP_IP1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp2 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevServerDhcp2 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDhcp2 is: $val"
} {IsEqual $val $DHCP_IP2}

DoStep ${test_case}[incr step_num] "pktcMtaDevDnsServerAddressType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevDnsServerAddressType $MTA_IP]
    LogMsg "The Value pktcMtaDevDnsServerAddressType is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns1 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevServerDns1 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDns1 is: $val"
} {IsEqual $val $DNS_IP1}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns2 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevServerDns2 $MTA_IP]
    LogMsg "The Value pktcMtaDevServerDns2 is: $val"
} {IsEqual $val $DNS_IP2}



DoStep ${test_case}[incr step_num] "pktcMtaDevDhcpServerAddressType Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcMtaDevDhcpServerAddressType INTEGER 1 $MTA_IP]
    LogMsg "The Value of pktcMtaDevDhcpServerAddressType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp1 Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcMtaDevServerDhcp1 x $DHCP_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDhcp1 is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDhcp2 Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcMtaDevServerDhcp2 x $DHCP_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDhcp2 is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevDnsServerAddressType Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcMtaDevDnsServerAddressType INTEGER 1 $MTA_IP]
    LogMsg "The Value of pktcMtaDevDnsServerAddressType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns1 Content set" {
    # Try to set the read-write parameter
    set val [SNMPvN_SET $oid_pktcMtaDevServerDns1 x $DNS_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDns1 is: $val"
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns1 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevServerDns1 $MTA_IP]
    set val [regsub -all " " $val ""]
    LogMsg "The Value pktcMtaDevServerDns1 is: $val"
} {IsEqual $val $DNS_TMP}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns2 Content set" {
    # Try to set the read-write parameter
    set val [SNMPvN_SET $oid_pktcMtaDevServerDns2 x $DHCP_TMP $MTA_IP]
    LogMsg "The Value of pktcMtaDevServerDns2 is: $val"
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "pktcMtaDevServerDns2 Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevServerDns2 $MTA_IP]
    set val [regsub -all " " $val ""]
    LogMsg "The Value pktcMtaDevServerDns2 is: $val"
} {IsEqual $val $DNS_TMP}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid_Prov"
} { PASS_STEP }

DoStep ${test_case}[incr step_num] "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


############### Reset CM and MTA and Verify Provisioning ################

DoStep ${test_case}[incr step_num] "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup


