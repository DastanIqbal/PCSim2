#//****************************************************************************
#// Filename: E-UE-DATA_1-2-4-1.test
#// Author:   Matthew Forbes
#// Creation Date: 11/10/2008
#// Modified by:
#//
#//
#//
#//****************************************************************************
#// Description:
#//     TC2754 TEST CASE E-UE-DATA 1.2.4.1 Ability of eUE to Support Event Reporting and Syslog
#//        
#//
#// Objective:
#//     If the eUE supports battery backup, this test verifies the read-only and read-write functionality
#//     for a subset of battery backup MIB objects. Additionally, this test checks functionality for specific
#//     battery usage.
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset EDVA
#//     - Check Provisioning state
#//     - Check values MIB values
#//     - Check read-write capablities
#//     - Stop Sniffer
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-4-1.test 7769 2011-01-25 18:13:14Z botte $ }

set test_case E-UE-DATA_1-2-4-1-
set step_num 1

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV

    Init_CONTROLLER_LAN
    # Initial PARSER TOOL
    Init_PART
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
        SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "Clear pktcDevEventLogTable" {
    LogMsg "Clear pktcDevEventLogTable"
    set val [SNMP_SET 1.3.6.1.4.1.4491.2.2.3.1.1.0 bits 0 $MTA_IP]
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    # Changed sniffer filter to avoid syslog messages from other devices -MLF 09/15/08   
    # SetupCaptureControllerLan "udp port 67 || dst port 514"
    SetupCaptureControllerLan "host $MTA_IP || host $PROV_DHCP1_IP"
    StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
        SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        actionWait "Wait for MTA to reboot" 60
    } {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Part_1"
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]     
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {    
        set search_index [lsearch $text_list $pctext]       
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}   
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index] 
    if {$index == ""} { set command FAIL_STEP }
} {eval $command}

DoStep ${test_case}[incr step_num] "pktcDevEvLogEndpointName Content Verification" {
    set val [SNMP_GET ${oid_pktcDevEvLogEndpointName}.$index $MTA_IP 20]
    set temp_val [string toupper $val]  
    set temp_MTA_NAME [string toupper $MTA_NAME] 
} {
    # IsEqual $temp_val "\<${temp_MTA_NAME}\>\/\<${MTA_IP}\>"
    IsEqual $temp_val "${temp_MTA_NAME}\/${MTA_IP}"
}

DoStep ${test_case}[incr step_num] "Verify pktcDevEvLogTime UTC Format" {
    set command FAIL_STEP
    set val1 [SNMP_GET ${oid_pktcDevEvLogTime}.$index $MTA_IP 20]
    #set val1 [SnmpDateTimeConverter $val1]
    LogMsg "Value for pktcDevEvLogTime.$index = $val1"
    if {[llength [split $val1 ,]] == 3} {
        if {[regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9][,]([+|-])([0-9]|10|11)[:]([1-5]?[0-9])} $val1]} {
            set command PASS_STEP
        }
    } elseif {[llength [split $val1 ,]] == 2}  {
        if {[regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9]} $val1]} {
            set command PASS_STEP
        }
    } 
} {eval $command}

DoStep ${test_case}[incr step_num] "Check/Verify TimeStamp pktcDevEvLogTime" {
    set command PASS_STEP

    #Get local time, same time as Ethereal use    
    set local_date [clock format [clock seconds] -format "%d" -gmt true]
    set local_mth  [clock format [clock seconds] -format "%m" -gmt true]
    set local_hr   [clock format [clock seconds] -format "%H" -gmt true]
    # For single digit month--MLF 10/9/07
    # regsub 0 $local_mth "" local_mth
    if {$local_mth != 10} {
        regsub 0 $local_mth "" local_mth
    }
    # For single digit day--MLF 10/9/07
    # if {$local_date != 30 || $local_date != 20 || $local_date != 10}
            if {$local_date != 10} {
        regsub 0 $local_date "" local_date
    }
    set local_year [clock format [clock seconds] -format "%Y"]
    
    # Break down the pktcDevEvLogTime into individual parts so as to report if one fails
    set val1_year [lindex [split [lindex [split $val1 ,] 0] -] 0]
    set val1_mth  [lindex [split [lindex [split $val1 ,] 0] -] 1]
    set val1_date [lindex [split [lindex [split $val1 ,] 0] -] 2]
    set val1_hour [lindex [split [lindex [split $val1 ,] 1] :] 0]
    set val1_min  [lindex [split [lindex [split $val1 ,] 1] :] 1]    

    if {$val1_year != $local_year} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime year; $val1_year , year = $local_year"
    }
    if {$val1_mth != $local_mth} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime month; $val1_mth , month = $local_mth"
    }
    if {$val1_date != $local_date} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime date; $val1_date , date = $local_date"
    }
    if {$val1_hour != $local_hr} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime hour; $val1_hour , hour = $local_hr"
    }
} {eval $command}


########################## INVOKE PARSING TOOL ##################################
DoStep ${test_case}[incr step_num] "Parse all data into database" {
    # Initial PARSER TOOL    
    #set ::PART_SHOW_DB_WRITE 1
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE  

    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    # Added parse for syslog messages - MLF 9/5/08
    set PARAMS_SYSLOG       "{SYSLOG {} {} {} {} {} {} {} {}}"
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    # set PARAMS_DHCP         "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"
    
    set MTA_MAC_COL [AddColMac $MTA_MAC]

    # Set up parser file     
    # set msgID_MTA [ParseFile $PARSERFILE $PARAMS_DHCP ]
    set msgID_MTA [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST $PARAMS_SYSLOG"]
} { 
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep ${test_case}[incr step_num] "Verify SYSLOG Destination Port = 514" {    
} {
    VerifyValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG HEADERDSTPORT" "IS" "514" 
}

DoStep ${test_case}[incr step_num] "Verify SYSLOG Facility = local0 (16)" {    
} {
    VerifyValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_FACILITY" "IS" "16" 
}

DoStep ${test_case}[incr step_num] "Obtain Syslog Event" {   
    set msg_head [GetValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_MESSAGE_HEADER"]
    set new_msg_head [split $msg_head \[ ]
    set msg_date [lindex $new_msg_head 0]
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Check/Verify SYSLOG Event TimeStamp field" {
    # Break down the Syslog Event into individual parts so as to report if one fails
    set val_year [string range [lindex $msg_date 3] 0 3]    
    set val_mth  [lindex $msg_date 0]    
    set val_date [lindex $msg_date 1]    
    set val_hour [lindex [split [lindex $msg_date 2] :] 0]  
    
    set command PASS_STEP

    #Get local time, same time as Ethereal use    
    set local_date [clock format [clock seconds] -format "%d" -gmt true]
    set local_mth  [clock format [clock seconds] -format "%b" -gmt true]
    set local_hr   [clock format [clock seconds] -format "%H" -gmt true]    
    set local_year [clock format [clock seconds] -format "%Y"]    
      
    # if {$val_year != $local_year} {
        # set command FAIL_STEP
        # LogMsg "ERROR: Syslog Event year; $val_year , year = $local_year"
    # }
    if {$val_mth != $local_mth} {
        set command FAIL_STEP
        LogMsg "ERROR: Syslog Event month; $val_mth , month = $local_mth"
    }
    if {$val_date != $local_date} {
        set command FAIL_STEP
        LogMsg "ERROR: Syslog Event date; $val_date , date = $local_date"
    }
    if {$val_hour != $local_hr} {
        set command FAIL_STEP
        LogMsg "ERROR: Syslog Event hour; $val_hour , hour = $local_hr"
    }
} {eval $command}

DoStep ${test_case}[incr step_num] "Verify SYSLOG TAG field = EDVA" {
    set msg_length [string length $msg_date]
    set tag_field [string range $msg_date [expr [string length $msg_date] - 4] end]
} {IsEqual $tag_field "EDVA"}

DoStep ${test_case}[incr step_num] "Verify SYSLOG PID field = PACKETCABLE" {
    set pid_field [lindex [split [lindex $new_msg_head 1] \] ] 0]
} {IsEqual $pid_field "PACKETCABLE"}

DoStep ${test_case}[incr step_num] "Verify SYSLOG Hostname is equal to DHCP ACK Option 12" {    
    set host_index [lsearch -regexp $msg_head {[mM][tT][aA]}]
    set host_name [lindex [split [lindex $msg_head $host_index] .] 0]  
    set OPT12 [GetValue $msgID_MTA "INANY DHCP ACK OPTION12" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"]
    regsub -all \" $OPT12 "" OPT12
LogMsg "OPT12 = $OPT12, HOSTNAME = $host_name"
} {IsEqual $host_name $OPT12}




DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    SetupCaptureControllerLan "udp port 67 || dst port 514"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
        SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        actionWait "Wait for MTA to reboot" 60
    } {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Part_2"
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################
DoStep ${test_case}[incr step_num] "Parse all data into database" {
    # Initial PARSER TOOL
    #set ::PART_SHOW_DB_WRITE 1
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
    
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    # Added parse for syslog messages - MLF 9/5/08
    set PARAMS_SYSLOG       "{SYSLOG {} {} {} {} {} {} {} {}}"
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set PARAMS_DHCP         "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST $PARAMS_SYSLOG"
    
    set MTA_MAC_COL [AddColMac $MTA_MAC]
    
    # Set up parser file
    set msgID_MTA [ParseFile $PARSERFILE $PARAMS_DHCP ]
    
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep ${test_case}[incr step_num] "Obtain SYSLOG Event Time" {
    set msg_head [GetValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_MESSAGE_HEADER"]
    set new_msg_head [split $msg_head \[ ]
    set time_stamp_field  "[lindex [lindex $new_msg_head 0] 0] [lindex [lindex $new_msg_head 0] 1] [lindex [lindex $new_msg_head 0] 2] [string range [lindex [lindex $new_msg_head 0] 3] 0 3]"
    LogMsg "TimeStamp field in SYSLOG: $time_stamp_field"
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Obtain SYSLOG Event Message" {
    set msg_event [GetValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT"]
    LogMsg "Event field in SYSLOG: $msg_event"
} {
    if {$msg_event != ""} {
        PASS_STEP
    } else {
        FAIL_STEP
    }
}

DoStep ${test_case}[incr step_num] "Obtain DHCP REQUEST OPTION43 SUBOPTION32" {
    set corr_id  [GetValue $msgID_MTA "INANY DHCP REQUEST OPTION43SUBOPTION32" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"]
    LogMsg "OPTION43SUB32 = $corr_id"
} {
    if {$corr_id != ""} {
        PASS_STEP
    } else {
        FAIL_STEP
    }
}

DoStep ${test_case}[incr step_num] "Verify Syslog Event Content" {
    LogMsg "Verify Syslog Event Content"
} {
    VerifyValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT" "IS" "<4000951500><${corr_id}>Provisioning Complete"
}

################################################################################
# DoStep ${test_case}[incr step_num] "Verify Syslog Event Content" {
# } {IsEqual $msg_event "<4000951500><${corr_id}>Provisioning Complete"}
################################################################################


DoStep ${test_case}[incr step_num] "Obtain value of pktcDevEvLogIndex" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {
        set search_index [lsearch $text_list $pctext]
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index]
    if {$index == ""} { set command FAIL_STEP }
} {eval $command}

DoStep ${test_case}[incr step_num] "Obtain and verify pktcDevEvLogTime compared to Syslog Time in UTC Format" {
    set command PASS_STEP
    set val1 [SNMP_GET ${oid_pktcDevEvLogTime}.$index $MTA_IP 20]
    # set val1 [SnmpDateTimeConverter $val1]
    LogMsg "Value for pktcDevEvLogTime.$index = $val1"
    if {[llength [split $val1 ,]] == 3} {
        if {![regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9][,]([+|-])([0-9]|10|11)[:]([1-5]?[0-9])} $val1]} {
            set command FAIL_STEP
        }
    } elseif {[llength [split $val1 ,]] == 2}  {
        if {![regexp {([1-6]?[0-9][0-9][0-9][0-9])[-]([0-9]|10|11|12)[-]([1-2]?[0-9]|30|31)[,]([1]?[0-9]|20|21|22|23)[:]([1-5]?[0-9])[:]([1-5]?[0-9]|60)[\.][0-9]} $val1]} {
            set command FAIL_STEP
        }
    } else  {
        set command FAIL_STEP
    }
    
    # Break down the pktcDevEvLogTime into individual parts so as to report if one fails
    set val_year [string range [lindex [lindex $new_msg_head 0] 3] 0 3]
    set val_mth  [lindex [lindex $new_msg_head 0] 0]
    set val_date [lindex [lindex $new_msg_head 0] 1]
    set val_hour [lindex [split [lindex [lindex $new_msg_head 0] 2] :] 0]
    set val_min [lindex [split [lindex [lindex $new_msg_head 0] 2] :] 1]
    set val_sec [lindex [split [lindex [lindex $new_msg_head 0] 2] :] 2]
    
    #Get local time, same time as Ethereal use
    set local_date [clock format [clock seconds] -format "%d" -gmt true]
    set local_mth1  [clock format [clock seconds] -format "%b" -gmt true]
    set local_mth2  [clock format [clock seconds] -format "%m" -gmt true]
    regsub 0 $local_mth2 "" local_mth2
    # For single digit day--MLF 10/9/07
    if {$local_date != 10} {
        regsub 0 $local_date "" local_date
    }
    set local_hr   [clock format [clock seconds] -format "%H" -gmt true]
    set local_year [clock format [clock seconds] -format "%Y"]
    
    # Break down the pktcDevEvLogTime into individual parts so as to report if one fails
    set val1_year [lindex [split [lindex [split $val1 ,] 0] -] 0]
    set val1_mth  [lindex [split [lindex [split $val1 ,] 0] -] 1]
    set val1_date [lindex [split [lindex [split $val1 ,] 0] -] 2]
    set val1_hour [lindex [split [lindex [split $val1 ,] 1] :] 0]
    set val1_min  [lindex [split [lindex [split $val1 ,] 1] :] 1]
    set val1_sec  [lindex [split [lindex [split $val1 ,] 1] :] 2]
    
    if {$val1_year != $local_year && $val1_year != $val_year} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime year; $val1_year, Syslog year; $val_year, year = $local_year"
    }
    if {$val1_mth != $local_mth2 && $val_mth != $local_mth1} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime month; $val1_mth, Syslog month; $val_mth, month = $local_mth1"
    }
    if {$val1_date != $local_date && $val1_date != $val_date} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime date; $val1_date, Syslog date; $val_date, date = $local_date"
    }
    if {$val1_hour != $local_hr && $val1_hour != $val_hour} {
        set command FAIL_STEP
        LogMsg "ERROR: pktcDevEvLogTime hour; $val1_hour, Syslog hour; $val_hour, hour = $local_hr"
    }
    ################################################################################
    #     if {$val1_min != $val_min} {
    #         set command FAIL_STEP
    #         LogMsg "ERROR: pktcDevEvLogTime min; $val1_min, Syslog min; $val_min"
    #     }
    #     if {$val1_sec != $val_sec} {
    #         set command FAIL_STEP
    #         LogMsg "ERROR: pktcDevEvLogTime sec; $val1_sec, Syslog sec; $val_sec"
    #     }
    ################################################################################
    
} {eval $command}

DoStep ${test_case}[incr step_num] "pktcDevEvLogEnterprise Content Verification" {
    set val1 [SNMP_GET ${oid_pktcDevEvLogEnterprise}.$index $MTA_IP 20]
} {IsEqual $val1 4491}

DoStep ${test_case}[incr step_num] "pktcDevEvLogId Content Verification" {
    set val1 [SNMP_GET ${oid_pktcDevEvLogId}.$index $MTA_IP 20]
} {IsEqual $val1 4000951500}

DoStep ${test_case}[incr step_num] "pktcDevEvLogText Content Verification" {
    set val1 [SNMP_GET ${oid_pktcDevEvLogText}.$index $MTA_IP 20]
} {IsEqual $val1 "Provisioning Complete"}

DoStep ${test_case}[incr step_num] "pktcDevEvLogEndPointName Content Verification" {
    set val1 [SNMP_GET ${oid_pktcDevEvLogEndpointName}.$index $MTA_IP 20]
    set val1 [string toupper $val1]
    # set temp_compare [string toupper "\<${MTA_NAME}\>\/\<${MTA_IP}\>"]
    set temp_compare [string toupper "${MTA_NAME}\/${MTA_IP}"]
} {IsEqual $val1 $temp_compare}

DoStep ${test_case}[incr step_num] "pktcDevEvLogType Content Verification" {
    set val1 [SNMP_GET ${oid_pktcDevEvLogType}.$index $MTA_IP 20]
} {IsEqual $val1 "C0 0 1"}


Cleanup
