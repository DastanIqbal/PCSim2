<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	2011-11-15	Seung Lee - final versionfor
	



-->
<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 1 $" 
	name="ESG 1.3.1.1" 
	descrip="DSCP Overrides" 
	number="ESG 1.3.1.1">

	<!-- Next we define the each of state mahcines -->
	<fsm name="DSCP">
		<models>
			<session/>
		</models>

		<!-- Next we define all of the network elements and extension 
     controls to be used in this test -->
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1 PCSCF1 3033920001 3034090001"/>

		<states initialstate="Register">
			<!-- REGISTER State -->
			<state ID="Register">
			<!-- Step 1 & 2 test case ESG 1.3.1.1 Start Capture and make call-->
			<prelude>
				<!--log promptUser="True" verify="True" step="1" requirements="REQ23843, REQ23844"
					 expr="Start capture for WAN (SP-SSE) and LAN (SIP-PBX) sides of ESG"/-->
				 
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">UE0.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">UE0.IP2</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">PCSCF1.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
			</prelude>		
				<transition to="OffHook" event="Registered"/>
				<!-- Step 3 test case ESG 1.3.1.1 End call-->
			</state>
			<!-- OFFHOOK State -->
			<state ID="OffHook">
				<prelude>
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<transition to="Setup" event="OffHookComplete"/>
			</state>
			
			<!-- SETUP State -->
			<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
			<state ID="Setup">
				<prelude once="true">
					<send protocol="utility" msgtype="DialDigits">
						<mod modtype="add" hdr="number">
							<msg_ref type="platform">UE1.phone number 1</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>INVITE</expr>
					</eq>
					<then>
						<proxy target="UE1">
							<!--mod modtype="replace" hdr="o" param="address">
								<msg_ref type="platform">UE0.IP</msg_ref>
							</mod>
							<mod modtype="replace" hdr="c" param="address">
								<msg_ref type="platform">UE0.IP</msg_ref>
							</mod-->
						</proxy>
					</then>

					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE0"/>
						</then>
					</elseif>
						<elseif>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
							</or>
							<then>
								<proxy target="UE1"/>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="Setup" event="DialDigitsComplete"/>
				<transition to="Setup" event="INVITE"/>
				<transition to="Alerting" event="CANCEL"/>
				<transition to="Alerting" event="xxx-INVITE"/>
				<transition to="Setup" event="OffHookComplete"/>
			</state>
			<!-- Alerting State -->
			<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
			<state ID="Alerting" timer="6000">
				<response>
					<if>
						<and>
							<null>
								<msg_ref type="sip">200-INVITE.SDP</msg_ref>
							</null>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE1.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE1.IP</msg_ref>
								</eq>
							</or>
						</and>
						<then>
							<proxy target="UE0"/>
				
		</then>

						<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<notnull>
								<msg_ref type="sip">200-INVITE.SDP</msg_ref>
							</notnull>
						</and>
						<then>
                            <proxy target="UE0"/>
						</then>	
						</elseif>
						<elseif>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
							</or>
							<then>
								<proxy target="UE1"/>
							</then>
						</elseif>
					</if>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<send protocol="utility" msgtype="OffHook">
								<mod modtype="replace" hdr="voiceport">
									<msg_ref type="platform">Platform.voiceport1</msg_ref>
								</mod>
							</send>
						</then>
					</if>
				</response>
				<transition to="Alerting" event="INVITE"/>
				<transition to="Alerting" event="OPTIONS"/>
				<transition to="Alerting" event="200-OPTIONS"/>
				<transition to="Alerting" event="PRACK"/>
				<transition to="Alerting" event="200-PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Alerting" event="200-UPDATE"/>
				<transition to="Alerting" event="xxx-INVITE"/>
				<transition to="Alerting" event="OffHookComplete"/>
				<transition to="Connected" event="ACK"/>
			</state>
			<!-- CONNECTED State -->
			<state ID="Connected" timer="10000">
				<transition to="OnHook" event="TimerExpired"/>
			</state>
			<!-- OnHook State -->
			<state ID="OnHook">
				<prelude once="true">
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE0"/>
						</then>
						<elseif>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
							</or>
							<then>
								<proxy target="UE1"/>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="OnHook" event="OnHookComplete"/>
				<transition to="OnHook" event="Bye"/>
				<transition to="OnHookUE1" event="200-Bye"/>
			</state>
			<!-- OnHook State -->
			<state ID="OnHookUE1">
				<prelude>
					<send protocol="utility" msgtype="OnHook">
						<mod modtype="replace" hdr="voiceport">
							<msg_ref type="platform">Platform.voiceport1</msg_ref>
						</mod>
					</send>
					<log promptUser="True" expr="Wait for the next prompt to make DID call."/>
				</prelude>
				
				<postlude>
					<stop_capture/>	
				</postlude>
				<!--transition to="Done" event="OnHookComplete"/-->
				<transition to="Setup1" event="OnHookComplete"/>
			</state>
				
			<!--state ID="Done" ES="true" offHookOK="true"/-->
			
			<state ID="Setup1">
				<prelude once="true">
					<start_capture>
						<filter>
							<var_expr>
								<expr>host </expr>
								<msg_ref type="platform">UE0.IP</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">UE0.IP2</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">PCSCF1.IP</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</var_expr>
						</filter>
					</start_capture>
					<send protocol="utility" msgtype="DialDigits">
						<mod modtype="add" hdr="number">
							<msg_ref type="platform">UE0.phone number 1</msg_ref>
						</mod>
						<mod modtype="replace" hdr="voiceport">
						   <msg_ref type="platform">Platform.voiceport1</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE0">
								<mod modtype="replace" hdr="Request-Line" param="domain">
									<msg_ref type="platform">UE0.IP</msg_ref>
								</mod>
							</proxy>
						</then>
						<elseif>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
							</or>
							<then>
								<proxy target="UE1"/>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="Setup1" event="DialDigitsComplete"/>
				<transition to="Setup1" event="INVITE"/>
				<transition to="Alerting1" event="CANCEL"/>
				<transition to="Alerting1" event="xxx-INVITE"/>
				<transition to="Setup1" event="OffHookComplete"/>
			</state>
			<!-- Alerting State -->
			<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
			<state ID="Alerting1" timer="6000">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE0"/>
						</then>
						<elseif>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
							</or>
							<then>
								<proxy target="UE1"/>
							</then>
						</elseif>
					</if>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<send protocol="utility" msgtype="OffHook">
								<mod modtype="replace" hdr="voiceport">
									<msg_ref type="platform">Platform.voiceport0</msg_ref>
								</mod>
							</send>
						</then>
					</if>
				</response>
				<transition to="Alerting1" event="INVITE"/>
				<transition to="Alerting1" event="OPTIONS"/>
				<transition to="Alerting1" event="200-OPTIONS"/>
				<transition to="Alerting1" event="PRACK"/>
				<transition to="Alerting1" event="200-PRACK"/>
				<transition to="Alerting1" event="UPDATE"/>
				<transition to="Alerting1" event="200-UPDATE"/>
				<transition to="Alerting1" event="xxx-INVITE"/>
				<transition to="Alerting1" event="OffHookComplete"/>
				<transition to="Connected1" event="ACK"/>
			</state>
			<!-- CONNECTED State -->
			<state ID="Connected1" timer="10000">
				<transition to="OnHook1" event="TimerExpired"/>
			</state>
			<!-- OnHook State -->
			<state ID="OnHook1">
				<prelude once="true">
					<send protocol="utility" msgtype="OnHook">
						<mod modtype="replace" hdr="voiceport">
						   <msg_ref type="platform">Platform.voiceport1</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE0"/>
						</then>
						<elseif>
							<or>
								<eq>
									<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
								<eq>
									<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE0.IP</msg_ref>
								</eq>
							</or>
							<then>
								<proxy target="UE1"/>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="OnHook1" event="OnHookComplete"/>
				<transition to="OnHook1" event="Bye"/>
				<transition to="OnHookUE1-1" event="200-Bye"/>
			</state>
			<!-- OnHook State -->
			<state ID="OnHookUE1-1">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>						
					<!-- Step 5 & 6 test case ESG 1.3.1.1 End the call and Stop Capture-->
					<!-- log promptUser="True" verify="True" step="1" requirements="REQ, REQ"
					 expr="Stop capture for WAN (SP-SSE) and LAN (SIP-PBX) sides of ESG"/-->
				</prelude>
					
				<postlude>

				<stop_capture/>	 
				
				<!-- Step 9 test case ESG 1.3.1.1 Open the Capture and verify packets-->

				<log promptUser="True" verify="True" step="9" requirements="REQ23842"
					 expr="Open the captures for WAN (SP-SSE) and LAN (SIP-PBX) sides and find RTP packets for outbound call"/>
				<log promptUser="True" verify="True" step="9" yesExpected="true" requirements="REQ23842"
					 expr="Verify WAN side upstream SIP packets have DSCP value of 3 as configured"/>
		
				<!-- Step 10 test case ESG 1.3.1.1 Verify packets-->

				<log promptUser="True" verify="True" step="10" requirements="REQ23840"
					 expr="Find the WAN side upstream packets"/>
				<log promptUser="True" verify="True" step="10" yesExpected="true" requirements="REQ23840"
					 expr="Verify WAN side upstream RTP packets have DSCP value of 6 as configured (Also note the DSCP value for the corresponding RTP packets on the LAN side)"/>
		
				<!-- Step 11 test case ESG 1.3.1.1 Verify packets-->
		
				<log promptUser="True" verify="True" step="1" requirements="REQ23847"
					 expr="Note the media type and format of the SDP inside the 200 OK SIP message during
					 the outbound call establishment"/>
				<log promptUser="True" verify="True" step="1" yesExpected="true" requirements="REQ23847"
					 expr="Verify the media description included in the SDP matches the payload type found in the RTP packets"/>	 	 
			
				<!-- Step 12 test case ESG 1.3.1.1 Verify packets-->

				<log promptUser="True" verify="True" step="12" requirements="REQ23840"
					 expr="In the same captures for WAN (SP-SSE) and LAN (SIP-PBX) sides and find upstream RTP
					 packets for inbound call"/>
				<log promptUser="True" verify="True" step="12" yesExpected="true" requirements="REQ23840"
					 expr="Verify WAN side upstream RTP packets have DSCP value of 6 as configured (Also note the DSCP value for the corresponding RTP packets on the LAN side)"/>
			
				<!-- Step 13 test case ESG 1.3.1.1 Verify packets-->

				<log promptUser="True" verify="True" step="13" requirements="REQ23847"
					 expr="Note the media type and format of the SDP inside the 200 OK SIP message during the inbound call establishment"/>
				<log promptUser="True" verify="True" step="13" yesExpected="true" requirements="REQ23847"
					  expr="Verify the media description included in the SDP matches the payload type found in the RTP packets"/>
					</postlude>
				<transition to="END" event="OnHookComplete"/>	 
			</state>
		</states>
	</fsm>
</pc2xml>
