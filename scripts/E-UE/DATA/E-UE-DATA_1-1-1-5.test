#//****************************************************************************
#// Filename: E-UE-DATA_1-1-1-5.test
#// Author:   Matthew Forbes
#// Creation Date: 11/06/2008
#// Modified by: Matthew Forbes 2/8/10 - change steps 2,3,& 5 from 60 to 120 seconds
#//
#//
#//
#//****************************************************************************
#// Description:
#//     TC2737 TEST CASE E-UE-DATA 1.1.1.5 Ability of eUE to Support Battery Backup MIBs
#//        (Scenario 4)
#//
#// Objective:
#//     If the eUE supports battery backup, this test verifies the read-only and read-write functionality
#//     for a subset of battery backup MIB objects. Additionally, this test checks functionality for specific
#//     battery usage.
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset EDVA
#//     - Check Provisioning state
#//     - Check values MIB values
#//     - Check read-write capablities
#//     - Stop Sniffer
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//****************************************************************************

set SCRIPT_VERSION { # $Id: E-UE-DATA_1-1-1-5.test 7406 2010-07-20 17:17:37Z dthakore $ }
global SCRIPT_VERSION

#
# Verify SNMPv3 API is loaded
#
if {!$SNMP_V3_API} {
    DoStep "verify snmp" "verify snmp" {
    } {
        verify_signal "It seems as though you do not have a Provisioning server API application.\nThis test can not be executed without a API or sort of SNMPv3 Utility.\
                to integrate your own SNMPv3 Utility, you must write your own code to inteface with that utility."
    }
}


DoStep "E-UE-DATA_1-1-1-5_1-1" "Configure DUT" {
    LogMsg "--- Configure DUT ---"
    Init_PROV
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep "E-UE-DATA_1-1-1-5_1-2" "Verify Battery" {
    tk_messageBox -message "Please ensure a battery is installed in the EDVA and AC power is connected, then press OK"
} {
    PASS_STEP
}

################################# START SNIFFER ###############################

DoStep "E-UE-DATA_1-1-1-5_1-3" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

################ RESET CM and MTA and VERIFY PROVISIONING STATE ################

DoStep "E-UE-DATA_1-1-1-5_1-4" "Reset EDVA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Reset of CM and DVA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-1-1-5_1-5" "pktcMtaDevProvisioningState Content Verification" {
    actionWait "Wait for MTA to reboot" 65
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of EDVA Provisioning State is: $val"
} {
    IsEqual $val 1
}

#
# Set upsShutdownAfterDelay to 60
#
DoStep "E-UE-DATA_1-1-1-5_2" "Set upsShutDownAfterDelay to 60" {
    set result [SNMPvN_SET .1.3.6.1.2.1.33.1.8.2.0  INTEGER 120 $CM_IP]
} {
    compare_value $result 0 ;# Verify set was successful
}

#
# Retrieve value from previous step
#
DoStep "E-UE-DATA_1-1-1-5_3" "get upsShutDownAfterDelay" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.8.2.0  $CM_IP]
} {
    set fail_val 0
    if {$result > 120} {
        set fail_val 1
        LogMsg "!! The MTA returned a value that is greater than the value set in the previous step (60). Actual value was ($result)"
    }
    FAIL_PASS_STEP $fail_val
}

#
# Disconnect AC Power
#
DoStep "E-UE-DATA_1-1-1-5_4" "Disconnect AC Power" {
    tk_messageBox -message "Please disconnect the AC Power, and press OK simultaneously"
} {
    PASS_STEP
}

#
# DoStep Wait for 2 minutes, verify MTA has shut down
#
DoStep "E-UE-DATA_1-1-1-5_5" "Wait for 2 minutes, verify MTA has shut down" {
    LogMsg "--- Waiting 2.5 Minutes for device to shutdown (it should shut down after 2 minutes)"
    set cont 0
    after 150000 {set cont 1}
    # after 5000 {set cont 1}
    vwait cont
    # tk_messageBox -message "Has device shutdown? This should happen after about a minute. Hit OK when it does."
    set result [SNMPvN_PING $CM_IP]
    set result 0
    if {$result == 1} {
        LogMsg "!! The MTA did not shut down"
    }
} {
    compare_value $result "0";# Verify MTA is not alive
}


#
# Reset MTA
#
DoStep "E-UE-DATA_1-1-1-5_7-1" "Reset MTA" {
    tk_messageBox -message "Please Reconnect the AC Power, then press OK"
    LogMsg "--- The MTA is offline, so the SNMP_SET (pktcDevResetNow) will fail, but the API will tell us when the device is back online"
    set val [SNMPvN_RESET $CM_IP]
} {IsEqual $val 0 }

DoStep "E-UE-DATA_1-1-1-5_7-2" "pktcMtaDevProvisioningState Content Verification" {
    actionWait "Wait for MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of EDVA Provisioning State is: $val"
} {
    IsEqual $val 1
}

#
#
# set upsShutdownAfterDelay to -1
#
DoStep "E-UE-DATA_1-1-1-5_8" "Set upsShutDownAfterDelay to -1" {
    set cont 0
    LogMsg "--- Setting upsShutDownAfterDelay to -1"
    set cont 1
    # vwait cont
    set result [SNMPvN_SET .1.3.6.1.2.1.33.1.8.2.0 INTEGER -1 $CM_IP]
} {
    compare_value $result 0 ;# Verify set was successful
}

#
#  verify MTA has not shut down
#
DoStep "E-UE-DATA_1-1-1-5_9" "SNMP PING, verify EDVA has not shut down" {
    LogMsg "--- SNMP PING, verify EDVA has not shut down"
    set result [SNMPvN_PING  $CM_IP]
    if {$result == 0} {
        LogMsg "!! The device shut down "
    }
} {
    compare_value $result 1
}


#
# Disconnect power & wait for 2 minutes, verify MTA has not shut down
#
DoStep "E-UE-DATA_1-1-1-5_10" "Wait for 2 minutes, verify MTA has not shut down" {
    LogMsg "--- Waiting 2 minutes after power disconnect"
    set cont 0
    tk_messageBox -message "Please Disconnect AC Power, then press OK"
    after 120000 {set cont 1}
    vwait cont
    set result [SNMPvN_PING  $CM_IP]
    if {$result == 0} {
        LogMsg "!! The device shut down after power was removed"
    }
} {
    compare_value $result 1
}

#
# Reconnect Power
#
DoStep "E-UE-DATA_1-1-1-5_12" "Reconnect AC Power" {
    tk_messageBox -message "Please reconnect the AC Power, then press OK"
    SNMPvN_RESET $CM_IP
} {
    actionWait "Wait for MTA to reboot" 60
}


##################### STOP SNIFFER AND SAVE CAPTURE FILES #####################

DoStep "E-UE-DATA_1-1-1-5_14-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }


Cleanup