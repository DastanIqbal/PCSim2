<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-124 : Add the escape attribute when comparing the Replaces parameter in the Refer-To
		header. This will make sure any ampersand or other special characters have been properly
		converted to their hex representation prior to performing the comparison. (ghassler 3/30/2009)




-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.5.4.2" 
	descrip="Basic Blind Call Transfer - Transferor" 
	number="RST-UE 1.5.4.2" inspector="disable">
	
	<template file="./templates/Call_Transfer_Transferor.xml"/>
	
	<remove_from fsm="UE1 Calls DUT">
		<state ID="UE1Setup"/>
		<state ID="UE1GoOnHold"/>
		<state ID="UE1Wait"/>
		<state ID="UE1SendNotify"/>
		<state ID="UE1WaitForByeOrSucceed"/>
		<state ID="UE1WaitBYE"/>
	</remove_from>
	
	<remove_from fsm="UE2 Calls DUT">
		<state ID="UE2Setup"/>
		<state ID="UE2Alerting"/>
		<state ID="UE2Answer"/>
		<state ID="UE2Connected"/>
	</remove_from>
	
	<add_to fsm="UE1 Calls DUT">
		<state ID="UE1Setup">
			<prelude once="true">
				<!-- Step 1 test case SIP xxxx-->
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<!-- If the current message that we received is an Invite, answer with
	               a 100-trying -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<verify step="1" requirements="REQ13826">
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Allow</msg_ref>
								<expr>REFER</expr>
							</contains>
						</verify>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
							 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="UE1Setup" event="DialDigitsComplete"/>
			<transition to="UE1Alerting" event="INVITE"/>
		</state>
		
		<state ID="UE1GoOnHold">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>REINVITE</expr>
					</eq>
					<then>
						<verify step="2" requirements="REQ13838, REQ13839">
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>REINVITE</expr>
							</eq>
						</verify>
						<!-- HookFlash Step 2 and 3 -Sending 100-Invite and 200-Invite to Invite -->
						<send protocol="sip" msgtype="100-INVITE"/>
						<sleep time="200"/>
						<send protocol="sip" msgtype="200-INVITE"/>
					</then>
				</if>
			</response>
			<transition to="TestDialTone" event="ACK"/>
			<transition to="UE1GoOnHold" event="ReInvite"/>
			<transition to="UE1GoOnHold" event="HookFlashComplete"/>
		</state>
		
		<state ID="TestDialTone">
			<prelude>
				<send protocol="utility" msgtype="VerifyDialTone"/>
			</prelude>
			<response>
				<verify step="2" requirements="REQ13838, REQ13839">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyDialToneComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="UE1Wait" event="VerifyDialToneComplete"/>
		</state>
		
		<state ID="UE1Wait" timer="120000">
			<prelude once="true">
				<!-- Step 3 test case SIP xxx -->
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE2.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>REFER</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="202-REFER"/>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<contains>
								<msg_ref type="sip">REFER</msg_ref>
								<expr>Refer-To: </expr>
							</contains>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<contains>
								<msg_ref type="sip">REFER.Refer-To.name-addr</msg_ref>
								<msg_ref type="sip" msg_instance="last" fsm="UE2 Calls DUT">18x-Invite.Contact.addr-spec</msg_ref>
							</contains>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<eq>
								<msg_ref type="sip">REFER.Refer-To.Replaces</msg_ref>
								<!-- PCPCII-124 Add the escape attribute to convert any special characters to hex -->
								<msg_ref type="sip" msg_instance="last" fsm="UE2 Calls DUT" escape="true">Invite.Call-ID.value</msg_ref>
							</eq>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<eq>
								<msg_ref type="sip">REFER.Refer-To.to-tag</msg_ref>
								<msg_ref type="sip" msg_instance="last" fsm="UE2 Calls DUT">18x-Invite.To.tag</msg_ref>
							</eq>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<eq>
								<msg_ref type="sip">REFER.Refer-To.from-tag</msg_ref>
								<msg_ref type="sip" msg_instance="last" fsm="UE2 Calls DUT">18x-Invite.From.tag</msg_ref>
							</eq>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<dnc>
								<msg_ref type="sip">REFER.To</msg_ref>
								<expr>tag=</expr>
							</dnc>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<contains>
								<msg_ref type="sip">REFER</msg_ref>
								<expr>Target-Dialog: </expr>
							</contains>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<eq>
								<msg_ref type="sip">REFER.Target-Dialog.Call-ID</msg_ref>
								<msg_ref type="sip" msg_instance="last">Invite.Call-ID.value</msg_ref>
							</eq>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<eq>
								<msg_ref type="sip">REFER.Target-Dialog.remote-tag</msg_ref>
								<msg_ref type="sip" msg_instance="last">Invite.From.tag</msg_ref>
							</eq>
						</verify>
						<verify step="4" requirements="REQ13828, REQ13829, REQ13830, REQ13831, REQ13844, REQ24094">
							<eq>
								<msg_ref type="sip">REFER.Target-Dialog.local-tag</msg_ref>
								<msg_ref type="sip" msg_instance="last">18x-Invite.To.tag</msg_ref>
							</eq>
						</verify>
						
						<send protocol="sip" msgtype="NOTIFY"/>
					</then>
				</if>
			</response>
			<transition to="UE1Wait" event="REFER"/>
			<transition to="UE1Wait" event="DialDigitsComplete"/>
			<transition to="UE1SendRingNotify" event="200-NOTIFY"/>
		</state>
		
		<!-- UE1SendNotify State -->
		<state ID="UE1SendNotify">
			<prelude once="true">
				<send protocol="sip" msgtype="NOTIFY"/>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>BYE</expr>
					</eq>
					<then>
						<verify step="8" requirements="REQ13845, REQ14499" group="bye">
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>BYE</expr>
							</eq>
							<then>
								<send protocol="sip" msgtype="200-BYE"/>
							</then>
						</verify>
						<send protocol="sip" msgtype="200-BYE"/>
					</then>
				</if>
			</response>
			<!-- Transitions for UE1SendNotify state -->
			<transition to="UE1WaitFor200NotifyOrSucceed" event="BYE"/>
			<!--  Allow a subscribe for refer to come in, but don't answer it -->
			<transition to="UE1SendNotify" event="SUBSCRIBE"/>
			<transition to="UE1WaitForByeOrSucceed" event="200-NOTIFY"/>
		</state>
		
		<state ID="UE1WaitForByeOrSucceed">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>BYE</expr>
					</eq>
					<then>
						<verify step="8" requirements="REQ13845, REQ14499" group="bye">
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>BYE</expr>
							</eq>
							<then>
								<send protocol="sip" msgtype="200-BYE"/>
							</then>
						</verify>
						<send protocol="sip" msgtype="200-BYE"/>
					</then>
				</if>
			</response>
			<transition to="UE1WaitBYE" event="SucceedEvent"/>
			<transition to="UE1WaitSucceed" event="BYE"/>
		</state>
		
		<state ID="UE1WaitBYE" timer="30000">
			<response>
				<verify step="8" requirements="REQ13845, REQ14499" group="bye">
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>BYE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-BYE"/>
					</then>
				</verify>
			</response>
			<transition to="END" event="BYE"/>
		</state>
	</add_to>
	
	<add_to fsm="UE2 Calls DUT">
		<NE targets="UE2"/>
		<state ID="UE2Setup">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>INVITE</expr>
							</eq>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<eq>
									<msg_ref type="sip" msg_instance="1" fsm="UE1 Calls DUT">Invite.Allow</msg_ref>
									<msg_ref type="sip">Invite.Allow</msg_ref>
								</eq>
								<and>
									<dnc>
										<msg_ref type="sip" msg_instance="first" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Allow: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Allow: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<eq>
									<msg_ref type="sip" msg_instance="1" fsm="UE1 Calls DUT">Invite.Accept</msg_ref>
									<msg_ref type="sip">Invite.Accept</msg_ref>
								</eq>
								<and>
									<dnc>
										<msg_ref type="sip" msg_instance="first" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Accept: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Accept: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<eq>
									<msg_ref type="sip" msg_instance="1" fsm="UE1 Calls DUT">Invite.Require</msg_ref>
									<msg_ref type="sip">Invite.Require</msg_ref>
								</eq>
								<and>
									<dnc>
										<msg_ref type="sip" msg_instance="first" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Require: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Require: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<eq>
									<msg_ref type="sip" msg_instance="1" fsm="UE1 Calls DUT">Invite.Supported</msg_ref>
									<msg_ref type="sip">Invite.Supported</msg_ref>
								</eq>
								<and>
									<dnc>
										<msg_ref type="sip" msg_instance="first" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Supported: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Supported: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<!-- Step 3 Verify that the headers present (not necessarily the values)
						 in the INVITE are same as headers in the INVITE in Step 1.  -->
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Via: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Via: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Via: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Via: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Route: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Route: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Route: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Route: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>From: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>From: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>From: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>From: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>To: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>To: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>To: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>To: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Contact: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Contact: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Contact: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Contact: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Supported: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Supported: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Supported: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Supported: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>CSeq: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>CSeq: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>CSeq: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>CSeq: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Require: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Require: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Require: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Require: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Call-ID: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Call-ID: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Call-ID: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Call-ID: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Max-Forwards: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Max-Forwards: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Max-Forwards: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Max-Forwards: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Content-Length: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Content-Length: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Content-Length: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Content-Length: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>P-Access-Network-Info: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>P-Access-Network-Info: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>P-Access-Network-Info: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>P-Access-Network-Info: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Content-Type: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Content-Type: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Content-Type: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>Content-Type: </expr>
									</dnc>
								</and>
							</or>
						</verify>
						<verify step="3" requirements="REQ13841, REQ13842, REQ13851">
							<or>
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>P-Preferred-Identity: </expr>
									</contains>
									<contains>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>P-Preferred-Identity: </expr>
									</contains>
								</and>
								<and>
									<dnc>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>P-Preferred-Identity: </expr>
									</dnc>
									<dnc>
										<msg_ref type="sip" fsm="UE1 Calls DUT">Invite</msg_ref>
										<expr>P-Preferred-Identity: </expr>
									</dnc>
								</and>
							</or>
						</verify>
					</then>
				</if>
				<!-- If the current message that we received is an Invite, answer with
	               a 100-trying -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
							 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="UE2Alerting" event="INVITE"/>
		</state>
		
		<state ID="UE2Alerting">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliability required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite"/>
					</then>
				</if>
			</response>
			<transition to="UE2Alerting" event="PRACK"/>
			<transition to="UE2Alerting" event="UPDATE"/>
			<transition to="UE2OnHook" event="ALERTING_UAS"/>
		</state>
		
		<state ID="UE2OnHook">
			<prelude>
				<!-- Hang up on DUT..-->
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="WaitCancel" event="OnHookComplete"/>
		</state>
		
		<state ID="WaitCancel">
			<response>
				<verify step="9" requirements="REQ13845, REQ14499">
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>CANCEL</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-CANCEL"/>
					</then>
				</verify>
			</response>
			<postlude>
				<generate event="SucceedEvent" fsm="UE1 Calls DUT"/>
			</postlude>
			<transition to="UE2EndDialog" event="CANCEL"/>
		</state>
	</add_to>
</pc2xml>
