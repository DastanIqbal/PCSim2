<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : Update the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)
	PCPCII-498 : The test used to start the verification is wrong. Change the test to INVITE not ALERTING_UAS (ghasler 7/6/2010)



-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.9.4.3" 
	descrip="Emergency call INVITE request requirements " 
	number="RST-UE 1.9.4.3">
	
	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- Power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<transition to="Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Registered">
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<or>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>dialog</expr>
									</contains>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>message-summary</expr>
									</contains>
								</or>
							</or>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="Registered" event="REGISTER"/>
				<transition to="Notification" event="SUBSCRIBE"/>
			</state>
			
			<state ID="Notification">
				<postlude>
					<generate event="SucceedEvent" fsm="RST 1.9.4.3 Orig call"/>
				</postlude>
				<transition to="NotificationComplete" event="200-NOTIFY"/>
			</state>
			<state ID="NotificationComplete" ES="true"/>
		</states>
	</fsm>
	
	<fsm name="RST 1.9.4.3 Orig call">
		<models>
			<session/>
		</models>
		
		<NE sim_type="term" elements="UE1  PCSCF2 SCSCF1 PCSCF1" targets="UE1 service:sos"/>
		
		<states initialstate="WaitSucceedEvent">
			<state ID="WaitSucceedEvent">
				<transition to="OffHook" event="SucceedEvent"/>
			</state>
			
			<state ID="OffHook">
				<prelude>
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<transition to="Setup" event="offhookcomplete"/>
			</state>
			
			<state ID="Setup">
				<prelude once="true">
					<!-- Step 1 of test case 1.9.4.3 - -->
					<send protocol="utility" msgtype="DialDigits">
						<mod modtype="add" hdr="number">
							<expr>911</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>INVITE</expr>
						</eq>
						<then>
							<verify step="2" requirements="REQ14066, REQ14535">
								<dnc>
									<msg_ref type="sip" hdr_instance="any">Invite.Route.name-addr</msg_ref>
									<msg_ref type="sip" msg_instance="last" fsm="Registrar">200-REGISTER.Service-Route.name-addr</msg_ref>
								</dnc>
							</verify>
							<verify step="2" requirements="REQ14066, REQ14535">
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Via: </expr>
									</contains>
									<neq>
										<msg_ref type="sip">Invite.Via.sent-protocol</msg_ref>
										<expr/>
									</neq>
								</and>
							</verify>
							
							<verify step="2" requirements="REQ14066, REQ14535">
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Contact: </expr>
									</contains>
									<neq>
										<msg_ref type="sip">Invite.Contact.name-addr</msg_ref>
										<expr/>
									</neq>
								</and>
							</verify>
							<verify step="2" requirements="REQ14066, REQ14535">
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>CSeq: </expr>
									</contains>
									<and>
										<neq>
											<msg_ref type="sip">Invite.CSeq.value</msg_ref>
											<expr/>
										</neq>
										<neq>
											<msg_ref type="sip">Invite.Contact.method</msg_ref>
											<expr/>
										</neq>
									</and>
								</and>
							</verify>
							<verify step="2" requirements="REQ14066, REQ14535">
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Call-ID: </expr>
									</contains>
									<neq>
										<msg_ref type="sip">Invite.Call-ID.value</msg_ref>
										<expr/>
									</neq>
								</and>
							</verify>
							<verify step="2" requirements="REQ14066, REQ14535">
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Content-Length: </expr>
									</contains>
									<neq>
										<msg_ref type="sip">Invite.Content-Length.value</msg_ref>
										<expr/>
									</neq>
								</and>
							</verify>
							<verify step="2" requirements="REQ14066, REQ14535">
								<and>
									<contains>
										<msg_ref type="sip">Invite</msg_ref>
										<expr>Content-Type: </expr>
									</contains>
									<neq>
										<msg_ref type="sip">Invite.Content-Type.value</msg_ref>
										<expr/>
									</neq>
								</and>
							</verify>
							<verify step="3" requirements="REQ14066, REQ14536, REQ14130">
								<contains>
									<msg_ref type="sip">Invite.Priority</msg_ref>
									<expr>emergency</expr>
								</contains>
							</verify>
							<verify step="4" requirements="REQ14066, REQ14532, REQ14060">
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Content-Type</msg_ref>
									<expr>multipart/mixed</expr>
								</contains>
							</verify>
							<verify step="4" requirements="REQ14066, REQ14532, REQ14060">
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Content-Type</msg_ref>
									<expr>boundary=</expr>
								</contains>
							</verify>
							<verify step="5" requirements="REQ14066, REQ14534">
								<contains>
									<msg_ref type="sip">Invite.SDP</msg_ref>
									<expr>Content-Type: application/sdp</expr>
								</contains>
							</verify>
							<verify step="6" requirements="REQ14066, REQ14068, REQ14069">
								<or>
									<eq>
										<msg_ref type="sdp">Invite.audio.payload-type</msg_ref>
										<expr>0</expr>
									</eq>
									<or>
										<contains>
											<msg_ref type="sdp">Invite.audio.payload-type</msg_ref>
											<expr> 0</expr>
										</contains>
										<contains>
											<msg_ref type="sdp">Invite.audio.payload-type</msg_ref>
											<expr>0 </expr>
										</contains>
									</or>
								</or>
							</verify>
						</then>
					</if>
				</response>
				<transition to="Setup" event="dialdigitscomplete"/>
				<transition to="END" event="INVITE"/>
			</state>
		</states>
	</fsm>
</pc2xml>
