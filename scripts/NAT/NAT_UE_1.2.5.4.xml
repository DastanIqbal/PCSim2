<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="NAT_UE_1.2.5.4" 
	descrip="- Call from full ICE UE to a Lite-ICE UE (DUT) - user name verification in connectivity check " 
	number="NAT_UE_1.2.5.4">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup"/>
		<state ID="Answer"/>
		<state ID="Alerting"/>
		<state ID="Proceeding"/>
		<state ID="Connected"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<NE targets="RTP"/>
		
		<state ID="Setup" timer="12000">
			<prelude once="true">
				<var name="answer">
					<expr>false</expr>
				</var>
				<send protocol="sip" msgtype="Invite">
					<mod modtype="replace" hdr="c" param="address">
						<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
					</mod>
					<mod modtype="replace" hdr="audio" param="port">
						<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
					</mod>
					<mod modtype="add" hdr="SDP">
						<var_expr>
							<expr>a=ice-pwd:</expr>
							<msg_ref type="platform">UE1.STUN Password Credential</msg_ref>
							<expr>\r\na=ice-ufrag:</expr>
							<msg_ref type="platform">UE1.STUN Username Credential</msg_ref>
							<expr>\r\na=candidate:1 1 UDP </expr>
							<msg_ref type="platform">UE1.STUN Priority</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">UE1.IP</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
							<expr> typ host\r\n</expr>
							<expr>a=candidate:2 1 UDP </expr>
							<msg_ref type="platform">Platform.STUN Server Priority</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">Platform.STUN IP Address</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">Platform.STUN UDP Port</msg_ref>
							<expr> typ srflx raddr </expr>
							<msg_ref type="platform">UE1.IP</msg_ref>
							<expr> rport </expr>
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
							<expr>\r\n</expr>
							<expr>a=candidate:3 1 UDP </expr>
							<msg_ref type="platform">Platform.TURN Server Priority</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
							<expr> typ relay raddr </expr>
							<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
							<expr> rport </expr>
							<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<!-- Expected responses are 100, 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
				<if>
					<and>
						<eq>
							<var_ref name="answer"/>
							<expr>false</expr>
						</eq>
						<contains>
							<msg_ref type="sip">Response.SDP</msg_ref>
							<expr>rtpmap</expr>
						</contains>
					</and>
					<then>
						<assign name="answer">
							<expr>true</expr>
						</assign>
							<var name="sdp">
							<msg_ref type="sip">Response.SDP</msg_ref>
						</var>
						<var name="ip"> 
							<msg_ref type="sdp">Response.c.address</msg_ref>
						</var>
						<var name="port"> 
							<msg_ref type="sdp">Response.audio.port</msg_ref>
						</var>
						<generate event="Branch1Event" fsm="STUN1"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<if>
					<gte>
						<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
						<expr>200</expr>
					</gte>
					<then>
						<send protocol="sip" msgtype="ACK"/>
					</then>
				</if>
			</response>
			<transition to="Setup" event="1xx-INVITE"/>
			<transition to="Setup" event="2xx-INVITE"/>
			<transition to="Setup" event="PRACK"/>
			<transition to="Setup" event="200-UPDATE"/>
			<transition to="Setup" event="RTP"/>
			<transition to="Setup" event="Branch1Event"/>
			<transition to="Setup" event="TimerExpired"/>
			<transition to="END" event="SucceedEvent"/>
		</state>
	</add_to>

	<fsm name="STUN1">
		<models>
			<stun/>
		</models>
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
	
		<states initialstate="WaitBranch1Event">
			<state ID="WaitBranch1Event">
				<response>
					<!-- While we are waiting for the Branch1Event, we need to respond to any
						BindingRequest messages that the DUT may send. -->
					<if>
						<eq>
							<msg_ref type="stun">BindingRequest.DestinationAddress.Port</msg_ref>
							<msg_ref type="platform">Platform.SIP Stack 1 UDP Port</msg_ref>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to="WaitBranch1Event" event="BindingRequest"/>
				<transition to="SendBindingRequest" event="Branch1Event"/>
	`		</state>
		
			<state ID="SendBindingRequest" timer="5000">
				<prelude once="true">
					<send protocol="stun" msgtype="BindingRequest" originator="UE1" ice="true">
						<mod modtype="replace" hdr="Username">
							<msg_ref type="platform">UE1.username</msg_ref>
						</mod>
						<to>
							<ip>
								<var_ref name="ip"/>
							</ip>
							<port>
								<var_ref name="port"/>
							</port>
						</to>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="stun">BindingRequest.DestinationAddress.Port</msg_ref>
							<msg_ref type="platform">Platform.SIP Stack 1 UDP Port</msg_ref>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
						<else>
							<verify step="3" requirements="RFC4410">
								<and>
									<neq>
										<msg_ref type="stun">Response</msg_ref>
										<expr>BindingResponse</expr>
									</neq>
									<eq>
										<msg_ref type="event"/>
										<expr>TimerExpired</expr>
									</eq>
								</and>
							</verify>
						</else>
					</if>
				</response>
				<transition to="EndStun" event="TimerExpired"/>
				<transition to="EndStun" event="BindingResponse"/>
				<transition to="SendBindingRequest" event="BindingRequest"/>
			</state>
			
			<state ID="EndStun" ES="true" offHookOK="true">
				<prelude>
					<generate event="SucceedEvent" fsm="UE1"/>
				</prelude>
			</state>
				
		</states>
	</fsm>
</pc2xml>
