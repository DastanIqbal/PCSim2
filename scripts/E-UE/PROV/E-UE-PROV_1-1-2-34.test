#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-2-34.test
#// Author:  Matthew Forbes
#//           
#// Creation Date: October 25, 2008
#// Modified by:
#//*****************************************************************************
#// Description:
#//     TC2855 TEST CASE PROV 5.48 Verify ability of eUE to use secondary DNS when configured in DHCP
#//
#// Objective:
#//     This test verifies the ability of the eUE to use secondary DNS server when there is no
#//     response from the primary DNS server.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Configure policy with 2 IP addresses for option 6
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Stop sniffer
#//     - Invoke parsing tool and validate using Pass/Fail scripts
#//     - Delete MTA config file
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//*****************************************************************************
########
# Notes: 5-Aug-2004 (DLS)
#
# - DHCP OFFER OPTION6 Must verify 1 of 2 IpAddrs offered (ParT config.txt extension?)
# - Add Gui field for the bad DNS Server used?
# - Should the script verify Bad DNS Server attempt?
#
########

##
##
##
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-34.test 7406 2010-07-20 17:17:37Z dthakore $ }

#################### Init Provision and TFTP modules ################

DoStep "E-UE-PROV_1-1-2-34_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
} { PASS_STEP }


#################### CONFIGURE POLICY FOR CM/MTA #########################

DoStep "E-UE-PROV_1-1-2-34_1-2" "Configure DHCP server MTA policy with TWO IP addresses in Option 6, \
        1st one not running, 2nd one is (MTATC1186)" {
      # verify_signal "Configure DHCP server MTA policy with TWO IP addresses in Option 6, \
            # 1st one not running, 2nd one is (MTATC1186)"
    PROV_MODIFY_DEVICE $MTA_MAC MTATC1186
    PROV_DEPLOY_DHCP
} {PASS_STEP}

########################### Start Sniffer ##################################


DoStep "E-UE-PROV_1-1-2-34_2-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}


#################### Reset CM / MTA #######################################

DoStep "E-UE-PROV_1-1-2-34_2-2" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset CM/MTA ---"
} {
    compare_value $val 0
}

#################### Verify MTA becomes Operational ####################

DoStep "E-UE-PROV_1-1-2-34_2-3" "Verify MTA Provisioned" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait 60 seconds for CM Reset; then poll for MTA Provisioned!" 60
    
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
    
} {
    compare_value $val 1
}

########################### Stop Sniffer ##################################

DoStep "E-UE-PROV_1-1-2-34_3-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }

############################## Init ParT Tool ###############################

DoStep "E-UE-PROV_1-1-2-34_3-2" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
    
} { PASS_STEP }

######################## Parse Frames to ParT DataStore #####################

set msgStr "ParT Parse data file: DHCP, DNS"
DoStep "E-UE-PROV_1-1-2-34_3-3" "$msgStr" {
    LogMsg "--- $msgStr ---"
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
    
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Failed ParT ParseFile operation."
    }
}
#################### ParT Verify MTA Frames ################################

DoStep "E-UE-PROV_1-1-2-34_3-4" "Verify which DNS server is used" {
    LogMsg "--- Verify which DNS server is used ---"
    set dns2 [GetValue $msgID_MTA "INANY DNS DNS_RESPONSE HEADERSRCIP"]
} {PASS_STEP}

############################ MTA-5 ###############################


# set msgStr "Verify MTA-5 DNS Server Request"
# DoStep "PROV_5-59_5-6" $msgStr {
    # LogMsg "--- $msgStr ---"
# } {
    # VerifyValue $msgID_MTA "InAny DNS DNS_QUERY DNS_QUERIES" "EXISTS" "" AND \
            # "HEADERDSTIP" "IS" "$PROV_DNS1_IP"	 AND \
            # "HEADERSRCIP" "IS" "$MTA_IP"
# }

############################ MTA-6 ###############################

DoStep "E-UE-PROV_1-1-2-34_3-5" "Verify second DNS server in Option 6 is used" {
    LogMsg "--- Verify second DNS server in Option 6 is used ---"
} {
    # Find CM MAC with colons
    set MTA_MAC_COL [AddColMac $MTA_MAC]
    VerifyValue $msgID_MTA "INANY DHCP OFFER OPTION6" "IS" "IP Address:.*IP Address: $dns2" 
}

DoStep "E-UE-PROV_1-1-2-34_3-6" "DNS REQUEST: contains KDC Kerberos FQDN" {
    LogMsg "Verify DNS REQUEST:: contains KDC Kerberos FQDN"
} {
    # Verify DNS REQUEST contains KDC Kerberos FQDN
    VerifyValue $msgID_MTA "INANY DNS DNS_QUERY_HOST HEADERDSTIP" "IS" "10.32.0.188"
}

DoStep "E-UE-PROV_1-1-2-34_3-7" "DNS REQUEST: contains KDC Kerberos FQDN" {
    LogMsg "Verify DNS REQUEST:: contains KDC Kerberos FQDN"
} {
    # Verify DNS REQUEST contains KDC Kerberos FQDN
    VerifyValue $msgID_MTA "INANY DNS DNS_QUERY_HOST HEADERDSTIP" "IS" "$PROV_DNS1_IP"
}

DoStep "E-UE-PROV_1-1-2-34_3-8" "DNS RESPONSE: from secondary address" {
    LogMsg "Verify DNS RESPONSE: contains TFTP Server IP address"
} {
    # Verify DNS RESPONSE from secondary address
    VerifyValue $msgID_MTA "INANY DNS DNS_RESPONSE_HOST HEADERSRCIP" "IS" "$PROV_DNS1_IP"
}

DoStep "E-UE-PROV_1-1-2-34_3-9" "DNS RESPONSE: from secondary address" {
    LogMsg "Verify DNS RESPONSE: contains TFTP Server IP address"
} {
    # Verify DNS RESPONSE from secondary address
    VerifyNotValue $msgID_MTA "INANY DNS DNS_RESPONSE_HOST HEADERSRCIP" "IS" "10.32.0.188"
}


################################################################################
# Cleanup
################################################################################

DoStep "E-UE-PROV_1-1-2-34_3-10" "Restore Policy for MTA" {
    # verify_signal "Restore Policy for MTA (MTAFORCW_122)"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122
    PROV_DEPLOY_DHCP
} {PASS_STEP}
        
# Clear
set CONTINUE_PAST_STEP_ERROR 0

Cleanup

return 0
