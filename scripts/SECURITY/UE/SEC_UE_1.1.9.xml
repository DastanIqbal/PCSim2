<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-128 : Update the logic in the test to fail if any message is received after sending
		an invalid rspauth value. (ghassler 4/24/2009)
	PCPCII-201 send a valid Authentication-Info header, not invalid, in the first 200-OK to 
		Register. (ghassler 2/25/2010)



-->
<pc2xml version="$Revision: 8188 $" 
	name="SECURITY 1.1.9" 
	descrip="UE network authentication" 
	number="SECURITY 1.1.9">
	
	<template file="./templates/UERegAndSubTemp.xml" name="Registrar"/>
	
	<remove_from fsm="Registrar">
		<state ID="Registered"/>
	</remove_from>
	
	<add_to fsm="Registrar">
		<state ID="Registered" timer="5000">
			<prelude>
				<send protocol="sip" msgtype="200-Register"/>
			</prelude>
			<response>
				<verify step="4" requirements="REQ19562, REQ20225, REQ20226">
					<and>
						<neq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</neq>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>SUBSCRIBE</expr>
						</eq>
					</and>
				</verify>
			</response>
			<transition to="Reboot2" event="SUBSCRIBE"/>
			<transition to="END" event="TimerExpired"/>
		</state>
		
		<!--  STEP 5 -->
		<state ID="Reboot2" timer="5000">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot2" event="SNMPResp"/>
			<transition to="PendingRegister2" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot2" event="REGISTER"/>
		</state>
		
		<state ID="PendingRegister2">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>REGISTER</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="401-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Authorization2" event="REGISTER"/>
		</state>
		
		<state ID="Authorization2">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="event"/>
							<expr>AuthenticateSucceed</expr>
						</eq>
						<eq>
							<msg_ref type="event"/>
							<expr>AuthenticateFailed</expr>
						</eq>
					</or>
					<then>
						<!-- this is to prevent the AuthenticateFailed from being forwarded
								to the next state on the AuthenticateSucceed -->
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>REGISTER</expr>
							</eq>
							<and>
								<contains>
									<msg_ref type="sip">REGISTER</msg_ref>
									<expr>Authorization</expr>
								</contains>
								<digest/>
							</and>
						</and>
						<then>
							<generate event="AuthenticateSucceed"/>
						</then>
						<else>
							<generate event="AuthenticateFailed"/>
							<send protocol="sip" msgtype="503-Register"/>
						</else>
					</elseif>
				</if>
			</response>
			<transition to="Registered2" event="AuthenticateSucceed"/>
			<transition to="END" event="AuthenticateFailed"/>
			<transition to="Authorization2" event="REGISTER"/>
		</state>
		
		<state ID="Registered2" timer="20000">
			<prelude once="true">
				<send protocol="sip" msgtype="200-Register">
					<mod modtype="replace" hdr="Authentication-Info" param="rspauth">
						<expr>&quot;6a605f743c10478b57e5fd50d6246153&quot;</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="8" requirements="REQ20230, REQ20231, REQ20225, REQ20226, REQ20227">
					<and>
						<or>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>REGISTER</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>TimerExpired</expr>
							</eq>
						</or>	
						<neq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>SUBSCRIBE</expr>
						</neq>
					</and>
				</verify>
			</response>
			<transition to="END" event="REGISTER"/>
			<transition to="END" event="SUBSCRIBE"/>
			<transition to="END" event="TimerExpired"/>
		</state>
	</add_to>
</pc2xml>
