<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<pc2xml version="$Revision: 6076 $" name="UT-RST-UE 1.3.1.3" descrip="Ringsplash and special dial-tone when new call forwarded." number="1">
	<fsm name="UE0">
		<models>
			<register/>
		</models>
		<NE sim_type="term" elements="DUT" targets="UE0 DUT"/>
		<states initialstate="Register">
			<!-- REGISTER State -->
			<state ID="Register">
				<prelude>
					<sleep time="5000"/>
					<send protocol="sip" msgtype="Register" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="Digest" event="401-Register"/>
				<transition to="Subscribe" event="200-Register"/>
			</state>
			<state ID="Digest">
				<prelude>
					<send protocol="sip" msgtype="Register" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="Subscribe" event="200-Register"/>
			</state>
			<!-- Subscribe State -->
			<state ID="Subscribe">
				<prelude>
					<send protocol="sip" msgtype="Subscribe" target="PCSCF1" originator="DUT"/>
				</prelude>
				<transition to="RecvNotify" event="200-Subscribe"/>
			</state>
			<state ID="RecvNotify">
				<postlude>
					<send protocol="sip" msgtype="200-Notify" target="PCSCF1" originator="DUT"/>
				</postlude>
				<transition to="SubscribeUA" event="NOTIFY"/>
			</state>
			<state ID="SubscribeUA">
				<prelude>
					<send protocol="sip" msgtype="Subscribe" target="PCSCF1" originator="DUT" subscribeType="ua-profile" >
						<mod modtype="replace" hdr="Event">
							<expr>ua-profile;profile-type=application;auid="com.cablelabs.pkt.rst.featureset.1"</expr>
						</mod>
					</send>
				</prelude>
				<transition to="RecvNotify1" event="200-Subscribe"/>
			</state>
			<state ID="RecvNotify1">
				<postlude>
					<send protocol="sip" msgtype="200-Notify" target="PCSCF1" originator="DUT"/>
				</postlude>
				<transition to="Setup" event="NOTIFY"/>
			</state>
			<state ID="Setup">
				<prelude>
					<sleep time="1200"/>
					<send protocol="sip" msgtype="Invite" target="PCSCF1" originator="DUT">
					<mod modtype="replace" hdr="Request-Line" param="Request-URI">
					 <var_expr>
						<expr>sip:*72@</expr> 
						<msg_ref type="platform">DUT.domain</msg_ref> 
						<expr>;user=dialstring</expr> 
					 </var_expr>
					</mod>
					</send>
				</prelude>
				<transition to="Proceeding" event="100-INVITE"/>
			</state>
			<state ID="Proceeding">
			<response>
					<!-- Step 4 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram-
               Test 18x response for reliability for possible Prack message -->
					<if>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
						<then>
							<!--Reliablity required for test sending Prack message to peer.-->
							<!-- Step 3 from the Default Message Flow Call-Term-at-UE(DUT) 
                   Sequence Diagram- send Prack -->
							<send protocol="sip" msgtype="Prack" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Proceeding state -->
				<transition from="Proceeding" to="Alerting" event="180-INVITE"/>
				<transition from="Proceeding" to="Alerting" event="183-INVITE"/>
				<transition from="Proceeding" to="Connected" event="200-INVITE"/>
			</state>
			<state ID="Alerting" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Take DUT phone off hook-->
							<send protocol="utility" msgtype="OffHook"/>
						</then>
					</if>
					
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) 
                   Sequence Diagram- received UPDATE -->
							<!--QoS required for test, sending a 200-OK to Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" target="UE1" originator="DUT"/>
						</then>
						<!-- Step 8 from the Default Message Flow Call-Term-at-UE(DUT) 
                 Sequence Diagram - received 180 -->
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
									<expr>180</expr>
								</eq>
								<contains>
									<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
									<expr>100rel</expr>
								</contains>
							</and>
							<then>
								<!--Reliablity required for test, sending Prack message to peer.-->
								<send protocol="sip" msgtype="Prack" target="UE1" originator="DUT"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Alerting state -->
				<transition to="Alerting" event="200-PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Alerting" event="18x-INVITE"/>
				<transition to="Answer" event="TimerExpired"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- ANSWER STATE -->
			<state ID="Answer">
				<response>
					<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) 
									Sequence Diagram- received UPDATE -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Update" target="UE1" originator="DUT"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Answer state -->
				<transition to="Answer" event="UPDATE"/>
				<transition to="Answer" event="200-PRACK"/>
				<transition to="Answer" event="18x-INVITE"/>
				<transition to="Answer" event="OffHookComplete"/>
				<transition to="Connected" event="200-INVITE"/>
			</state>
			<!-- CONNECTED State -->
			<state ID="Connected">
				<prelude>
					<send protocol="sip" msgtype="ACK" target="UE1" originator="DUT"/>
					<sleep time="12000"/>
					<send protocol="sip" msgtype="BYE" target="UE1" originator="DUT"/>
				</prelude>
				
				<transition to="RecvNotify2" event="200-BYE"/>
			</state>
			<state ID="RecvNotify2" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Notify</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Notify" target="PCSCF1" originator="DUT"/>
							
						</then>
					</if>
				</response>
			<transition to="RecvNotify3" event="NOTIFY"/>
			</state>
			<state ID="RecvNotify3" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Notify</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Notify" target="PCSCF1" originator="DUT"/>
						</then>
					</if>
				</response>
			<transition to="RecvNotify4" event="NOTIFY"/>
				<postlude>
					<transition to="RecvNotify3" event="NOTIFY"/>
				</postlude>						
			</state>
			<state ID="RecvNotify4" timer="12000">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Notify</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-Notify" target="PCSCF1" originator="DUT"/>
						</then>
					</if>
				</response>
			<transition to="END" event="NOTIFY"/>
			</state>
		</states>
	</fsm>
</pc2xml>
