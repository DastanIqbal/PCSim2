<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################
 Change History: (Author & Date)
-->
<pc2xml version="$Revision: 7768 $"
        name="EUE Prov 1.1.2.48-2"
        descrip="eUE behavior on secondary address acuisition"
        number="EUE Prov 1.1.2.48-2">

    <template file="./templates/EUE_Prov_B_1_1_1.xml" name="Dualstack_Prov"/>
    
    <remove_from fsm="Dualstack_Prov">
	<state ID="StartCapture_RebootWait"/>
    </remove_from>
	    
    <add_to fsm="Dualstack_Prov">	
	
	<states initialstate="Message_1"/>
	
	<state ID="Message_1">
		<prelude>
			<log promptUser="true" expr="Make sure dual stack for the eDVA is enabled (pref=5) and eUE's IPv6 is set to block Advertise at provisioning server."/>
			<generate event="Branch1Event"/>
		</prelude>
		<transition to="Reboot" event="Branch1Event"/>
	</state>
	
	<state ID="StartCapture_RebootWait" timer="200000">
		<prelude once="true" >
			<start_capture>
				<filter>
					<var_expr>
						<expr>host </expr>
						<msg_ref type="platform">DUT.IP</msg_ref>
						<expr> || host </expr>
						<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
						<expr> || host </expr>
						<msg_ref type="platform">DUT.DNS Server IP</msg_ref>
					</var_expr>
				</filter>
			</start_capture>
		</prelude>
		<transition to="checkCM" event="TimerExpired"/>
	</state>
	
	<state ID="checkCM" >
		<prelude once="true">
			<!-- this is a check for DOCSIS 3.0 eCM. -->
			<send protocol="utility" msgtype="SNMPGet">
				<mod modtype="add" hdr="oids">
					<expr>DOCS-IF3-MIB::docsIf3CmStatusValue.2</expr>
				</mod>
				<!-- check for DOCSIS 2.0 eCM. -->
				<!--mod modtype="add" hdr="oids">
					<expr>DOCS-CABLE-DEVICE-MIB::docsDevServerBootState.0</expr>
				</mod-->
				<mod modtype="replace" hdr="agentip">
					<msg_ref type="platform">DUT.CM IP Address</msg_ref>
				</mod>
				<mod modtype="replace" hdr="version">
					<expr>2c</expr>
				</mod>
			</send>
		</prelude>
		<response>
			<verify step="13">
			    <contains>
				<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
				<expr>12</expr>
			    </contains>
			</verify>
		</response>
            <transition to="checkUE_IPv4" event="SNMPResp"/>
            <transition to="END" event="SNMPRespFailure"/>
	</state>
	
	<state ID="checkUE_IPv4" >
		<prelude>
			<send protocol="utility" msgtype="SNMPGet">
			    <mod modtype="add" hdr="oids">
				<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
			    </mod>
			    <mod modtype="replace" hdr="agentip">
				<msg_ref type="platform">DUT.IP2</msg_ref>
			    </mod>
			    <mod modtype="replace" hdr="version">
				<expr>3</expr>
			    </mod>
			</send>
		</prelude>
		<response>
			<verify step="14">
			    <contains>
				<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
				<expr>1</expr>
			    </contains>
			</verify>
		</response>
		<transition to="checkProv" event="SNMPResp"/>
	</state>
	
	<state ID="checkProv">
		<prelude>
			<stop_capture/>
			<parse_capture name="eUE_dhcpv6">
				<parser_filter protocol="dhcpv6" clientMAC="DUT.MAC Address"/>
			</parse_capture>
			<parse_capture name="eUE_SNMP">
				<parser_filter protocol="snmp" ip="DUT.IP2"/>
			</parse_capture>
		
			<verify step="17">
				<lt>
				    <capture_ref type="dhcpv6" name="eUE_dhcpv6">Solicit.num</capture_ref>
				    <capture_ref type="snmp" name="eUE_SNMP">Inform Request.num</capture_ref>
				</lt>
			</verify>
			
			<verify step="18">
				<and>
					<null>
						<capture_ref type="dhcpv6" name="eUE_dhcpv6">Advertise.num</capture_ref>
					</null>
					<notnull>
						<capture_ref type="dhcpv6" name="eUE_dhcpv6" msg_instance="5">Solicit.num</capture_ref>
					</notnull>
				</and>
			</verify>
			
			<generate event="Branch1Event"/>
		</prelude>
		<transition to="ReConfigure2" event="Branch1Event"/>
	</state>
	
	<state ID="ReConfigure2"
	provFile="v6.C.1.2.3.bin"
	policyFile="X_eUEv6"
	nextState="Reboot_1"/>
	
	<state ID="Reboot_1" timer="5000">
		<!-- First we need to power cycle the UE to conduct the test -->
		<prelude once="true" >
			<log promptUser="true" expr="Make sure eUE's IPv6 is set to block Reply at provisioning server."/>
			<send protocol="utility" msgtype="SNMPSet">
				<mod modtype="add" hdr="array">
					<var_expr>
						<expr>varBind 1 1 3 \r\n ][ , </expr>
						<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
					</var_expr>
				</mod>
				<mod modtype="replace" hdr="agentip">
					<msg_ref type="platform">DUT.CM IP Address</msg_ref>
				</mod>
				<!-- Always use version 2 for a CM reset -->
				<mod modtype="replace" hdr="version">
					<expr>2c</expr>
				</mod>
			</send>
		</prelude>
		<response>
			<if>
				<eq>
					<msg_ref type="utility">Response</msg_ref>
					<expr>SNMPRespFailure</expr>
				</eq>
				<then>
					<fail/>
				</then>
			</if>
			<if>
				<or>
					<eq>
						<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
						<expr>0</expr>
					</eq>
					<eq>
						<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
						<expr>0</expr>
					</eq>
				</or>
				<then>
					<send protocol="sip" msgtype="200-REGISTER"/>
				</then>
			</if>
		</response>
		<!-- Test cases deriving their functionality from this template
			should change the following transition to some local state -->
		<transition to="Reboot_1" event="SNMPResp"/>
		<transition to="StartCapture_RebootWait_1" event="TimerExpired"/>
		<transition to="END" event="SNMPRespFailure"/>
		<transition to="Reboot_1" event="REGISTER"/>
	</state>
	
	<state ID="StartCapture_RebootWait_1" timer="230000">
		<prelude once="true" >
			<start_capture>
				<filter>
					<var_expr>
						<expr>host </expr>
						<msg_ref type="platform">DUT.IP</msg_ref>
						<expr> || host </expr>
						<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
						<expr> || host </expr>
						<msg_ref type="platform">DUT.DNS Server IP</msg_ref>
					</var_expr>
				</filter>
			</start_capture>
		</prelude>
		<transition to="checkCM_1" event="TimerExpired"/>
	</state>
	
	<state ID="checkCM_1" >
		<prelude once="true">
			<!-- this is a check for DOCSIS 3.0 eCM. -->
			<send protocol="utility" msgtype="SNMPGet">
				<mod modtype="add" hdr="oids">
					<expr>DOCS-IF3-MIB::docsIf3CmStatusValue.2</expr>
				</mod>
				<!-- check for DOCSIS 2.0 eCM. -->
				<!--mod modtype="add" hdr="oids">
					<expr>DOCS-CABLE-DEVICE-MIB::docsDevServerBootState.0</expr>
				</mod-->
				<mod modtype="replace" hdr="agentip">
					<msg_ref type="platform">DUT.CM IP Address</msg_ref>
				</mod>
				<mod modtype="replace" hdr="version">
					<expr>2c</expr>
				</mod>
			</send>
		</prelude>
		<response>
			<verify step="20">
			    <contains>
				<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
				<expr>12</expr>
			    </contains>
			</verify>
		</response>
            <transition to="checkUE_IPv4_1" event="SNMPResp"/>
            <transition to="END" event="SNMPRespFailure"/>
	</state>
	
	<state ID="checkUE_IPv4_1" >
		<prelude>
			<send protocol="utility" msgtype="SNMPGet">
			    <mod modtype="add" hdr="oids">
				<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
			    </mod>
			    <mod modtype="replace" hdr="agentip">
				<msg_ref type="platform">DUT.IP2</msg_ref>
			    </mod>
			    <mod modtype="replace" hdr="version">
				<expr>3</expr>
			    </mod>
			</send>
		</prelude>
		<response>
			<verify step="21">
			    <contains>
				<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
				<expr>1</expr>
			    </contains>
			</verify>
		</response>
		<transition to="checkProv_1" event="SNMPResp"/>
	</state>
		
	<state ID="checkProv_1">
		<prelude>
			<stop_capture/>
			<parse_capture name="eUE_dhcpv6_1">
				<parser_filter protocol="dhcpv6" clientMAC="DUT.MAC Address"/>
			</parse_capture>
			<parse_capture name="eUE_Syslog_1">
				<parser_filter protocol="syslog" ip="DUT.IP2"/>
			</parse_capture>

			<verify step="24">
				<notnull>
					<capture_ref type="dhcpv6" name="eUE_dhcpv6_1">Solicit.num</capture_ref>
				</notnull>
			</verify>
			
			<verify step="25">
				<notnull>
					<capture_ref type="dhcpv6" name="eUE_dhcpv6_1">Request.num</capture_ref>
				</notnull>
			</verify>

			<verify step="26">
				<lt>
					<capture_ref type="dhcpv6" name="eUE_dhcpv6_1">Request.num</capture_ref>
					<capture_ref type="dhcpv6" name="eUE_dhcpv6_1" msg_instance="last">Solicit.num</capture_ref>
				</lt>
			</verify>
			
			<verify step="27">
				<contains>
					<capture_ref type="syslog" name="eUE_Syslog_1" msg_instance="last">syslog.msg.show</capture_ref>
					<expr>Failed to acquire Secondary IP address V6.</expr>
				</contains>
			</verify>
			
			<generate event="Branch1Event"/>
		</prelude>
		<transition to="END" event="Branch1Event"/>
	</state>

    </add_to>
</pc2xml>