/*
######################################################################################
##                                                                                  ##
## (c) 2006-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use ##
## of this documentation/package is subject to the terms and conditions of the      ##
## CableLabs License provided to you on download of the documentation/package.      ##
##                                                                                  ##
######################################################################################


*/
package com.cablelabs.tools;

import java.util.LinkedList;
import java.util.ListIterator;

import com.cablelabs.fsm.CaptureAttributeType;

public class Field {

	/**
	 * Here is an example line from the file generated by the capture tool
	 * 
	 * <field name="frame.time" showname="Arrival Time: Oct  1, 2008 17:14:15.625383000" size="0" pos="0" show="Oct  1, 2008 17:14:15.625383000"/>
	 * 
	 * The attribute 'name' is divided into the protocol and name attributes of the class.
	 * The remaining attributes of the field tag are stored in similarly named attributes 
	 * in this class. Any children <field> tags are stored in the subFields list.
	 * 
	 * Every element of the class is stored locally as a string.
	 * 
	 */
	protected String protocol = null;
	protected String name = null;
	protected String prefix = null;
	protected String showName = null;
	protected String size = null;
	protected String show = null;
	protected String value = null;
	protected String pos = null;
	protected String hide = null;
	protected String unmaskedvalue = null;
	
	protected LinkedList<Field> subFields = null; 
	
	public Field(String protocol, String name, String showname, String size, String show, 
			String value, String pos, String hide, String unmaskedvalue) throws IllegalArgumentException {
		if (protocol == null)
			throw new IllegalArgumentException("The protocol parameter can not be null.");
		if (name == null)
			throw new IllegalArgumentException("The name parameter can not be null.");
					
		this.protocol = protocol;
		this.name = name;
		this.showName = showname;
		this.show = show;
		this.size = size;
		this.value = value;
		this.hide = hide;
		this.unmaskedvalue = unmaskedvalue;
	}
	

	protected boolean addSubField(Field f) {
		if (subFields == null) {
			subFields = new LinkedList<Field>();
		}
		
		if (f != null && subFields != null) {
			subFields.add(f);
			f.setPrefix(this.abbreviatedString());
			
			return true;
		}
		return false;
	}
	
	public String abbreviatedString() {
		if (prefix != null) {
			return prefix + "." + name;
		}
		else 
			return "." + name;
	}
	
	protected void clearSubFields() {
		if (subFields != null) {
			subFields.clear();
			subFields = null;
		}
	}
	
	public String getAttribute(CaptureAttributeType cat) {
		if (cat == CaptureAttributeType.DEFAULT) {
			if (value != null)
				return this.value;
			else if (show != null)
				return this.show;
			else if (showName != null)
				return this.showName;
		}
		else if (cat == CaptureAttributeType.VALUE)
			return this.value;
		else if (cat == CaptureAttributeType.SHOWNAME)
			return this.showName;
		else if (cat == CaptureAttributeType.SHOW)
			return this.show;
		else if (cat == CaptureAttributeType.SIZE)
			return this.size;
		else if (cat == CaptureAttributeType.HIDE)
			return this.hide;
		else if (cat == CaptureAttributeType.UNMASKED_VALUE)
			return this.unmaskedvalue;
		else if (cat == CaptureAttributeType.POS)
			return this.pos;
		
		return null;
	}
	public Field getSubField(String name) {
		if (name != null && subFields != null) {
			ListIterator<Field> iter = subFields.listIterator();
			while (iter.hasNext()) {
				Field f = iter.next();
				if (f.name.equals(name))
					return f;
			}
		}
		return null;
	}
	
	protected Field getSubField(int index) {
		if (index > -1 && subFields != null && index <= subFields.size()) {
			return subFields.get(index);
		}
		return null;
	}
	
	public boolean hasSubFields() {
		if (subFields != null && subFields.size() > 0)
			return true;
		
		return false;
	}
	
	public String getPrefix() {
		return this.prefix;
	}
	
	public void setPrefix(String prefix) {
		this.prefix = prefix;
	}
	
	public int getSubFieldSize() {
		if (subFields != null)
			return subFields.size();
		return -1;
	}
	
	@Override
	public String toString() {
		String result = "            <field";
		if (name != null && 
				name.equals(protocol))
			result += " name=\"" + name + "\"";
		else {
			result += " name=\"" + protocol + abbreviatedString() + "\"";
		}
		
		if (showName != null)
			result += " showname=\"" + showName + "\"";

		if (hide != null)
			result += " hide=\"" + hide + "\"";
		
		if (size != null)
			result += " size=\"" + size + "\"";
		
		if (pos != null)
			result += " pos=\"" + pos + "\"";
		
		if (show != null)
			result += " show=\"" + show + "\"";
		
		if (value != null)
			result += " value=\"" + value + "\"";
		
		if (unmaskedvalue != null)
			result += " unmaskedvalue=\"" + unmaskedvalue + "\"";
		
		if (subFields != null) {
			ListIterator<Field> iter = subFields.listIterator();
			while (iter.hasNext()) {
				result += "\n\t\t" + iter.next();
			}
			result += "\n            </field>\n";
		}
		else
			result += "/>";
		return result;
	}

	public String getProtocol() {
		return protocol;
	}

	public void setProtocol(String protocol) {
		this.protocol = protocol;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getShowname() {
		return showName;
	}

	public void setShowname(String showname) {
		this.showName = showname;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	public String getShow() {
		return show;
	}

	public void setShow(String show) {
		this.show = show;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}

	public String getPos() {
		return pos;
	}

	public void setPos(String pos) {
		this.pos = pos;
	}

	public String getHide() {
		return hide;
	}

	public void setHide(String hide) {
		this.hide = hide;
	}
	
	public String getUnmaskedValue() {
		return unmaskedvalue;
	}

	public void setUnmaskedValue(String value) {
		this.unmaskedvalue = value;
	}
	
}
