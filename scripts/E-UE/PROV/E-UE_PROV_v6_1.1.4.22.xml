<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################

 Change History: (Author & Date)



-->
<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 7768 $" name="EUE Prov 1.1.4.22" 
		descrip="Ability of eUE to Follow Backoff and Retry Mechanisms in Basic Mode When Provided With Multiple TFTP Server Addresses in DHCPv6" 
		number="EUE Prov 1.1.4.22">

	<!-- Next we define the each of state machines -->
	<template file="./templates/EUE_Prov_B_1_1_1.xml" name="RebootCM"/>
	
	<add_to fsm="RebootCM">
		<transition from="StartCapture_RebootWait" to="VerifyProvState" event="TimerExpired"/>
	
		<state ID="VerifyProvState">
			<prelude once="true">
				<sleep time="90000"/>
				<stop_capture/>
				<parse_capture name="eUE_DHCPc6">
					<parser_filter protocol="dhcpv6" clientMAC="DUT.MAC Address"/>
				</parse_capture>
				<parse_capture name="eUE_Prov">
					<parser_filter ip="DUT.IP"/>
				</parse_capture>
				<parse_capture name="eUE_TFTP">
					<parser_filter protocol="tftp" ip="DUT.IP"/>
				</parse_capture>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="1">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				
				<verify step="2">
					<neq>
						<capture_ref type="tftp" name="eUE_TFTP" msg_instance="1">Read Request.ipv6.dst_host.show</capture_ref>
						<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
					</neq>
				</verify>
				
				<!-- Compare time interval between initial and second Read Request for TFTP Server 1 -->
				<verify step="2">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="2">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="1" add="0.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="2">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="1" add="1.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				<!-- Compare time interval between second and third Read Request for TFTP Server 1 -->
				<verify step="2">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="3">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="2" add="1.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="3">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="2" add="2.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				
				<!-- Compare time interval between third and fourth Read Request for TFTP Server 1 -->
				<verify step="2">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="4">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="3" add="3.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="4">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="3" add="4.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				
				<!-- Compare time interval between fourth and fifth Read Request for TFTP Server 1 -->
				<verify step="2">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="5">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="4" add="7.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="5">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="4" add="8.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
								
				<verify step="3">
					<neq>
						<capture_ref type="tftp" name="eUE_TFTP" msg_instance="6">Read Request.ipv6.dst_host.show</capture_ref>
						<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
					</neq>
				</verify>
				
				<!-- Compare time interval between initial and second Read Request for TFTP Server 2 -->
				<verify step="3">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="7">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="6" add="0.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="7">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="6" add="1.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				
				<!-- Compare time interval between second and third Read Request for TFTP Server 2 -->
				<verify step="3">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="8">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="7" add="1.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="8">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="7" add="2.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				
				<!-- Compare time interval between third and fourth Read Request for TFTP Server 2 -->
				<verify step="3">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="9">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="8" add="3.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="9">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="8" add="4.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				
				<!-- Compare time interval between fourth and fifth Read Request for TFTP Server 2 -->
				<verify step="3">
					<and>
						<gte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="10">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="9" add="7.75">Read Request.timestamp</capture_ref>
						</gte>
						<lte>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="10">Read Request.timestamp</capture_ref>
							<capture_ref type="tftp" name="eUE_TFTP" msg_instance="9" add="8.25">Read Request.timestamp</capture_ref>
						</lte>
					</and>
				</verify>
				
				<verify step="4">
					<eq>
						<capture_ref type="tftp" name="eUE_TFTP" msg_instance="11">Read Request..value.show</capture_ref>
						<expr>1428</expr>
					</eq>
				</verify>
				<verify step="4">
					<eq>
						<capture_ref type="tftp" name="eUE_TFTP" msg_instance="11">Read Request.ipv6.dst_host.show</capture_ref>
						<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
					</eq>
				</verify>
				<verify step="4">
					<notnull>
						<capture_ref type="tftp" name="eUE_TFTP">Acknowledgement.num</capture_ref>
					</notnull>
				</verify>
				
			</response>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	</add_to>
</pc2xml>
