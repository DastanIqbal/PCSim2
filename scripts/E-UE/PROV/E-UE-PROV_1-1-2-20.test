#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-2-20.test
#// Author:   Dan Smith
#//           Matthew Forbes
#// Creation Date: August 5, 2004
#// Modified by:
#//*****************************************************************************
#// Description:
#//     TC1190 TEST CASE PROV 5.50 To test the behavior of the MTA in the scenario where
#//     the DHCP Server with IP Address in both sub-option 1 is unavailable.
#//
#// Objective:
#//     To test the ability of the MTA to accept the offer from DHCP Server with IP
#//     Address in sub-option 2 when the DHCP Server with IP Address in sub-option 1  
#//     is unavailable and DHCP Server with IP Address in sub-option 2 is available.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Configure provisioning service CM policy (Option122, sub-options 1 & 2 with
#//       valid IPs, but the server for sub-option 1 is unavailable)
#//     - Start sniffer
#//     - Reset DUT
#//     - Verify provisioning has completed
#//     - Stop sniffer
#//     - Invoke parsing tool and validate using Pass/Fail scripts
#//     - Restore policy on provisioning server
#//     - Delete MTA config file
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//*****************************************************************************


########
# Notes: 5-Aug-2004 (DLS)
#
# - Use Future ParT Release: SEQUENCE-I API to Identify (n) DHCP Discover Msg (optional)
# - Add CM.bin and MTA.bin config file TFTP logic (optional)
# - Defile better method for CM DHCP 122.1 Server configuration?
# - Add Sequence Timming logic to verify Backoff DHCP Discovers
# - Add UI field to verify Bad IP 1 and 2?
# - Verify DHCP Discover to BadIP?
# - Re-Provision MTA to healthy state?
#
########

##
##
##
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-20.test 7406 2010-07-20 17:17:37Z dthakore $ }

#################### Init Provision and TFTP modules ################

DoStep "E-UE-PROV_1-1-2-20_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
} { PASS_STEP }


####################### (Manual) Provision CM / MTA #####################

DoStep "E-UE-PROV_1-1-2-20_2-1" "Configure DHCP Server" {
    # verify_signal "Configure DHCP server with CM policy containing valid addresses for \
      # option 122, sub-option 1 and 2, but with sub-option 1 unavailable (CMTC1190)"
    PROV_MODIFY_DEVICE $CM_MAC CMTC1190
    PROV_DEPLOY_DHCP
} {PASS_STEP}

######################### Start Sniffer ##################################

DoStep "E-UE-PROV_1-1-2-20_2-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

#################### Reset CM / MTA #######################################

DoStep "E-UE-PROV_1-1-2-20_3-1" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset CM/MTA ---"
} {
    IsEqual $val 0
}

#################### Wait and Verify MTA -NOT- Provisioned! ############

DoStep "E-UE-PROV_1-1-2-20_4-1" "Wait 60 seconds for CM Boot, Verify MTA Provisioned!" {
    actionWait "Wait 60 seconds for CM/MTA to Reboot, Verify MTA Provisioned!" 60

    # Get MTA Provision State (timeout)
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

#################### Stop Sniffer ##################################

DoStep "E-UE-PROV_1-1-2-20_5-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }

#################### Init ParT Tool ##################################

DoStep "E-UE-PROV_1-1-2-20_6-1" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART

    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE

    # Find CM MAC with colons
    set CM_MAC_COL [AddColMac $CM_MAC]
    set MTA_MAC_COL [AddColMac $MTA_MAC]

} { PASS_STEP }

#################### Parse Frames to ParT DataStore ##################################

DoStep "E-UE-PROV_1-1-2-20_6-2" "ParT Parse data file DHCP CM/MTA" {
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Failed ParT ParseFile operation."
    }
}

################ VERIFY DUT SENDS THREE CONSECUTIVE DHCP DISCOVERS ########################


# Future ParT Release: SEQUENCE-I API
set msgStr "Verify MTA DHCP:DISCOVER Sequence"
DoStep "E-UE-PROV_1-1-2-20_6-3" $msgStr {
    LogMsg "--- $msgStr ---"
    
    # Set SEQUENCE to check
    set MTA_SEQUENCE "DHCP:DISCOVER,DHCP:DISCOVER,DHCP:DISCOVER"
    
    # Remove whitespace
    regsub -all { } $MTA_SEQUENCE {} MTA_SEQUENCE
} {
    # Verify Sequence
    VerifyValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE" "" ""
}


############################ MTA USES SERVER IN SUB-OPTION 2 ############################

DoStep "E-UE-PROV_1-1-2-20_6-4" "Verify MTA DHCP REQUEST is to Server in sub-option 2" {
    LogMsg "--- Verify MTA DHCP REQUEST is to Server in sub-option 2 ---"
} {
    set dhcp2 [GetValue $msgID_MTA "INANY DHCP REQUEST HEADERDSTIP" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"]
    VerifyValue $msgID_CM "INANY DHCP OFFER OPTION122SUBOPTION2" "IS" "$dhcp2.*" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$CM_MAC_COL"
}


################################################################################
# Cleanup
################################################################################

####################### RESTORE POLICY FOR CM #####################

DoStep "E-UE-PROV_1-1-2-20_2-1" "Restore Policy for CM" {
    # verify_signal "Restore Policy for CM (CMFORCW_122)"
    PROV_MODIFY_DEVICE $CM_MAC CMFORCW_122
    PROV_DEPLOY_DHCP
} {PASS_STEP}

# Clear
set CONTINUE_PAST_STEP_ERROR 0

Cleanup

return 0
