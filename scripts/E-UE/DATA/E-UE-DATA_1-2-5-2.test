################################################################################
#// Filename: E-UE-DATA_1-2-5-2.test 
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: November 11, 2008
#// Modified by:
#//     Garey Hassler : Changed the reboot time from 80 to 120 seconds based upon issue PCPCII-353.
#//
################################################################################
#// Description:
#//     TC2851 TEST CASE E-UE-DATA 1-2-5-2 To test the ability of eUE to populate the 
#//     ipNetToPhysicalTable
#//
#// Objective:
#//     This test verifies that an EDVA with an eCM that supports IPv4 only creates the proper
#//     ipNetToMediaTable when queried via SNMP. 
#//
#//
#// PacketCable DUT:
#//     EMTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Stop sniffer
#//     - Invoke SNMPv3 API and bulk query MIB objects and validate values for ipNetToPhysicalTable
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Stop sniffer
#//     - Invoke SNMPv3 API and bulk query MIB objects and validate values for ipNetToPhysicalTable
#//     - Configure CM for IPv6 if it supports it or skip to end
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Stop sniffer
#//     - Invoke SNMPv3 API and bulk query MIB objects and validate values for ipNetToPhysicalTable
#//     - Restore CM config file and reset DUT
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
################################################################################

global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-5-2.test 7406 2010-07-20 17:17:37Z dthakore $ }


DoStep "E-UE-DATA_1-2-5-2_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-2_1-2" "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-2_2-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}



############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-2_2-2" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-2_2-3" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-2_3-1" "ipNetToPhysicalIfIndex Content Verification" {
    #This value is in index of the table
    # set val [SNMP_TABLE_GET $oid_ipNetToPhysicalIfIndex $MTA_IP 1]
    set val [SNMP_TABLE_GET .1.3.6.1.2.1.4.35.1 $MTA_IP 1]
} {
    # IsEqual $val 1
        verify_signal "Check the ipNetToPhysicalTable display on TclSim console.
        Index should contain ipNetToPhysicalIfIndex = 1, the ipNetToPhysicalNetAddressType = ipv4,
            & the ipNetToPhysicalNetAddress = $CM_IP"
}

DoStep "E-UE-DATA_1-2-5-2_3-2" "ipNetToPhysicalPhysAddress Content Verification" {
    # Need to figure out way to access other indexing
    Init_PART
    set cmmac [string toupper [AddColMac $CM_MAC]]
    # set val [SNMP_TABLE_GET $oid_ipNetToPhysicalPhysAddress $MTA_IP 1]
    set val [SNMP_TABLE_GET .1.3.6.1.2.1.4.35.1 $MTA_IP 1]
} {
    IsEqual $val $cmmac
}

# DoStep "E-UE-DATA_1-2-5-2_3-3" "ipNetToPhysicalNetAddressType Content Verification" {
   # # This value is in the index of the table
    # set val [SNMP_TABLE_GET $oid_ipNetToPhysicalNetAddressType $MTA_IP 1]
# } {
    # IsEqual $val 1
# }

# DoStep "E-UE-DATA_1-2-5-2_3-4" "ipNetToPhysicalNetAddress Content Verification" {
    # # This value is in the index of the table
    # set val [SNMP_TABLE_GET $oid_ipNetToPhysicalNetAddress $MTA_IP 1]
# } {
    # IsEqual $val $CM_IP
# }

DoStep "E-UE-DATA_1-2-5-2_3-5" "ipNetToPhysicalLastUpdated Content Verification" {
    set sysuptime [SNMPvN_GET .1.3.6.1.2.1.1.3.0 $CM_IP 2c private 1]
    set lstchng [SNMP_TABLE_GET $oid_ipNetToPhysicalLastUpdated $MTA_IP 1]
} {
    verify_signal "The NetToPhysicalLastUpdated should be approximately the same as the sysuptime or 0,
    NetToPhysicalLastUpdated = $lstchng and sysuptime = $sysuptime (1/100th secs).  Is this correct?"
}

DoStep "E-UE-DATA_1-2-5-2_3-6" "ipNetToPhysicalType Content Verification" {
    set val [SNMP_TABLE_GET $oid_ipNetToPhysicalType $MTA_IP 1]
} {
    IsEqual $val 4
}

DoStep "E-UE-DATA_1-2-5-2_3-7" "ipNetToPhysicalState Content Verification" {
    set val [SNMP_TABLE_GET $oid_ipNetToPhysicalState $MTA_IP 1]
} {
    # If provisioned in IPv4
    IsEqual $val 6
    #If provisioned in IPv6
    # IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-2_3-8" "ipNetToPhysicalRowStatus Content Verification" {
    set val [SNMP_TABLE_GET $oid_ipNetToPhysicalRowStatus $MTA_IP 1]
} {
    IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-2_4-1" "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure_Prov"
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-2_5-1" "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-2_5-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}



############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-2_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-2_5-4" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-2_6-1" "ipNetToPhysicalIfIndex Content Verification" {
    # This value is in the index of the table
    # set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalIfIndex $MTA_IP 1]
    set val [SNMPvN_TABLE_GET .1.3.6.1.2.1.4.35.1 $MTA_IP 1]
} {
    # IsEqual $val 1
    verify_signal "Check the ipNetToPhysicalTable display on TclSim console.
    Index should contain ipNetToPhysicalIfIndex = 1, the ipNetToPhysicalNetAddressType = ipv4,
    & the ipNetToPhysicalNetAddress = $CM_IP"
}

DoStep "E-UE-DATA_1-2-5-2_6-2" "ipNetToPhysicalPhysAddress Content Verification" {
    # Init_PART
    set cmmac [string toupper [AddColMac $CM_MAC]]
    # set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalPhysAddress $MTA_IP 1]
    # Need to figure out way to access other indexing
    set val [SNMPvN_TABLE_GET .1.3.6.1.2.1.4.35.1 $MTA_IP 1]
} {
    IsEqual $val $cmmac
}

# DoStep "E-UE-DATA_1-2-5-2_6-3" "ipNetToPhysicalNetAddressType Content Verification" {
    # # This value is in the index of the table
    # set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalNetAddressType $MTA_IP 1]
# } {
    # IsEqual $val 1
# }

# DoStep "E-UE-DATA_1-2-5-2_6-4" "ipNetToPhysicalNetAddress Content Verification" {
    # # This value is in the index of the table
    # set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalNetAddress $MTA_IP 1]
# } {
    # IsEqual $val $CM_IP
# }

DoStep "E-UE-DATA_1-2-5-2_6-5" "ipNetToPhysicalLastUpdated Content Verification" {
    set sysuptime [SNMPvN_GET .1.3.6.1.2.1.1.3.0 $CM_IP 2c private 1]
    set lstchng [SNMPvN_TABLE_GET $oid_ipNetToPhysicalLastUpdated $MTA_IP 1]
} {
    verify_signal "The NetToPhysicalLastUpdated should be approximately the same as the sysuptime or 0,
    NetToPhysicalLastUpdated = $lstchng and sysuptime = $sysuptime (1/100th secs).  Is this correct?"
}

DoStep "E-UE-DATA_1-2-5-2_6-6" "ipNetToPhysicalType Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalType $MTA_IP 1]
} {
    IsEqual $val 4
}

DoStep "E-UE-DATA_1-2-5-2_6-7" "ipNetToPhysicalState Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalState $MTA_IP 1]
} {
    # If provisioned in IPv4
    IsEqual $val 6
    #If provisioned in IPv6
    # IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-2_6-8" "ipNetToPhysicalRowStatus Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ipNetToPhysicalRowStatus $MTA_IP 1]
} {
    IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-2_7-1" "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid_Prov"
} { PASS_STEP }

DoStep "E-UE-DATA_1-2-5-2_8-1" "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }

############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-2_8-2" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-2_8-3" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup



