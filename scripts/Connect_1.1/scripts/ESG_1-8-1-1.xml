<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History:
	2011-09-20	Marc Weaver - Initial version
	2011-11-15	Seung Lee - final versionfor




-->
<pc2xml version="$Revision: 1 $" 
	name="ESG 1.8.1.1" 
	descrip="REGISTER MESSAGE DETAILS (NEGATIVE TEST) - Interworking" 
	number="ESG 1.8.1.1">
	
	
	<fsm name="Register">
		<configure name="SIP Inspector Type" value="UE"/>
		<configure name="SIP Inspector" value="enable"/>
		
		<models>
			<registrar/>
		</models>

		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1 PCSCF1 3033920001"/>

		<states initialstate="Reboot">
		
			<state ID="Reboot" timer="5000">
				<prelude once="true">
					<log expr="Setup the PBX to use RFC3261 Registration instead of the GIN registration." promptUser="true"/>
					<log expr="Reset or restart the PBX."  promptUser="true"/>
				</prelude>
				<transition to="PendingRegistration" event="TimerExpired"/>
			</state>
			
			<state ID="PendingRegistration">
				<prelude>
					<!--log promptUser="True" verify="True" step="1" requirements="REQ23843, REQ23844"
						 expr="Start capture for WAN (SP-SSE) and LAN (SIP-PBX) sides of ESG"/-->
					 
					<start_capture>
						<filter>
							<var_expr>
								<expr>host </expr>
								<msg_ref type="platform">UE0.IP</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">UE0.IP2</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">PCSCF1.IP</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</var_expr>
						</filter>
					</start_capture>
				</prelude>	
				<response>		
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<!-- Step-2 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- send 401-REGISTER-->
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
					<var name="UE0domain">
						<var_expr>
								<expr>sip:</expr>
								<msg_ref type="Platform">UE0.domain</msg_ref>
						</var_expr>
					</var>
					
					<var name="UE0pui">
						<var_expr>
								<expr>sip:</expr>
								<msg_ref type="Platform">UE0.pui</msg_ref>
						</var_expr>
					</var>
					
					<var name="UE0IP">
						<var_expr>
							<expr>sip:</expr>
							<msg_ref type="Platform">UE0.IP</msg_ref>
							<expr>:</expr>
							<msg_ref type="Platform">UE0.UDPPort</msg_ref>
							<expr>;bnc</expr>
						</var_expr>
					</var>
					
					<verify step="4" requirements="REQ23852, REQ23853">
						<eq>
							<msg_ref type="sip">REGISTER.Request-Line.Request-URI</msg_ref>
							<var_ref name="UE0domain"/>
						</eq>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<eq>
							<msg_ref type="sip">REGISTER.Proxy-Require</msg_ref>
							<expr>gin</expr>
						</eq>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<eq>
							<msg_ref type="sip">REGISTER.Require</msg_ref>
							<expr>gin</expr>
						</eq>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<eq>
							<msg_ref type="sip">REGISTER.Supported</msg_ref>
							<expr>path</expr>
						</eq>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<contains>
							<msg_ref type="sip">REGISTER.To</msg_ref>
							<var_ref name="UE0pui"/>
						</contains>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<contains>
							<msg_ref type="sip">REGISTER.From</msg_ref>
							<var_ref name="UE0pui"/>
						</contains>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<contains>
							<msg_ref type="sip">REGISTER.Contact</msg_ref>
							<var_ref name="UE0IP"/>
						</contains>
					</verify>
					<verify step="4" requirements="REQ23852, REQ23853">
						<contains>
							<msg_ref type="sip">REGISTER.ALLOW-EVENT</msg_ref>
							<expr>VQ-RTCPXR</expr>
						</contains>
					</verify>
					
				</response>
				<transition to="Authorization" event="REGISTER"/>
			</state>

			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>

				<transition to="Registered" event="AuthenticateSucceed" />
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Registered" timer="5000">
				<!-- Step  4 from the Default Message Flow - 
					UE Registration (DUT) Sequence Diagram - 
					received REGISTER message-  
					send 200-REGISTER upon AuthenticateSucceed event-->
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				
				<postlude>
					<stop_capture/>	
				</postlude>
				<!-- Transitions for Registered state -->
				<transition to="Registered" event="REGISTER"/>
				<transition to="END" event="TimerExpired"/>
			</state>
			
		</states>
	</fsm>
	
</pc2xml>
