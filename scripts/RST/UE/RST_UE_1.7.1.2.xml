<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)




-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.7.1.2" 
	descrip="Anonymous Auto-Recall" 
	number="RST-UE 1.7.1.2" inspector="disable">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup"/>
	</remove_from>

	<add_to fsm="UE1">
		<NE targets="*69"/>
		<state ID="Setup">
			<prelude>
				<send protocol="sip" msgtype="Invite">
					<mod modtype="delete" hdr="P-Asserted-Identity"/>
					<mod modtype="replace" hdr="From" param="name-addr">
						<expr>"Anonymous" &lt;sip:anonymous@anonymous.invalid&gt;</expr>
					</mod>
				</send>
			</prelude>
			<transition to="EndCall1" event="1xx-INVITE"/>
		</state>
		
		<state ID="EndCall1" ES="true">
			<transition to="2ndOffHook" event="SessionTerminated"/>
		</state>
		
		<state ID="2ndOffHook">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="2ndSetup" event="OffHookComplete"/>
		</state>
		
		<state ID="2ndSetup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>*69</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="3" requirements="REQ13965, REQ13969, REQ13970">
							<contains>
								<msg_ref type="sip">Invite.Request-Line.username</msg_ref>
								<msg_ref type="sip" msg_instance="first">Invite.Call-ID.value</msg_ref>
							</contains>
						</verify>
						<verify step="3" requirements="REQ13965, REQ13969, REQ13970">
							<eq>
								<msg_ref type="sip">Invite.Request-Line.domain</msg_ref>
								<msg_ref type="platform">UE0.domain</msg_ref>
							</eq>
						</verify>
						<verify step="3" requirements="REQ13965, REQ13969, REQ13970">
							<eq>
								<msg_ref type="sip">Invite.Request-Line.user</msg_ref>
								<expr>dialstring</expr>
							</eq>
						</verify>
						<verify step="3" requirements="REQ13965, REQ13969, REQ13970">
							<startsWith>
								<msg_ref type="sip">Invite.Request-Line.username</msg_ref>
								<expr>*69</expr>
							</startsWith>
						</verify>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
						 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="2ndSetup" event="DialDigitsComplete"/>
			<transition to="2ndAlerting" event="INVITE"/>
		</state>
		
		<state ID="2ndAlerting">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliability required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite"/>
					</then>
				</if>
			</response>
			<transition to="2ndAlerting" event="DialDigitsComplete"/>
			<transition to="2ndAlerting" event="PRACK"/>
			<transition to="2ndAlerting" event="UPDATE"/>
			<transition to="2ndAnswer" event="ALERTING_UAS"/>
		</state>
		
		<state ID="2ndAnswer" timer="15000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Sending 200-Invite-->
						<send protocol="sip" msgtype="200-INVITE"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>ACK</expr>
					</eq>
					<then>
						<verify step="4" requirements="REQ13972">
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>ACK</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="2ndAnswer" event="UPDATE"/>
			<transition to="2ndAnswer" event="TimerExpired"/>
			<transition to="2ndConnected" event="ACK"/>
		</state>
		
		<state ID="2ndConnected" timer="20000">
			<transition to="2ndReleasing" event="TimerExpired"/>
		</state>
		
		<state ID="2ndReleasing">
			<prelude>
				<!--Sending BYE to peer to terminate call.-->
				<send protocol="sip" msgtype="BYE"/>
			</prelude>
			<transition to="2ndOnHook" event="200-Bye"/>
		</state>
		
		<state ID="2ndOnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="End2ndCall" event="OnHookComplete"/>
		</state>
		
		<state ID="End2ndCall" ES="true">
			<transition to="3rdSetup" event="SessionTerminated"/>
		</state>
		
		<state ID="3rdSetup">
			<prelude>
				<send protocol="sip" msgtype="Invite">
					<mod modtype="replace" hdr="From" param="name-addr">
						<expr>"Anonymous" &lt;sip:anonymous@anonymous.invalid&gt;</expr>
					</mod>
				</send>
			</prelude>
			<!-- Expected responses are 100, 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliability required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<!-- Transitions for Setup state -->
			<transition to="3rdProceeding" event="100-INVITE"/>
			<transition to="3rdAlerting" event="180-INVITE"/>
			<transition to="3rdAlerting" event="183-INVITE"/>
			<transition to="3rdConnected" event="200-INVITE"/>
		</state>
		
		<state ID="3rdProceeding">
			<!-- Expected responses are 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliability required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="3rdAlerting" event="180-INVITE"/>
			<transition to="3rdAlerting" event="183-INVITE"/>
			<transition to="3rdConnected" event="200-INVITE"/>
		</state>
		
		<state ID="3rdAlerting" timer="12000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Take DUT phone off hook-->
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliability required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="3rdAlerting" event="200-PRACK"/>
			<transition to="3rdAlerting" event="UPDATE"/>
			<transition to="3rdAlerting" event="18x-INVITE"/>
			<transition to="3rdAnswer" event="TimerExpired"/>
			<transition to="3rdConnected" event="200-INVITE"/>
		</state>
		
		<state ID="3rdAnswer">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="3rdAnswer" event="UPDATE"/>
			<transition to="3rdAnswer" event="200-PRACK"/>
			<transition to="3rdAnswer" event="18x-INVITE"/>
			<transition to="3rdAnswer" event="OffHookComplete"/>
			<transition to="3rdConnected" event="200-INVITE"/>
		</state>
		<state ID="3rdConnected" timer="30000">
			<prelude once="true">
				<send protocol="sip" msgtype="ACK"/>
			</prelude>
			<transition to="3rdConnected" event="OffHookComplete"/>
			<transition to="3rdReleasing" event="TimerExpired"/>
		</state>
		
		<state ID="3rdReleasing">
			<prelude>
				<send protocol="sip" msgtype="Bye"/>
			</prelude>
			<transition to="3rdOnHook" event="200-BYE"/>
		</state>
		
		<state ID="3rdOnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="End3ndCall" event="OnHookComplete"/>
		</state>
		
		<state ID="End3ndCall" ES="true">
			<transition to="4thOffHook" event="SessionTerminated"/>
		</state>
		
		<state ID="4thOffHook">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="4thSetup" event="OffHookComplete"/>
		</state>
		
		<state ID="4thSetup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="replace" hdr="digits">
						<expr>*69</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="8" requirements="REQ13965, REQ13969, REQ13970">
							<contains>
								<msg_ref type="sip">Invite.Request-Line.username</msg_ref>
								<msg_ref type="sip">Invite.Call-ID.value</msg_ref>
							</contains>
						</verify>
						<verify step="8" requirements="REQ13965, REQ13969, REQ13970">
							<eq>
								<msg_ref type="sip">Invite.Request-Line.domain</msg_ref>
								<msg_ref type="platform">UE0.domain</msg_ref>
							</eq>
						</verify>
						<verify step="8" requirements="REQ13965, REQ13969, REQ13970">
							<eq>
								<msg_ref type="sip">Invite.Request-Line.user</msg_ref>
								<expr>dialstring</expr>
							</eq>
						</verify>
						<verify step="8" requirements="REQ13965, REQ13969, REQ13970">
							<contains>
								<msg_ref type="sip">Invite.Request-Line.username</msg_ref>
								<expr>*69</expr>
							</contains>
						</verify>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
						 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="4thSetup" event="DialDigitsComplete"/>
			<transition to="4thAlerting" event="INVITE"/>
		</state>
		
		<state ID="4thAlerting">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliability required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite"/>
					</then>
				</if>
			</response>
			<transition to="4thAlerting" event="DialDigitsComplete"/>
			<transition to="4thAlerting" event="PRACK"/>
			<transition to="4thAlerting" event="UPDATE"/>
			<transition to="4thAnswer" event="ALERTING_UAS"/>
		</state>
		
		<state ID="4thAnswer" timer="15000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Sending 200-Invite-->
						<send protocol="sip" msgtype="200-INVITE"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>ACK</expr>
					</eq>
					<then>
						<verify step="9" requirements="REQ13972">
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>ACK</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="4thAnswer" event="UPDATE"/>
			<transition to="4thAnswer" event="TimerExpired"/>
			<transition to="4thConnected" event="ACK"/>
		</state>
		
		<state ID="4thConnected" timer="20000">
			<transition to="4thReleasing" event="TimerExpired"/>
		</state>
		
		<state ID="4thReleasing">
			<prelude>
				<!--Sending BYE to peer to terminate call.-->
				<send protocol="sip" msgtype="BYE"/>
			</prelude>
			<transition to="4thOnHook" event="200-Bye"/>
		</state>
		
		<state ID="4thOnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="END" event="OnHookComplete"/>
		</state>
	</add_to>
</pc2xml>
