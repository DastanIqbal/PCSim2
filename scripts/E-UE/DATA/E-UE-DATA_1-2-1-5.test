###############################################################################
#// Filename: E-UE-DATA_1-2-1-5.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: March 25, 2009
#// Modified by:
################################################################################
#// Description:
#//     TC2743 TEST CASE E-UE-DATA 1.2.1.5 - Ability of eUE to Implement the
#//	    Certificate Bootstrapping MIBs
#//
#// Objective:
#//     TThis test verifies the eUE ability to properly implement the the MIBs used to indicate 
#//     support for certificate bootstrapping and elicit proper behavior when directed to enable  for
#//     this capability. Support these MIBs is required irrespective of whether the E-UE supports 
#//     certificate bootstrapping or not.
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//
#//
#// Notes:
#//     - Requires provPrimitives.tcl
#//
#//
################################################################################

global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-1-5.test 7406 2010-07-20 17:17:37Z dthakore $ }

set test_case E-UE-DATA_1-2-1-5-
set step_num 1

Init_PROV
Init_PART

set NON_WRITABLE 2

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}


DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUECBSupport Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val1 [SNMP_GET $oid_pktcEUECBSupport $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
    set val [regexp $val1 12]
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num] "pktcEUECBSupport Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUECBSupport INTEGER 3 $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]_1 "pktcEUECBEnable Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val1 [SNMP_GET $oid_pktcEUECBEnable $MTA_IP]
    LogMsg "The Value of pktcEUECBEnable is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}[incr step_num] "pktcEUECBSupport Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUECBSupport STRING abcd $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "pktcEUECBSupport Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUECBSupport STRING http://eUE.redlab.com $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
} {IsEqual $val 0}

if {$val1 == 1} {
DoStep ${test_case}[incr step_num] "pktcEUECBEnable Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUECBEnable INTEGER 1 $MTA_IP]
    LogMsg "The Value of pktcEUECBEnable is: $val"
} {IsEqual $val 0}
}

if {$val1 == 2} {
    DoStep ${test_case}[incr step_num] "pktcEUECBEnable Content set" {
        # Try to set the read only parameter
        set val [SNMP_SET $oid_pktcEUECBEnable INTEGER 1 $MTA_IP]
        LogMsg "The Value of pktcEUECBEnable is: $val"
    } {IsEqual $val $NON_WRITABLE}
}


DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure"
} { PASS_STEP }

set step_num 1

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 HybridFlow_BasicCall_DigitMap_Inactive.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}${step_num}h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num]h "pktcEUECBSupport Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val1 [SNMPvN_GET $oid_pktcEUECBSupport $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
    set val [regexp $val1 12]
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h "pktcEUECBSupport Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcEUECBSupport INTEGER 3 $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]h "pktcEUECBEnable Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val1 [SNMPvN_GET $oid_pktcEUECBEnable $MTA_IP]
    LogMsg "The Value of pktcEUECBEnable is: $val"
} {
    IsEqual $val 2
}

DoStep ${test_case}[incr step_num]h "pktcEUECBSupport Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcEUECBSupport STRING abcd $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]h "pktcEUECBSupport Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcEUECBSupport STRING http://eUE.redlab.com $MTA_IP]
    LogMsg "The Value of pktcEUECBSupport is: $val"
} {IsEqual $val 0}

if {$val1 == 1} {
    DoStep ${test_case}[incr step_num]h "pktcEUECBEnable Content set" {
        # Try to set the read only parameter
        set val [SNMPvN_SET $oid_pktcEUECBEnable INTEGER 1 $MTA_IP]
        LogMsg "The Value of pktcEUECBEnable is: $val"
    } {IsEqual $val 0}
}

if {$val1 == 2} {
    DoStep ${test_case}[incr step_num]h "pktcEUECBEnable Content set" {
        # Try to set the read only parameter
        set val [SNMPvN_SET $oid_pktcEUECBEnable INTEGER 1 $MTA_IP]
        LogMsg "The Value of pktcEUECBEnable is: $val"
    } {IsEqual $val $NON_WRITABLE}
}

DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid"
} { PASS_STEP }

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup