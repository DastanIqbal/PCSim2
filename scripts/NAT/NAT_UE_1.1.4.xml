<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : Update the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-235 : Update the script to allow the de-register message to arrive before receiving the 
		response from the SNMP set. (ghassler 05/12/2010)



-->

<pc2xml version="$Revision: 8188 $" name="NAT_UE_1.1.4"
	descrip="Use of rport parameter within REGISTER requests"
	number="NAT_UE_1.1.4" inspector="disable">

	<fsm name="Registrar">
		<models>
			<registrar />
		</models>
		<!-- Next we define all of the network elements-->
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1" />
		<!-- All of the states for the test. References to "Step x" from the
			Default Message Flow - UE Registration (DUT) Sequence Diagram -->
		<states initialstate="Reboot" >
			<state ID="Reboot" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<!--log expr="Power on (or reset) the UE. "/-->
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			<!-- PENDINGREGISTRATION State -->
			<state ID="PendingRegistration">
				<!-- Step 1 from the Default Message Flow - 
					UE Registration (DUT) Sequence Diagram- received REGISTER message-->
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<!-- Step-2 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- send 401-REGISTER-->
						<then>
							<send protocol="sip" msgtype="401-REGISTER" />
							<verify step="1" requirements="REQ19217, RFC2029">
								<eq>
									<msg_ref type="sip">Register.Via.rport</msg_ref>
									<expr>rport</expr>
								</eq>
							</verify>
						</then>
					</if>
					
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Authorization" event="REGISTER" />
			</state>
			<!--State changes from PENDINGREGISTRATION to AUTHORIZATION on 
				receiving (Step-3) REGISTER message-->
			<!-- Step-3 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- received REGISTER message-->
			<!-- AUTHORIZATION State -->
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event" />
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event" />
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
								to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest />
									
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed" />
								<verify step="2" requirements="REQ19217, RFC2029">
									<eq>
										<msg_ref type="sip">Register.Via.rport</msg_ref>
										<expr>rport</expr>
									</eq>
								</verify>
							</then>
							<else>
								<generate event="AuthenticateFailed" />
								<send protocol="sip" msgtype="503-Register" />
							</else>
						</elseif>
					</if>
					
				</response>
				<!-- Transitions for Authorization state -->
				<transition to="Registered" event="AuthenticateSucceed" />
				<transition to="END" event="AuthenticateFailed" />
				<transition to="Authorization" event="REGISTER" />
			</state>
			<!-- REGISTERED State -->
			<state ID="Registered" timer="31000">
				<!-- Step  4 from the Default Message Flow - 
					UE Registration (DUT) Sequence Diagram - 
					received REGISTER message-  
					send 200-REGISTER upon AuthenticateSucceed event-->
				<prelude once="true">
					<send protocol="sip" msgtype="200-Register">
						<mod modtype="replace" hdr="Contact" param="expires">
							<expr>60</expr>
						</mod>
						<mod modtype="replace" hdr="Expires" param="value">
							<expr>60</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="event" />
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<fail/>
							<log level="ERROR" expr="Register was not received prior to timer expiring."/>
						</then>
					</if>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>SUBSCRIBE</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE" />
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
					
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<verify step="4" requirements="REQ19254, RFC2029">
								<eq>
									<msg_ref type="sip">Register.Via.rport</msg_ref>
									<expr>rport</expr>
								</eq>
							</verify>
							<send protocol="sip" msgtype="401-REGISTER" />
						</then>
					</if>
				</response>
				<!-- Transitions for Registered state -->
				<transition to="END" event="TimerExpired" />
				<transition to="Reauthorization" event="REGISTER" />
				<transition to="Registered" event="SUBSCRIBE" />
				<transition to="Registered" event="200-NOTIFY"/>
			</state>
			<state ID="Reauthorization">
				<prelude></prelude>
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event" />
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event" />
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
								to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest />
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed" />
								<verify step="5" requirements="REQ19254, RFC2029">
										<eq>
											<msg_ref type="sip">Register.Via.rport</msg_ref>
											<expr>rport</expr>
										</eq>
								</verify>
							</then>
							<else>
								<generate event="AuthenticateFailed" />
								<send protocol="sip"
									msgtype="503-Register" />
							</else>
						</elseif>
					</if>
					
				</response>
				<transition to="Deregister" event="AuthenticateSucceed" />
				<transition to="END" event="AuthenticateFailed" />
				<transition to="Reauthorization" event="REGISTER" />
			</state>
						
			<!-- Step 7 of NAT_UE_1.1.4 -->
			<state ID="Deregister">
				<prelude once="true">
					<send protocol="sip" msgtype="200-Register"/>
					<sleep time="3000"/>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>PKTC-IETF-MTA-MIB::pktcMtaDevEnabled.0,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<verify step="7" requirements="REQ19285, RFC2029" group="deregister">
						<eq>
							<msg_ref type="sip">Register.Via.rport</msg_ref>
							<expr>rport</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</verify>
				</response>
				<transition to="VerifyRport" event="SNMPResp"/>
				<transition to="WaitSNMPResp" event="REGISTER"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="VerifyRport">
				<response>
					<verify step="7" requirements="REQ19285, RFC2029" group="deregister">
						<eq>
							<msg_ref type="sip">Register.Via.rport</msg_ref>
							<expr>rport</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</verify>
				</response>
				<transition to="END" event="REGISTER"/>
			</state>
			
			<state ID="WaitSNMPResp">
				<transition to="END" event="SNMPResp"/>
			</state>
		</states>
	</fsm>
</pc2xml>
