<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-11 : Correct issue with the script sending two resets. (ghassler 2/17/2009)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)


-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="RST-EDVA 1.1.2" 
	descrip="This is a template for testing UE SIP Subscription" 
	number="RST-EDVA 1.1.2">
	
	<template file="./templates/Proxy.xml" name="Core"/>
	
	<!-- Next we define the each of state machines -->
	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<!-- Next we define all of the network elements -->
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="PCSCF1 SCSCF1 UE1"/>
		
		<!-- All of the states for the test. References to "Step x" from the Default Message Flow - UE Registration (DUT) 
        and UE Subscription (DUT) Sequence Diagram -->
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<var name="UE1Registered">
						<expr>false</expr>
					</var>
					<var name="DUTRegistered">
						<expr>false</expr>
					</var>
					<var name="UE1Auth">
						<expr>false</expr>
					</var>
					<var name="DUTAuth">
						<expr>false</expr>
					</var>
					<start_capture>
						<filter>
							<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">UE0.IP</msg_ref>
						</var_expr>
					</filter>
					</start_capture>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">UE1.CM IP Address</msg_ref>
						</mod>
						<!-- Always use version 2 for a CM reset -->
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">UE1.IP</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="Registration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="Registration">
				<!-- Step 1 from the Default Message Flow - 
					UE Registration (DUT) Sequence Diagram- received REGISTER message-->
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">REGISTER.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">DUT.IP</msg_ref>
							</eq>
							<eq>
								<var_ref name="DUTAuth"/>
								<expr>false</expr>
							</eq>
						</and>
						<then>
							<assign name="DUTAuth">
								<expr>true</expr>
							</assign>
							<send protocol="sip" msgtype="401-REGISTER" />
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">REGISTER.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE1.IP</msg_ref>
								</eq>
								<eq>
									<var_ref name="UE1Auth"/>
									<expr>false</expr>
								</eq>
							</and>
							<then>
								<assign name="UE1Auth">
									<expr>true</expr>
								</assign>
								<send protocol="sip" msgtype="401-REGISTER" target="UE1" destination="UE1"/>
							</then>
						</elseif>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">REGISTER.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE1.IP</msg_ref>
								</eq>
							<and>
								<eq>
									<var_ref name="UE1Registered"/>
									<expr>false</expr>
								</eq>
							<and>
								<eq>
									<var_ref name="UE1Auth"/>
									<expr>true</expr>
								</eq>
								<digest/>
							</and>
							</and>
							</and>
							<then>
								<send protocol="sip" msgtype="200-REGISTER" target="UE1" destination="UE1"/>
							</then>
						</elseif>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">REGISTER.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">DUT.IP</msg_ref>
								</eq>
							<and>
								<eq>
									<var_ref name="DUTRegistered"/>
									<expr>false</expr>
								</eq>
							<and>
								<eq>
									<var_ref name="DUTAuth"/>
									<expr>true</expr>
								</eq>
								<digest/>
							</and>
							</and>
							</and>
							<then>
								<send protocol="sip" msgtype="200-REGISTER"/>
							</then>
						</elseif>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">SUBSCRIBE.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">DUT.IP</msg_ref>
								</eq>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
							</and>
							<then>
								<send protocol="sip" msgtype="200-SUBSCRIBE"/>
								<send protocol="sip" msgtype="NOTIFY"/>
							</then>
						</elseif>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">SUBSCRIBE.SourceAddress.IP</msg_ref>
									<msg_ref type="platform">UE1.IP</msg_ref>
								</eq>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
							</and>
							<then>
								<send protocol="sip" msgtype="200-SUBSCRIBE" target="UE1" destination="UE1"/>
								<send protocol="sip" msgtype="NOTIFY" target="UE1" destination="UE1"/>
							</then>
						</elseif>
						<elseif>
							<eq>
								<msg_ref type="sip">200-NOTIFY.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE1.IP</msg_ref>
							</eq>
							<then>
								<assign name="UE1Registered">
									<expr>true</expr>
								</assign>
							</then>
						</elseif>
						<elseif>
							<eq>
								<msg_ref type="sip">200-NOTIFY.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">DUT.IP</msg_ref>
							</eq>
							<then>
								<assign name="DUTRegistered">
									<expr>true</expr>
								</assign>
							</then>
						</elseif>
					</if>
					<if>
						<and>
							<eq>
								<var_ref name="DUTAuth"/>
								<expr>true</expr>
							</eq>
						<and>
							<eq>
								<var_ref name="UE1Auth"/>
								<expr>true</expr>
							</eq>
						<and>
							<eq>
								<var_ref name="DUTRegistered"/>
								<expr>true</expr>
							</eq>
						<and>
							<eq>
								<var_ref name="UE1Registered"/>
								<expr>true</expr>
							</eq>
							<eq>
								<msg_ref type="sip">Response</msg_ref>
								<expr>200-NOTIFY</expr>
							</eq>
						</and>
						</and>
						</and>
						</and>
						<then>
							<generate event="Branch1Event"/>
							<generate event="Registered" fsm="Core"/>
						</then>
					</if>		
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Registration" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Registration" event="REGISTER"/>
				<transition to="Registration" event="SUBSCRIBE"/>
				<transition to="Registration" event="200-NOTIFY"/>
				<transition to="WaitCall" event="Branch1Event"/>
			</state>
			
			<state ID="WaitCall">
				<transition to="WaitCall" event="Branch1Event"/>
				<transition to="EndCapture" event="SucceedEvent"/>
			</state>
			
			<state ID="EndCapture">
				<prelude>
					<stop_capture/>
					<generate event="SucceedEvent"/>
				</prelude>
				<transition to="END" event="SucceedEvent"/>
			</state>
		</states>
	</fsm>
	
	<remove_from fsm="Core">
		<state ID="Alerting"/>
		<state ID="Connected"/>
	</remove_from>
	<add_to fsm="Core">
		<transition from="OffHook" to="DialToneCheck" event="OffHookComplete"/>
		
		<state ID="DialToneCheck">
			<prelude>
				<send protocol="utility" msgtype="VerifyDialTone"/>
			</prelude>
			<response>
				<verify step="2">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyDialToneComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="Setup" event="VerifyDialToneComplete"/>
		</state>
		<state ID="Alerting" timer="3000">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<send protocol="utility" msgtype="VerifyRing">
							<mod modtype="replace" hdr="voiceport">
								<msg_ref type="platform">Platform.voiceport1</msg_ref>
							</mod>
						</send>
					</then>
					<elseif>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyRingComplete</expr>
						</eq>
						<then>
							<verify step="3">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyRingComplete</expr>
								</eq>
							</verify>
							<send protocol="utility" msgtype="VerifyRingback"/>
						</then>
					</elseif>
					<elseif>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyRingbackComplete</expr>
						</eq>
						<then>
							<verify step="3">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyRingbackComplete</expr>
								</eq>
							</verify>
							<send protocol="utility" msgtype="OffHook">
								<mod modtype="replace" hdr="voiceport">
									<msg_ref type="platform">Platform.voiceport1</msg_ref>
								</mod>
							</send>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Alerting" event="TimerExpired"/>
			<transition to="Alerting" event="OPTIONS"/>
			<transition to="Alerting" event="200-OPTIONS"/>
			<transition to="Alerting" event="PRACK"/>
			<transition to="Alerting" event="200-PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="Alerting" event="200-UPDATE"/>
			<transition to="Alerting" event="xxx-INVITE"/>
			<transition to="Alerting" event="OffHookComplete"/>
			<transition to="Alerting" event="VerifyRingComplete"/>
			<transition to="Alerting" event="VerifyRingbackComplete"/>
			<transition to="Connected" event="ACK"/>
		</state>
		
		<!-- CONNECTED State -->
		<state ID="Connected">
			<prelude>
				<send protocol="utility" msgtype="VerifyVoicePath2Way">
					<mod modtype="replace" hdr="from voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
					<mod modtype="replace" hdr="to voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
					<mod modtype="replace" hdr="voiceExpected">
						<expr>yes</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="4">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyVoicePath2WayComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="Unplug" event="VerifyVoicePath2WayComplete"/>
		</state>
		
		<state ID="Unplug">
			<prelude>
				<log promptUser="true" expr="Remove the AC power from the DUT."/>
				<!--  This event is sent only to prevent the NoResponseTimeout
					from occurring in the Registrar	 -->
				<generate event="Branch1Event" fsm="Registrar"/>
				<sleep time="5000"/>
				<send protocol="utility" msgtype="VerifyVoicePath2Way">
					<mod modtype="replace" hdr="from voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
					<mod modtype="replace" hdr="to voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
					<mod modtype="replace" hdr="voiceExpected">
						<expr>yes</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="5">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyVoicePath2WayComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="PlugIn" event="VerifyVoicePath2WayComplete"/>
		</state>
		
		<state ID="PlugIn">
			<prelude>
				<log promptUser="true" expr="Plug the AC power back into the DUT."/>
				<sleep time="5000"/>
				<send protocol="utility" msgtype="VerifyVoicePath2Way">
					<mod modtype="replace" hdr="from voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
					<mod modtype="replace" hdr="to voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
					<mod modtype="replace" hdr="voiceExpected">
						<expr>yes</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="6">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyVoicePath2WayComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="OnHook" event="VerifyVoicePath2WayComplete"/>
		</state>
		
		<transition from="OnHookUE1" to="OffHook2" event="OnHookComplete"/>
		
		<state ID="OffHook2">
			<prelude>
				<!--  This event is sent only to prevent the NoResponseTimeout
					from occurring in the Registrar	 -->
				<generate event="Branch1Event" fsm="Registrar"/>
				<log promptUser="true" expr="Remove the AC power from the DUT."/>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="Dial2" event="OffHookComplete"/>
		</state>
			
		<state ID="Dial2">
			<prelude>
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<transition to="Setup2" event="DialDigitsComplete"/>
		</state>
			
		<state ID="Setup2">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Setup2" event="INVITE"/>
			<transition to="Alerting2" event="CANCEL"/>
			<transition to="Alerting2" event="xxx-INVITE"/>
			<transition to="Setup2" event="OffHookComplete"/>
		</state>
			
		<state ID="Alerting2" timer="3000">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<send protocol="utility" msgtype="VerifyRing">
							<mod modtype="replace" hdr="voiceport">
								<msg_ref type="platform">Platform.voiceport1</msg_ref>
							</mod>
						</send>
					</then>
					<elseif>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyRingComplete</expr>
						</eq>
						<then>
							<verify step="8">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyRingComplete</expr>
								</eq>
							</verify>
							<send protocol="utility" msgtype="VerifyRingback"/>
						</then>
					</elseif>
					<elseif>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyRingbackComplete</expr>
						</eq>
						<then>
							<verify step="8">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyRingbackComplete</expr>
								</eq>
							</verify>
							<send protocol="utility" msgtype="OffHook">
								<mod modtype="replace" hdr="voiceport">
									<msg_ref type="platform">Platform.voiceport1</msg_ref>
								</mod>
							</send>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Alerting2" event="TimerExpired"/>
			<transition to="Alerting2" event="OPTIONS"/>
			<transition to="Alerting2" event="200-OPTIONS"/>
			<transition to="Alerting2" event="PRACK"/>
			<transition to="Alerting2" event="200-PRACK"/>
			<transition to="Alerting2" event="UPDATE"/>
			<transition to="Alerting2" event="200-UPDATE"/>
			<transition to="Alerting2" event="xxx-INVITE"/>
			<transition to="Alerting2" event="OffHookComplete"/>
			<transition to="Alerting2" event="VerifyRingComplete"/>
			<transition to="Alerting2" event="VerifyRingbackComplete"/>
			<transition to="Connected2" event="ACK"/>
		</state>
		
		<state ID="Connected2">
			<prelude>
				<send protocol="utility" msgtype="VerifyVoicePath2Way">
					<mod modtype="replace" hdr="from voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
					<mod modtype="replace" hdr="to voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
					<mod modtype="replace" hdr="voiceExpected">
						<expr>yes</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="9">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyVoicePath2WayComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="OnHook2" event="VerifyVoicePath2WayComplete"/>
		</state>
		
		<state ID="OnHook2">
			<prelude once="true">
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
				
			</response>
			<transition to="OnHook2" event="OnHookComplete"/>
			<transition to="OnHook2" event="Bye"/>
			<transition to="OnHookUE1-2" event="200-Bye"/>
		</state>
			
		<state ID="OnHookUE1-2">
			<prelude>
				<send protocol="utility" msgtype="OnHook">
					<mod modtype="replace" hdr="voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
				</send>
			</prelude>
			<transition to="WaitBB" event="OnHookComplete"/>
		</state>
		<state ID="WaitBB" timer="30000">
			<prelude>
				<!--  This event is sent only to prevent the NoResponseTimeout
					from occurring in the Registrar	 -->
				<generate event="Branch1Event" fsm="Registrar"/>
			</prelude>
			<transition to="OffHook3" event="TimerExpired"/>
		</state>
		
		<state ID="OffHook3">
			<prelude>
				<!--  This event is sent only to prevent the NoResponseTimeout
					from occurring in the Registrar	 -->
				<generate event="Branch1Event" fsm="Registrar"/>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="Dial3" event="OffHookComplete"/>
		</state>
			
		<state ID="Dial3">
			<prelude>
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<transition to="Setup3" event="DialDigitsComplete"/>
		</state>
			
		<state ID="Setup3">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Setup3" event="INVITE"/>
			<transition to="Alerting3" event="CANCEL"/>
			<transition to="Alerting3" event="xxx-INVITE"/>
			<transition to="Setup3" event="OffHookComplete"/>
		</state>
		
		<state ID="Alerting3" timer="3000">
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<send protocol="utility" msgtype="VerifyRing">
							<mod modtype="replace" hdr="voiceport">
								<msg_ref type="platform">Platform.voiceport1</msg_ref>
							</mod>
						</send>
					</then>
					<elseif>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyRingComplete</expr>
						</eq>
						<then>
							<verify step="11">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyRingComplete</expr>
								</eq>
							</verify>
							<send protocol="utility" msgtype="VerifyRingback"/>
						</then>
					</elseif>
					<elseif>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyRingbackComplete</expr>
						</eq>
						<then>
							<verify step="11">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyRingbackComplete</expr>
								</eq>
							</verify>
							<send protocol="utility" msgtype="OffHook">
								<mod modtype="replace" hdr="voiceport">
									<msg_ref type="platform">Platform.voiceport1</msg_ref>
								</mod>
							</send>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Alerting3" event="TimerExpired"/>
			<transition to="Alerting3" event="OPTIONS"/>
			<transition to="Alerting3" event="200-OPTIONS"/>
			<transition to="Alerting3" event="PRACK"/>
			<transition to="Alerting3" event="200-PRACK"/>
			<transition to="Alerting3" event="UPDATE"/>
			<transition to="Alerting3" event="200-UPDATE"/>
			<transition to="Alerting3" event="xxx-INVITE"/>
			<transition to="Alerting3" event="OffHookComplete"/>
			<transition to="Alerting3" event="VerifyRingComplete"/>
			<transition to="Alerting3" event="VerifyRingbackComplete"/>
			<transition to="Connected3" event="ACK"/>
		</state>
		
		<state ID="Connected3">
			<prelude>
				<send protocol="utility" msgtype="VerifyVoicePath2Way">
					<mod modtype="replace" hdr="from voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
					<mod modtype="replace" hdr="to voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
					<mod modtype="replace" hdr="voiceExpected">
						<expr>yes</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="12">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyVoicePath2WayComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="OnHook3" event="VerifyVoicePath2WayComplete"/>
		</state>
		
		<state ID="OnHook3">
			<prelude once="true">
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
						<eq>
							<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</eq>
					</or>
					<then>
						<proxy target="UE0"/>
					</then>
					<elseif>
						<or>
							<eq>
								<msg_ref type="sip">Request.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">Response.SourceAddress.IP</msg_ref>
								<msg_ref type="platform">UE0.IP</msg_ref>
							</eq>
						</or>
						<then>
							<proxy target="UE1"/>
						</then>
					</elseif>
				</if>
				
			</response>
			<transition to="OnHook3" event="OnHookComplete"/>
			<transition to="OnHook3" event="Bye"/>
			<transition to="OnHookUE1-3" event="200-Bye"/>
		</state>
			
		<state ID="OnHookUE1-3">
			<prelude>
				<send protocol="utility" msgtype="OnHook">
					<mod modtype="replace" hdr="voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
				</send>
			</prelude>
			<transition to="CallComplete" event="OnHookComplete"/>
		</state>
		<state ID="CallComplete" ES="true">
			<prelude>
				<generate event="SucceedEvent" fsm="Registrar"/>
			</prelude>
		</state>
	</add_to>
</pc2xml>
