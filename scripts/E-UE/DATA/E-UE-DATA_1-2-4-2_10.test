#//********************************************************************
#// Filename: E-UE-DATA_1-2-4-2_10.test
#// Author: Matthew Forbes
#// Creation Date: 11/10/2008
#// Modified by:
#//
#//
#//********************************************************************
#// Description:
#//    TC1598 Test Case E-UE-DATA_1-2-4-2_10 pktcDevEvLogCorrelationId Content Verification
#//
#//
#// Objective:
#//    To verify the content of the MIB object pktcDevEvLogCorrelationId
#//
#// PacketCable DUT:
#//    MTA
#//
#// Test Steps:
#//    - Initial configuration
#//    - Start sniffer
#//    - TFTP GET MTA config file
#//    - TFTP PUT and SNMP RESET
#//    - Check Provisioning state
#//    - Perform mib check
#//    - Stop sniffer
#//    - Delete MTA config file
#//    
#//
#// Notes:
#//    - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-4-2_10.test 7769 2011-01-25 18:13:14Z botte $ }

set test_case E-UE-DATA_1-2-4-2_10-
set step_num 1

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
    
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $PROV_DHCP1_IP"
    StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Clear pktcDevEventLogTable" {
    LogMsg "Clear pktcDevEventLogTable"
    set val [SNMP_SET 1.3.6.1.4.1.4491.2.2.3.1.1.0 bits 0 $MTA_IP]
} {IsEqual $val 0}


DoStep ${test_case}${step_num} "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]     
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {    
        set search_index [lsearch $text_list $pctext]       
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}   
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index] 
    if {$index == ""} { set command FAIL_STEP } 
} {eval $command}

DoStep ${test_case}[incr step_num] "GET pktcDevEvLogCorrelationId Value" {
    set val1 [SNMP_GET ${oid_pktcDevEvLogCorrelationId}.$index $MTA_IP 20]
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcDevEvLogCorrelationId Content Verification" {
    set type Unsigned32
    set default_value "-range 0-4294967295"  ;# Range 0 - 2^32-1  
} {SnmpROVerify ${oid_pktcDevEvLogCorrelationId}.$index $MTA_IP $type $default_value 103}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "GET pktcDevEvLogCorrelationId Value" {
    set val2 [SNMP_GET ${oid_pktcDevEvLogCorrelationId}.$index $MTA_IP 20]
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################

DoStep ${test_case}[incr step_num] "Parse all data into database" {
    # Initial PARSER TOOL
    Init_PART
    #set ::PART_SHOW_DB_WRITE 1
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE    
############################## Below will not work on some CMTSs ###############################
    
    ### Find MTA gateway IP      
    # set MTA_GATEWAY_IP [regsub -- {[^.]+$} $MTA_IP 1]
        
    ### [ParseFile $fileName { { p pType {op} {sMac} {sIP} {sPo} {dMac} {dIP} {dPo} } }]
    # set DHCP_sIP	"{DHCP {} {} {} {$MTA_GATEWAY_IP} {} {} {} {} }"
    # set DHCP_dIP	"{DHCP {} {} {} {} {} {} {$MTA_GATEWAY_IP} {} }"    
 
    # set msgID_MTA [ParseFile $PARSERFILE "$DHCP_sIP $DHCP_dIP" ]
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP"]

} { 
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep ${test_case}[incr step_num] "Analyze DHCP Option 43 suboption 32 = pktcDevEvLogCorrelationId " {   

    # Find CM MAC with colons
    # set MTA_MAC_COL [AddColMac $MTA_MAC]
    set msgStr "Verify MTA DHCP Response: Option 43 Suboption 32 Correlation Id"
    set option43_32_val 0
    LogMsg "--- $msgStr ---"

    set option43_32_val [GetValue $msgID_MTA "INANY DHCP REQUEST OPTION43SUBOPTION32" "IS" ".*"]    

    regsub -all \" $option43_32_val "" option43_32_val
    if {$option43_32_val == $val1 && $option43_32_val == $val2} {
        set command PASS_STEP
    } else  {
        set command FAIL_STEP
    }
} {eval $command}

Cleanup
