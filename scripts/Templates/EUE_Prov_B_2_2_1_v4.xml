<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################

 Change History: (Author & Date)

-->
<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" name="EUE Prov B.2.2.1" 
	descrip="This implements the common procedures for appendix B.2.2.1	of the EUE Prov ATP." 
	number="EUE Prov B.2.2.1">

	<template file="./templates/EUE_Prov_B_2_1_x.xml" name="SecureUE"/>
	<add_to fsm="SecureUE">
	
		<states initialstate="Reboot_KDCTicketReset">
			<state ID="Reboot_KDCTicketReset" timer="120000">
				<!-- First we need to power cycle the UE to ensure the UE has downloaded
				     the policy and configuration for Secure mode. -->
				<prelude once="true" >
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
						</mod>
						<!-- Always use version 2 for a CM reset -->
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot_KDCTicketReset" event="SNMPResp"/>
				<transition to="Reboot_KDCTicketReset" event="REGISTER"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="KerberosTicketReset" event="TimerExpired"/>
			</state>
	
		<state ID="KerberosTicketReset" timer="60000">
			<!-- This is Secure Flow -> DUT's Kerberos ticket reset is required. -->
			<prelude once="true" >
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
							<expr>varBind 1 1 3 \r\n ][ , </expr>	
							<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetKrbTickets.0,OCTET-STRING,0xC0][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.IP</msg_ref>
					</mod>
						<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<transition to="Reboot" event="SNMPResp"/>
			<transition to="Reboot" event="SNMPRespFailure"/>
		</state>


		<!-- Test the eCM provisioning; have each of the v4 or v6 states create a
			 new Branch event as they are exiting and go to a state to test for step 3. -->
		<transition from="DHCPv4 Server" to="CMProvisioned" event="SNMPResp"/>
		<transition from="DHCPv6 Server" to="CMProvisioned" event="SNMPResp"/>

		
		<state ID="DHCPv4 Server" sub="postlude">
			<generate event="Branch1Event"/>
		</state>
		<state ID="DHCPv6 Server" sub="postlude">
			<generate event="Branch2Event"/>
		</state>
			
		<state ID="CMProvisioned">
			<!--  We should be processing the Branch1Event or Branch2Event from 
				the operations added above -->
			<prelude>

				<parse_capture name="eUE_DHCP">
					<parser_filter protocol="bootp" clientMAC="DUT.MAC Address"/>
				</parse_capture>
				<parse_capture name="eUE_DHCPv6">
					<parser_filter protocol="dhcpv6" clientMAC="DUT.MAC Address"/>
				</parse_capture>
				<parse_capture name="eUE_Prov">
					<parser_filter ip="DUT.IP"/>
				</parse_capture>
			</prelude>
			<response>
				<verify step="2 3">
					<or>
						<or>
							<eq>
								<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-1-8-0.int.show</capture_ref>
								<expr>1</expr>
							</eq>
							<eq>
								<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.RFC1213-MIB::mib-2-140-1-1-8-0.int.show</capture_ref>
								<expr>1</expr>
							</eq>	
					
						</or>
						<or>
							<eq>
								<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-1-8-0.int.show</capture_ref>
								<expr>1</expr>
							</eq>
							<eq>
								<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.RFC1213-MIB::mib-2-140-1-1-8-0.int.show</capture_ref>
								<expr>1</expr>
							</eq>
						</or>
					</or>
				</verify>	
			</response>
			<transition to="IP4 Provision" event="Branch1Event"/>
			<transition to="IP6 Provision" event="Branch2Event"/>
		</state>

		<state ID="IP4 Provision">
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.IP</msg_ref>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<!--  The first three tests are only here to provide a matching group test for
					tests that occur in the IPv6 provisioning -->
				<!--  We need a matching group verify for Local-link -->
				<verify step="5" group="Local-link">
					<gt>
						<capture_ref type="bootp" name="eUE_DHCP">Discover.num</capture_ref>
						<expr>0</expr>
					</gt>
				</verify>
				
				<!--  We need a matching group verify for No Duplicate Address -->
				<verify step="5" group="No Duplicate Address">
					<null>
						<capture_ref type="dns" name="eUE_Prov">Neighbor Solicitation.num</capture_ref>
					</null>
				</verify>
				<!--  We need a matching group verify for Router Solicit -->
				<verify step="5" group="Router Solicit">
					<null>
						<capture_ref type="dns" name="eUE_Prov">Router Solicitation.num</capture_ref>
					</null>
				</verify>
				
				<verify step="5" group="eUE after eCM">
					<and>
						<lt>
							<capture_ref type="bootp" name="eCM_V4">ACK.num</capture_ref>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.num</capture_ref>
						</lt>
					<and>
						<startsWith>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option60.vendor_class_id.show</capture_ref>
							<expr>pktc2.0:</expr>
						</startsWith>
						
					<and>
						<contains>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option60.suboption1.show</capture_ref>
							<expr>PacketCable 2.0</expr>
						</contains>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option55.suboption6</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option55.suboption7</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option55.suboption12</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option55.suboption15</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option55.suboption122</capture_ref>
						</notnull>
					
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option43</capture_ref>
						</notnull>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
				</verify>

				<verify step="5" group="Device Type">
					<or>
						<eq>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option43.suboption2.device_type.show</capture_ref>
							<expr>EDVA</expr>
						</eq>
						<eq>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.Option43.suboption2.device_type.show</capture_ref>
							<expr>E-UE</expr>
						</eq>
					</or>
				</verify>
				
				<verify step="6" group="MACAddr">
					<eq ignoreCase="true">
						<capture_ref type="bootp" name="eUE_DHCP">Discover.mac_addr</capture_ref>
						<msg_ref type="platform">DUT.MAC Address</msg_ref>
					</eq>
				</verify>
				
				<verify step="7" group="Settings">
					<and>
						<lt>
							<capture_ref type="bootp" name="eUE_DHCP">Discover.num</capture_ref>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.num</capture_ref>
						</lt>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option122.suboption3</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option122.suboption6</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option6</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option7</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option12</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option15</capture_ref>
						</notnull>	
					<and>
							<contains>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option12.hostname.show</capture_ref>
							<msg_ref type="platform">DUT.Host Name</msg_ref>
						</contains>	
						<contains>
							<capture_ref type="bootp" name="eUE_DHCP">Offer.Option15.domain_name.show</capture_ref>
							<msg_ref type="platform">DUT.domain</msg_ref>
						</contains>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
				</verify>	
				
				<verify step="8" group="AddrReq">
					<and>
						<eq>
							<capture_ref type="bootp" name="eCM_V4">Offer.ip.src_host.show</capture_ref>
							<capture_ref type="bootp" name="eUE_DHCP">Request.ip.dst_host.show</capture_ref>
						</eq>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Request.Option55.suboption6</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Request.Option55.suboption7</capture_ref>
						</notnull>	
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Request.Option55.suboption12</capture_ref>
						</notnull>	
					<and>
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Request.Option55.suboption15</capture_ref>
						</notnull>	
						<notnull>
							<capture_ref type="bootp" name="eUE_DHCP">Request.Option43</capture_ref>
						</notnull>
					</and>
					</and>
					</and>
					</and>
					</and>
				</verify>
				
				<verify step="9" group="AddrResp">	
					<and>
						<lt>
							<capture_ref type="bootp" name="eUE_DHCP">Request.num</capture_ref>
							<capture_ref type="bootp" name="eUE_DHCP">ACK.num</capture_ref>
						</lt>
					<and>
						<contains>
							<capture_ref type="bootp" name="eUE_DHCP">ACK.Option12.hostname.show</capture_ref>
							<msg_ref type="platform">DUT.Host Name</msg_ref>
						</contains>	
						<contains>
							<capture_ref type="bootp" name="eUE_DHCP">ACK.Option15.domain_name.show</capture_ref>
							<msg_ref type="platform">DUT.domain</msg_ref>
						</contains>
					</and>
					</and>
				</verify>

			<verify step="10" group="Kerberos query">
			    <and>
				<contains>
					<capture_ref type="bootp" name="eUE_DHCP">ACK.Option122.suboption6.show</capture_ref>
					<msg_ref type="platform">DUT.Kerberos Realm</msg_ref>
				</contains>
			    <and>
				<eq>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Query.qry.name.show</capture_ref>
					<msg_ref type="platform">DUT.Kerberos DNS Query</msg_ref>
				</eq>
				<lt>
					<capture_ref type="bootp" name="eUE_DHCP" msg_instance="last">ACK.num</capture_ref>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="last">Response.num</capture_ref>
				</lt>
			    </and>
			    </and>
			</verify>
                
			<!--  Step 11 of B.2.2.1 for IPv4-->
			<verify step="11" group="Kerberos response" >
				<and>
				   <contains>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.resp.Target.show</capture_ref>
					<msg_ref type="platform">DUT.KDC FQDN</msg_ref>
				    </contains>
				<lt>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Query.num</capture_ref>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
				</lt>
			     </and>
			</verify>
				
			<!--  Step 12 & 13 of B.2.2.1 for IPv4-->
			<verify step="12 13 " group="Kerperos IP">
				<and>
				   <contains>
				       <capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.addl.addr.show</capture_ref>
				       <msg_ref type="platform">DUT.KDC IP Address</msg_ref>
				    </contains>
				<lt>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Query.num</capture_ref>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
				</lt>
			     </and>
			</verify>
                
			<!--  Step 14 of B.2.2.1 for IPv4-->
			<verify step="14" group="AS request">
			    <and>
				<eq>
					<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.ip.dst.show</capture_ref>
					<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
				</eq>
					<lt>
					<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
					<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.num</capture_ref>
				</lt>
			    </and>
			</verify>             
  
  			<!--  Step 15 of B.2.2.1 for IPv4-->

			<verify step="15" group="AS response">
				<!-- Wireshark doesn't recognize the AS-REP. We will ignore checking on AS-REP for now -->
				<!--lt>
				<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.num</capture_ref>
				<capture_ref type="kerberos" name="eUE_Prov">AS-REP.num</capture_ref>
				</lt-->
				<notnull>
					<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.num</capture_ref>
				</notnull>
			</verify>
  
  			<!--  Step 17 of B.2.2.1 for IPv4-->
			<!-- Wireshark doesn't recognize the AS-REP. We will ignore checking on AS-REP for now -->
  			<!--verify step="17" group="TGS request">
  				<or>
  					<eq ignoreCase="true">
  						<msg_ref type="platform">DUT.TGT Supported</msg_ref>
  						<expr>false</expr>
  					</eq>
  					<and>
						<lt>
							<capture_ref type="kerberos" name="eUE_Prov">AS-REP.num</capture_ref>
							<capture_ref type="kerberos" name="eUE_Prov">TGS-REQ.num</capture_ref>
						</lt>
						<eq>
							<capture_ref type="kerberos" name="eUE_Prov">TGS REQ.ip.dst.show</capture_ref>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
						</eq>
					</and>
				</or>
			</verify-->
                
			<!--  Step 18 of B.2.2.1 for IPv4-->
			<!-- Wireshark doesn't recognize the AS-REP. We will ignore checking on AS-REP for now -->
			<!--verify step="18" group="TGS response">
				<or>
					<eq ignoreCase="true">
						<msg_ref type="platform">DUT.TGT Supported</msg_ref>
						<expr>false</expr>
					</eq>
					<lt>
						<capture_ref type="kerberos" name="eUE_Prov">TGS REQ.num</capture_ref>
						<capture_ref type="kerberos" name="eUE_Prov">TGS REP.num</capture_ref>
					</lt>
				</or>
			</verify-->
                
			<!--  Step 19 of B.2.2.1 for IPv4-->
  			<verify step="19" group="AP request">
				<and>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.kmmid.value</capture_ref>
						<expr>02</expr>
					</eq>
				<and>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.doi.value</capture_ref>
						<expr>02</expr>
					</eq>
				<and>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.Version.value</capture_ref>
						<expr>10</expr>
					</eq>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.asd.snmp_usm_username.show</capture_ref>
						<msg_ref type="platform">DUT.USM User Name</msg_ref>
					</eq>
				</and>
				</and>
				</and>
			</verify>
                
			<!--  Step 20 of B.2.2.1 for IPv4-->
  			<verify step="20" group="AP response">
				<and>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.kmmid.value</capture_ref>
						<expr>02</expr>
					</eq>
				<and>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.doi.value</capture_ref>
						<expr>02</expr>
					</eq>
				<and>
					<eq>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.Version.value</capture_ref>
						<expr>10</expr>
					</eq>
					<lt>
						<capture_ref type="pktc" name="eUE_Prov">AP-REQ.num</capture_ref>
						<capture_ref type="pktc" name="eUE_Prov">AP-REP.num</capture_ref>
					</lt>
				</and>
				</and>
				</and>
			</verify>
                
			<!--  Step 21 of B.2.2.1 for IPv4-->
			<var name="bootr">
				<var_expr>
					<expr>BOOTR: </expr>
					<capture_ref type="bootp" name="eUE_DHCP">Discover.Option43.suboption7.boot_rom_version.show</capture_ref>
				</var_expr>
			</var>
  			<verify step="21" group="Check Inform">
                		<and>
					<or>
		            	    	<contains>								
		                			<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-1-1-0.octets.value</capture_ref>
	                				<var_ref name="bootr"/>
						</contains>
						<contains>
		                			<capture_ref type="snmp" name="eUE_Prov">Inform Request.SNMPv2-MIB::sysDescr-0.sysDescr.show</capture_ref>
		                			<var_ref name="bootr"/>
			          		</contains>
					</or>
				<and>
					<or>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-1-3-0.octets.value</capture_ref>
						</notnull>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.RFC1213-MIB::mib-2-140-1-3-3-0.g32.show</capture_ref>
						</notnull>	
					</or>
				<and>
					<or>
	      		          	<startsWith>
	      		          		<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-1-7-0.octets.value</capture_ref>
	            		    		<expr>pktc2.0:05</expr>
						</startsWith>
						<startsWith>
	                				<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Inform Request.RFC1213-MIB::mib-2-140-1-1-7-0.octets.value</capture_ref>
	                				<expr>pktc2.0:05</expr>
	                			</startsWith>
					</or>
				<and>		
					<or>
						<eq ignoreCase="true">
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-2-2-1-6-1.octets.value</capture_ref>
							<msg_ref type="platform">DUT.MAC Address</msg_ref>
						</eq>
						<eq ignoreCase="true">
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.IF-MIB::ifPhysAddress-1.ifPhysAddress.octets.value</capture_ref>
							<msg_ref type="platform">DUT.MAC Address</msg_ref>
						</eq>
					</or>
					<or>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.1-3-6-1-2-1-140-1-3-3-0.g32.show</capture_ref>
						</notnull>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-3-3-0.g32.show</capture_ref>
						</notnull>	
					</or>
				</and>
				</and>
				</and>
				</and>
			</verify>
                
			<!--  Step 22 of B.2.2.1 for IPv4-->
			<verify step="22" group="Inform Response">
				<eq>
					<capture_ref type="snmp" name="eUE_Prov">Get Response.msgData.plaintext.data.get_response.error_index.show</capture_ref>
					<expr>0</expr>
				</eq>
			</verify>
                
			<!--  Step 23 of B.2.2.1 for IPv4-->
			<verify step="23" group="SNMP Server sends Set or Get">
				<or>
					<eq>
						<capture_ref type="snmp" name="eUE_Prov">Set Request.ip.src.show</capture_ref>
						<msg_ref type="platform">Platform.SNMP Server IP</msg_ref>
					</eq>
					<eq>
						<capture_ref type="snmp" name="eUE_Prov">Get Request.ip.src.show</capture_ref>
						<msg_ref type="platform">Platform.SNMP Server IP</msg_ref>
					</eq>
				</or>
			</verify>
                
			<!--  Step 24, 25 & 26 of B.2.2.1 for IPv4-->
			<var name="tftp_ip">
				<var_expr>
					<expr>tftp://</expr>
					<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
					<expr>/</expr>
					<msg_ref type="platform">DUT.SC File</msg_ref>
				</var_expr>
			</var>
  				
			<var name="tftp_fqdn">
				<var_expr>
					<expr>tftp://</expr>
					<msg_ref type="platform">DUT.TFTP FQDN</msg_ref>
					<expr>/</expr>
					<msg_ref type="platform">DUT.SC File</msg_ref>
				</var_expr>
			</var>
				
			<verify step="24" group="Set after Get">
				<or>
					<null>
						<capture_ref type="snmp" name="eUE_Prov">Get Response.num</capture_ref>
					</null>
					<lt>
						<capture_ref type="snmp" name="eUE_Prov">Get Response.num</capture_ref>
						<capture_ref type="snmp" name="eUE_Prov">Set Request.num</capture_ref>
					</lt>
				</or>
			</verify>
			
			<if>
				<and>
					<notnull>
						<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
					</notnull>
					<contains>
						<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
						<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
					</contains>
				</and>
				<then>
					<!-- Step 25 & 26 are only relevant when the TFTP server is using a FQDN instead of IP -->
					<verify step="24 25 26" group="TFTP File">
						<eq>
							<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
							<var_ref name="tftp_ip"/>
						</eq>
					</verify>
                   	</then>
                	<else>  					
		  		<verify step="24 25 26" group="TFTP File">
		                	<and>
						<or>
							<eq>
		                		<capture_ref type="snmp" name="eUE_Prov" msg_instance="last" convertTo="string">Set Request.msgData.plaintext.data.set_request.variable_bindings.1-3-6-1-2-1-140-1-2-9-0.octets</capture_ref>
		                		<var_ref name="tftp_fqdn"/>
							</eq>
							<eq>
								<capture_ref type="snmp" name="eUE_Prov" msg_instance="last" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
								<var_ref name="tftp_fqdn"/>
							</eq>
						</or>
					<and>
						<eq>
							<capture_ref type="dns" name="eUE_Prov" msg_instance="last" hdr_instance="any">Query.Queries.qry.name.show</capture_ref>
							<msg_ref type="platform">DUT.TFTP FQDN</msg_ref>
						</eq>
						<eq>
							<capture_ref type="dns" name="eUE_Prov" msg_instance="last" hdr_instance="any">Response.Answers.resp.addr.show</capture_ref>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</eq>
					</and>
					</and>
				</verify>
                	</else>
                </if>
    
			<!-- Step 27 of B.2.2.3 for IPv4 -->
			<verify step="27" group="TFTP Read">
				<eq>
					<capture_ref type="tftp" name="eUE_Prov">Read Request.source_file.show</capture_ref>
					<msg_ref type="platform">DUT.SC File</msg_ref>
				</eq>
			</verify>
	            
			<!-- Step 28 of B.2.2.3 for IPv4 -->
			<verify step="28" group="TFTP Completes">
				<lt>
					<capture_ref type="tftp" name="eUE_Prov">Read Request.num</capture_ref>
					<capture_ref type="tftp" name="eUE_Prov">Data Packet.num</capture_ref>
				</lt>
			</verify>
	            
			<!-- Step 29 of B.2.2.3 for IPv4 -->
			<verify step="29" group="Syslog">
				<and>
					<contains>
						<capture_ref type="syslog" msg_instance="last" name="eUE_Prov">syslog.msg.show</capture_ref>
						<expr>Provisioning Complete</expr>
					</contains>
				<and>
					<contains>
						<capture_ref type="bootp" name="eUE_DHCP">ACK.Option7.log_server.show</capture_ref>
						<msg_ref type="platform">DUT.Syslog IP</msg_ref>
					</contains>
					<eq>
						<capture_ref type="syslog" name="eUE_Prov">syslog.ip.dst.show</capture_ref>
						<msg_ref type="platform">DUT.Syslog IP</msg_ref>
					</eq>
				</and>
				</and>
			</verify>
	            
			<!-- Step 30 of B.2.2.1 for IPv4 -->
			<verify step="30" group="Inform">
				<and>
					<or>
						<eq ignoreCase="true">
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-2-2-1-6-1.octets.value</capture_ref>
							<msg_ref type="platform">DUT.MAC Address</msg_ref>
						</eq>
						<eq ignoreCase="true">
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.IF-MIB::ifPhysAddress-1.ifPhysAddress.value</capture_ref>
							<msg_ref type="platform">DUT.MAC Address</msg_ref>
						</eq>
					</or>						
				<and>
					<or>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-3-3-0.g32</capture_ref>
						</notnull>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.RFC1213-MIB::mib-2-140-1-3-3-0.g32</capture_ref>
						</notnull>	
					</or>
				<and>
					<or>
						<eq>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.msgData.plaintext.data.informRequest.variable_bindings.1-3-6-1-2-1-140-1-1-8-0.int.show</capture_ref>
							<expr>1</expr>
						</eq>
						<eq>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.RFC1213-MIB::mib-2-140-1-1-8-0.int.show</capture_ref>
							<expr>1</expr>
						</eq>
					</or>
					<lt>
						<capture_ref type="tftp" name="eUE_Prov" msg_instance="last">Acknowledgement.num</capture_ref>
						<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.num</capture_ref>	
					</lt>
				</and>
				</and>
				</and>
			</verify>
	            
			<!-- Step 31 of B.2.2.1 for IPv4 -->
			<verify step="31" group="Prov State">
				<eq>
					<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
					<expr>1</expr>
				</eq>
			</verify>
                
			<!-- Step 32 of B.2.2.3 for IPv4 -->
			<verify step="32" group="Different IPs">
				<neq>
					<capture_ref type="bootp" name="eCM_V4">ACK.ip.your.show</capture_ref>
					<capture_ref type="bootp" name="eUE_DHCP">ACK.ip.your.show</capture_ref>
				</neq>
			</verify>
				
			</response>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	      
        
		<state ID="IP6 Provision">
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.IP</msg_ref>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<!--  TODO: Figure how to test steps 5-7 -->
				<!--  Step 5 of B.2.2.2 for IPv6-->
				<verify step="5" group="Local-link">
					<eq>
							<expr>0</expr>
							<expr>1</expr>
						</eq>
				</verify>
				
				<!--  Step 6 of B.2.2.2 for IPv6-->
				<verify step="6" group="No Duplicate Address">
					<and>
						<notnull>
							<capture_ref type="dns" name="eUE_Prov">Neighbor Solicitation.num</capture_ref>
						</notnull>
						<null>
							<capture_ref type="dns" name="eUE_Prov">Neighbor Advertisement.num</capture_ref>
						</null>
					</and>
				</verify>
				
				<!--  Step 7 of B.2.2.2 for IPv6-->
				<verify step="7" group="Router Solicit">
					<and>
						<notnull>
							<capture_ref type="dns" name="eUE_Prov">Router Solicitation.num</capture_ref>
						</notnull>
						<null>
							<capture_ref type="dns" name="eUE_Prov">Router Advertisement.num</capture_ref>
						</null>
					</and>
				</verify>
				
				<!--  Step 8 of B.2.2.2 for IPv6-->
				<verify step="8" group="eUE after eCM">
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option1</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option3</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option6.suboption39</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option6.suboption23</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option16</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption35</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption36</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption1</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption32</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption33</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption34</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.suboption2171</capture_ref>
						</notnull>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Vendor-specific Information.enterprise-number.show</capture_ref>
							<expr>4491</expr>
						</contains>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Vendor-specific Information.enterprise-number.show</capture_ref>
							<expr>pktc2.0.</expr>
						</contains>
						<contains>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.enterprise-number.show</capture_ref>
							<expr>4491</expr>
						</contains>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
				</verify>
				
				<!--  Step 8 of B.2.2.2 for IPv6-->
				<verify step="8" group="MACAddr">
					<eq ignoreCase="true">
						<capture_ref type="bootp" name="eUE_DHCPv6">Solicit.mac_addr</capture_ref>
						<msg_ref type="platform">DUT.MAC Address</msg_ref>
					</eq>
				</verify>
				
				<!--  Step 9 of B.2.2.2 for IPv6-->
				<verify step="9" group="Settings">
					<lt>
						<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.num</capture_ref>
						<capture_ref type="dhcpv6" name="eUE_DHCPv6">Advertise.num</capture_ref>
					</lt>
				</verify>
				
				<!--  Step 10 of B.2.2.2 for IPv6-->
				<verify step="10" group="AddrReq">
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option1</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option3</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option6.suboption39</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option6.suboption23</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option16</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption35</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption36</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption1</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption32</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption33</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption34</capture_ref>
						</notnull>
					<and>
						<notnull>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.Option17.suboption2171</capture_ref>
						</notnull>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Vendor-specific Information.enterprise-number.show</capture_ref>
							<expr>4491</expr>
						</contains>
					<and>
						<contains>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Vendor-specific Information.enterprise-number.show</capture_ref>
							<expr>pktc2.0.</expr>
						</contains>
						<contains>
							<capture_ref type="dhcpv6" name="eUE_DHCPv6">Solicit.Option17.enterprise-number.show</capture_ref>
							<expr>4491</expr>
						</contains>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
					</and>
				</verify>
				
				<!--  Step 11 of B.2.2.2 for IPv6-->
				<verify step="11" group="AddrResp">
					<lt>
						<capture_ref type="dhcpv6" name="eUE_DHCPv6">Request.num</capture_ref>
						<capture_ref type="dhcpv6" name="eUE_DHCPv6">Reply.num</capture_ref>
					</lt>
				</verify>
				
				<!--  Step 12 of B.2.2.2 for IPv6-->
                <verify step="12" group="Kerberos query">
                    <and>
                        <contains>
                        	<capture_ref type="dhcpv6" name="eUE_DHCPv6">ACK.Option122.suboption6.show</capture_ref>
                        	<msg_ref type="platform">DUT.Kerberos Realm</msg_ref>
                        </contains>
                    <and>
                        <eq>
	                        <capture_ref type="dns" name="eUE_Prov" msg_instance="2">Query.qry.name.show</capture_ref>
	                        <msg_ref type="platform">DUT.Kerberos DNS Query</msg_ref>
                        </eq>
                    <and>
                       	<lt>
                     		<capture_ref type="dhcpv6" name="eUE_DHCPv6" msg_instance="2">Reply.num</capture_ref>
                     		<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
                     	</lt>
                     	<!-- TODO Need to now what the DAD test is in this step -->
                     	<eq>
                     		<expr>0</expr>
                     		<expr>1</expr>
                     	</eq>
                    </and>
                    </and>
                    </and>
                </verify>
				
				<!--  Step 13 of B.2.2.1 for IPv6-->
                <verify step="13" group="Kerberos response" >
                	<and>
	                   	<contains>
	                        <capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.resp.element.Target.show</capture_ref>
	                        <msg_ref type="platform">DUT.KDC FQDN</msg_ref>
	                    </contains>
                    	<lt>
                     		<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Query.num</capture_ref>
                     		<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
                     	</lt>
                     </and>
                </verify>
				
				<!--  Step 14 & 15 of B.2.2.2 for IPv4-->
                <verify step="14 15 " group="Kerperos IP">
	            	<and>
	            	   <contains>
	                       <capture_ref type="dns" name="eUE" msg_instance="2">Response.addl.element.Addr.show</capture_ref>
	                       <msg_ref type="platform">DUT.KDC IP Address</msg_ref>
	                    </contains>
                   		<lt>
                     		<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Query.num</capture_ref>
                     		<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
                     	</lt>
                     </and>
                </verify>
                
                <!--  Step 16 of B.2.2.2 for IPv6 executes steps 14-31 of Common Procedure B.2.2.1  -->
                <!--  From step 14 of B.2.2.1 for IPv4-->
                <verify step="16" group="AS request">
                    <and>
                    	<eq>
                    		<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.ip.dst.show</capture_ref>
                    		<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
                    	</eq>
                   		<lt>
                       		<capture_ref type="dns" name="eUE_Prov" msg_instance="2">Response.num</capture_ref>
                       		<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.num</capture_ref>
                    	</lt>
                    </and>
				</verify>             
  
  				<!--  From step 15 of B.2.2.1 for IPv4-->
                <verify step="16" group="AS response">
                  	<lt>
                      	<capture_ref type="kerberos" name="eUE_Prov">AS-REQ.num</capture_ref>
                      	<capture_ref type="kerberos" name="eUE_Prov">AS-REP.num</capture_ref>
                   	</lt>
                </verify>
  
  				<!--  From step 17 of B.2.2.1 for IPv4-->
  				<verify step="16" group="TGS request">
  					<or>
  						<eq ignoreCase="true">
  							<msg_ref type="platform">DUT.TGT Supported</msg_ref>
  							<expr>false</expr>
  						</eq>
  					<and>
  						<lt>
	                      	<capture_ref type="kerberos" name="eUE_Prov">AS-REP.num</capture_ref>
	                      	<capture_ref type="kerberos" name="eUE_Prov">TGS-REQ.num</capture_ref>
                   		</lt>
                   		<eq>
                    		<capture_ref type="kerberos" name="eUE_Prov">TGS REQ.ip.dst.show</capture_ref>
                    		<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
                    	</eq>
                    </and>
                	</or>
                </verify>
                
                <!--  From step 18 of B.2.2.1 for IPv4-->
  				<verify step="16" group="TGS response">
  					<or>
  						<eq ignoreCase="true">
  							<msg_ref type="platform">DUT.TGT Supported</msg_ref>
  							<expr>false</expr>
  						</eq>
  						<lt>
	                      	<capture_ref type="kerberos" name="eUE_Prov">TGS REQ.num</capture_ref>
	                      	<capture_ref type="kerberos" name="eUE_Prov">TGS REP.num</capture_ref>
                   		</lt>
	               	</or>
                </verify>
                
                <!--  From step 19 of B.2.2.1 for IPv4-->
  				<verify step="16" group="AP request">
  					<and>
  						<eq>
  							<capture_ref type="pktc" name="eUE_Prov">AP-REQ.kmmid.value</capture_ref>
  							<expr>02</expr>
  						</eq>
  					<and>
  						<eq>
  							<capture_ref type="pktc" name="eUE_Prov">AP-REQ.doi.value</capture_ref>
  							<expr>02</expr>
  						</eq>
  					<and>
  						<eq>
  							<capture_ref type="pktc" name="eUE_Prov">AP-REQ.Version.value</capture_ref>
  							<expr>10</expr>
  						</eq>
  						<eq>
	                      	<capture_ref type="pktc" name="eUE_Prov">AP-REQ.asd.asd.snmp_usm_username.show</capture_ref>
	                      	<msg_ref type="platform">DUT.USG User Name</msg_ref>
                   		</eq>
	               	</and>
	               	</and>
	               	</and>
                </verify>
                
                <!--  From step 20 of B.2.2.1 for IPv4-->
  				<verify step="16" group="AP response">
  					<and>
  						<eq>
  							<capture_ref type="pktc" name="eUE_Prov">AP-REQ.kmmid.value</capture_ref>
  							<expr>03</expr>
  						</eq>
  					<and>
  						<eq>
  							<capture_ref type="pktc" name="eUE_Prov">AP-REQ.doi.value</capture_ref>
  							<expr>02</expr>
  						</eq>
  					<and>
  						<eq>
  							<capture_ref type="pktc" name="eUE_Prov">AP-REQ.Version.value</capture_ref>
  							<expr>10</expr>
  						</eq>
  						<lt>
	                      	<capture_ref type="kerberos" name="eUE_Prov">AP-REQ.num</capture_ref>
	                      	<capture_ref type="kerberos" name="eUE_Prov">AP-REP.num</capture_ref>
                   		</lt>
	               	</and>
	               	</and>
	               	</and>
                </verify>
                
                <!--  From step 21 of B.2.2.1 for IPv4-->
  				<var name="bootr">
  					<var_expr>
  						<expr>BOOTR: </expr>
  						<capture_ref type="bootp" name="eUE_DHCP" substring="32 length-1">Discover.Option43.suboption7.show</capture_ref>
  					</var_expr>
  				</var>
  				<verify step="21" group="Check Inform">
                	<and>
	                	<contains>
	                		<capture_ref type="snmp" name="eUE_Prov">Inform Request.SNMPv2-MIB::sysDescr-0.sysDescr.show</capture_ref>
	                		<var_ref name="bootr"/>
	                	</contains>
	                <and>
	                	<notnull>
	                		<capture_ref type="snmp" name="eUE_Prov">Inform Request.RFC1213-MIB::mib-2-140-1-1-3-0.octets.show</capture_ref>
	                	</notnull>
	                <and>
	                	<startsWith>
	                		<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Inform Request.RFC1213-MIB::mib-2-140-1-1-7-0.octets.value</capture_ref>
	                		<expr>pktc2.0:05</expr>
	                	</startsWith>
	                <and>		
	                	<eq ignoreCase="true">
	                		<capture_ref type="snmp" name="eUE_Prov">Inform Request.IF-MIB::ifPhysAddress-1.ifPhysAddress</capture_ref>
	                		<msg_ref type="platform">DUT.MAC Address</msg_ref>
	                	</eq>
	                	<notnull>
	                		<capture_ref type="snmp" name="eUE_Prov">Inform Request.RFC1213-MIB::mib-2-140-1-3-3-0.g32.show</capture_ref>
	                	</notnull>
	                </and>
	                </and>
	                </and>
	                </and>
                 </verify>
                
                <!--  From step 22 of B.2.2.1 for IPv4-->
  				<verify step="16" group="Inform Response">
                	<eq>
                		<capture_ref type="snmp" name="eUE_Prov">Get Response.error-status.show</capture_ref>
						<expr>0</expr>
                	</eq>
                </verify>
                
                <!--  From step 23 of B.2.2.1 for IPv4-->
  				<verify step="16" group="SNMP Server sends Set or Get">
                	<or>
                		<eq>
                			<capture_ref type="snmp" name="eUE_Prov">Set Request.ip.src.show</capture_ref>
                			<msg_ref type="platform">Platform.SNMP Server IP</msg_ref>
                		</eq>
                		<eq>
                			<capture_ref type="snmp" name="eUE_Prov">Get Request.ip.src.show</capture_ref>
                			<msg_ref type="platform">Platform.SNMP Server IP</msg_ref>
                		</eq>
                	</or>
                </verify>
                  
                <!--  From step 24, 25 & 26 of B.2.2.1 for IPv4-->
  				<var name="tftp_ip">
  					<var_expr>
  						<expr>tftp://</expr>
  						<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
  						<expr>/</expr>
  						<msg_ref type="platform">DUT.SC File</msg_ref>
  					</var_expr>
  				</var>
  				
  				<var name="tftp_fqdn">
  					<var_expr>
  						<expr>tftp://</expr>
  						<msg_ref type="platform">DUT.TFTP FQDN</msg_ref>
  						<expr>/</expr>
  						<msg_ref type="platform">DUT.SC File</msg_ref>
  					</var_expr>
  				</var>
  					
  				<verify step="16" group="Set after Get">
  					<or>
  						<null>
  							<capture_ref type="snmp" name="eUE_Prov">Get Request.ip.src.show</capture_ref>
  						</null>
  						<lt>
  							<capture_ref type="snmp" name="eUE_Prov">Get Request.num</capture_ref>
  							<capture_ref type="snmp" name="eUE_Prov">Set Request.num</capture_ref>
  						</lt>
  					</or>
  				</verify>
  				
  				<if>
  					<contains>
  						<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
  						<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
  					</contains>
  					<then>
  						<!-- Step 25 & 26 from the IPv4 case are only relevant when the TFTP server is using a FQDN instead of IP -->
  						<verify step="16" group="TFTP File">
                	   		<eq>
                				<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
                				<var_ref name="tftp_ip"/>
                			</eq>
                		</verify>
                   	</then>
                	<else>  					
		  				<verify step="16" group="TFTP File">
		                	<and>
		                		<eq>
		                			<capture_ref type="snmp" name="eUE_Prov" convertTo="string">Set Request.RFC1213-MIB::mib-2-140-1-2-9-0.octets.value</capture_ref>
		                			<var_ref name="tftp_fqdn"/>
		                		</eq>
		                	<and>
		                		<eq>
									<capture_ref type="dns" name="eUE_Prov" hdr_instance="any">Query.qry</capture_ref>
									<msg_ref type="platform">DUT.TFPT FQDN</msg_ref>
								</eq>
								<eq>
									<capture_ref type="dns" name="eUE_Prov" hdr_instance="any">Response.addl.element.Addr.show</capture_ref>
									<msg_ref type="platform">DUT.TFPT Server IP</msg_ref>
								</eq>
							</and>
							</and>
		                </verify>
                	</else>
                </if>
	            
	             <!-- From step 27 of B.2.2.3 for IPv4 -->
	            <verify step="16" group="TFTP Read">
           			<eq>
						<capture_ref type="dns" name="eUE_Prov">Read Request.source_file.show</capture_ref>
						<msg_ref type="platform">DUT.SC File</msg_ref>
					</eq>
				</verify>
	            
	            <!-- From step 28 of B.2.2.3 for IPv4 -->
				<verify step="16" group="TFTP Completes">
					<lt>
						<capture_ref type="tftp" name="eUE_Prov">Read Request.num</capture_ref>
						<capture_ref type="tftp" name="eUE_Prov">Data Packet.num</capture_ref>
					</lt>
				</verify>
	            
	            <!-- From step 29 of B.2.2.3 for IPv4 -->
				<verify step="16" group="Syslog">
					<and>
						<contains>
							<capture_ref type="syslog" name="eUE_Prov">NOTICE.msg.show</capture_ref>
							<expr>Provisioning Complete</expr>
						</contains>
					<and>
						<contains>
							<capture_ref type="bootp" name="eUE_DHCP">ACK.Option7.show</capture_ref>
							<msg_ref type="platform">DUT.Syslog IP</msg_ref>
						</contains>
						<eq>
							<capture_ref type="syslog" name="eUE_Prov">NOTICE.ip.dst.show</capture_ref>
							<msg_ref type="platform">DUT.Syslog IP</msg_ref>
						</eq>
					</and>
					</and>
				</verify>
	            
	            <!-- From step 30 of B.2.2.3 for IPv6 -->
				<verify step="16" group="Inform">
					<and>
						<eq>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.IF-MIB::ifPhysAddress-1.ifPhysAddress.value</capture_ref>
							<msg_ref type="platform">DUT.MAC Address</msg_ref>
						</eq>
						
					<and>
						<notnull>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.RFC1213-MIB::mib-2-140-1-3-3-0.g32.show</capture_ref>
						</notnull>	
					<and>
						<eq>
							<capture_ref type="snmp" name="eUE_Prov" msg_instance="last">Inform Request.RFC1213-MIB::mib-2-140-1-1-8-0.int.show</capture_ref>
							<expr>1</expr>
						</eq>
					<and>
						<lt>
							<capture_ref type="tftp" name="eUE_Prov">Acknowledgement.num</capture_ref>
							<capture_ref type="snmp" name="eUE_Prov">Inform Request.num</capture_ref>	
						</lt>
						<!--  TODO: How to test? Additionally, if IPv6 provisioning is used, verify the eUE uses 
						its global IPv6 address and not the link-local address constructed prior to DAD. -->
						<eq>
							<expr>0</expr>
							<expr>1</expr>
						</eq>
					</and>
					</and>
					</and>
					</and>
				</verify>
	            
	            <!-- From step 31 of B.2.2.1 for IPv6 -->
				<verify step="16" group="Prov State">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				
               	 <!-- Step 17 of B.2.2.2 for IPv4 -->
				<verify step="17" group="Different IPs">
					<neq>
						<capture_ref type="bootp" name="eCM_V4">ACK.ip.src.show</capture_ref>
						<capture_ref type="bootp" name="eUE_DHCP">ACK.ip.src.show</capture_ref>
					</neq>
				</verify>
			</response>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	</states>
	</add_to>
</pc2xml>
