#//*****************************************************************************
#// Filename: PROV_12-2.test
#// Author:   Matthew Forbes
#//           
#// Creation Date: June 12, 2007
#// Modified by: 
#//*****************************************************************************
#// Description:
#//     TC2513 TEST CASE PROV 12.2 Line Voltage Control - Policy-1
#//
#// Objective:
#//     Verify that the E-MTA DUT is capable of implementing Policy-1 of the
#//     Line Voltage Control.
#//
#// PacketCable DUT:
#//     E-MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Hook up Line Voltage Registration Tool (LVRT) to all lines
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtPolicy MIB Object, set value voltage_at_all_times(1)
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtPolicy MIB Object, verify value voltage_at_all_times(1)
#//     - Check LVRT log and verify voltage is high for all physical lines on DUT from reset until prov. complete
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: RST_E-DVA_1-2-7_2.test 7406 2010-07-20 17:17:37Z dthakore $ }

 DoStep "PROV_12-2_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
 } { PASS_STEP }

 # DoStep "PROV_12-2_1-2" "Initial configuration" {
    # if {$AUTOCONFIG_INIT} {
        # AutoCfg_OpenFile $MTA_MAC
        # # Delete all endpoints except the first line
        # for "{set ln 2;set index 10} {$ln <= $MTA1_NUMLINES} {incr ln;incr index} {"
        # AutoCfg_EditFile delete $CLABS_OID.2.2.2.1.2.1.1.1.$index $MTA_MAC						;# CallAgentId
        # }
        # # save config file for MTA
        # AutoCfg_CloseSaveFile $MTA_MAC
        # } else {
            # verify_signal "Modify configuration file to disable all lines except line 1"
        # }
    # } {
        # PASS_STEP
    # }
    
 DoStep "PROV_12-2_1-3" "Configure Provisioning Server" {
        PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
     PROV_DEPLOY_DHCP
 } { PASS_STEP }
    
 DoStep "PROV_12-2_1-4" "Connect LVRT" {
    verify_signal "Connect all $MTA1_NUMLINES lines to the Line Voltage Registration Tool & start log."
 } { PASS_STEP }

 DoStep "PROV_12-5_1-5" "Start sniffer" {
     LogMsg "--- Start sniffer ---"
     Init_CONTROLLER_LAN
     SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
     StartCaptureControllerLan
 } {PASS_STEP}

################ Reset CM and MTA and Verify Provisioning ################

 DoStep "PROV_12-2_2-1" "Hard reboot MTA" {
     set val [SNMPvN_RESET $CM_IP]
     LogMsg "Hard reboot of CM and MTA has passed"
 } {
     IsEqual $val 0
 }
 
 DoStep "PROV_12-2_3-1" "pktcMTADevProvisioningState Content Verification" {
     # Wait for a minute to let CM/MTA starting to reboot
     actionWait "Wait for CM/MTA to reboot" 60
     # Get the OID from the MTA and check it using our previously defined
     set val [GetProvState 1 600]
     LogMsg "MTA Provisioning State"
     LogMsg "             - Expected : 1"
     LogMsg "             - Received : $val"
 } {
     IsEqual $val 1
 }

set oid_pktcEnNcsEndPntLVMgmtPolicy .1.3.6.1.4.1.4491.2.2.6.2.1.2.3.1.1.1
    
  DoStep "PROV_12-2_4-1" "SNMP SET pktcEnNcsEndPntLVMgmtPolicy to voltage_at_all_times(1)" {
        set type  INTEGER
        set newValue 1
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtPolicy $type $newValue $MTA_IP]
    } {
        IsEqual $result 0 ;# check MIB is writable
    }   
  
  DoStep "PROV_12-2_5-1" "SNMP RESET" {
        # SNMP_RESET $MTA_IP
            SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be high(20-48V) now. ---"
        verify_signal "Voltage should be high(20-48V) now."
        # WaitProvCompletion 30
        actionWait "Wait for MTA to reboot" 30
        after 1000
      set valt2 [clock format [clock seconds]]
  } {PASS_STEP}
  
  DoStep "PROV_12-2_6-1" "pktcMtaDevProvisioningState Content Verification" {
      # Get the OID from the MTA and check it using our previously defined
      set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
      LogMsg "The Value of MTA Provisioning State is: $val"
  } {
        IsEqual $val 1
        LogMsg "--- Voltage should have remained high(20-48V). ---"
        verify_signal "Voltage should have remained high(20-48V)."
  }
    
    DoStep "PROV_12-2_7-1" "pktcEnNcsEndPntLVMgmtPolicy Content Verification" {
       # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtPolicy $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtPolicy is: $val"
   } {
       IsEqual $val 1
   }
    
    DoStep "PROV_12-2_7-2" "Stop sniffer" {
        LogMsg "--- Stop sniffer ---"
        StopCaptureControllerLan
        SaveToFileControllerLan
    } {PASS_STEP}
        
    DoStep "PROV_12-2_8-1" "Connect LVRT" {
        verify_signal "Stop log & verify voltage for all $MTA1_NUMLINES lines is high between the times
        $valt1 and
        $valt2."
    } { PASS_STEP }
       
################################################################################
# Cleanup
################################################################################

Cleanup
return 0

