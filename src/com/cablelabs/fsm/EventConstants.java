/*
######################################################################################
##                                                                                  ##
## (c) 2006-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use ##
## of this documentation/package is subject to the terms and conditions of the      ##
## CableLabs License provided to you on download of the documentation/package.      ##
##                                                                                  ##
######################################################################################


*/
package com.cablelabs.fsm;

/**
 * This defines all of the internal events that the platform may generate
 * while operating. It is used for validating information within a PC 2.0
 * Simulator XML document to insure that references to internal events 
 * match syntax and are known by the platform.
 * 
 * @author ghassler
 *
 */
public class EventConstants {

	// Events that the platform may generate internally
	// These two events should be used to specify that a SIP 
	// Request message was successfully authenticated or not
	public static final String AUTHENTICATE_SUCCEED = "AuthenticateSucceed";
	public static final String AUTHENTICATE_FAILED = "AuthenticateFailed";

	// This event allows the system to signal to registrars that a reboot is 
	// in progress 
	public static final String AUTO_REBOOT_EVENT = "AutoRebootEvent";
	
	// These events allow a state to produce different events when it 
	// may want to branch based upon different criteria such as an address
	// is either IPv4 or IPv6
	public static final String BRANCH_1_EVENT = "Branch1Event";
	public static final String BRANCH_2_EVENT = "Branch2Event";
	public static final String BRANCH_3_EVENT = "Branch3Event";
	public static final String BRANCH_4_EVENT = "Branch4Event";
	public static final String BRANCH_5_EVENT = "Branch5Event";
	
	// A generic event stating some condition failed.
	public static final String FAIL_EVENT = "FailEvent";

	// These two states are generated by the GlobalRegistrar or Global
	// Register when ever a network element completes its registration
	// processing.
	public static final String REGISTERED = "Registered";
	public static final String REGISTRATION_LOST = "RegistrationLost";

	public static final String REG_EVENT_SUCCEED = "RegEventSucceed";
	public static final String REG_EVENT_FAILED = "RegEventFailed";
	
	// A generic event indicating that some condition was met.
	public static final String SUCCEED_EVENT = "SucceedEvent";
	
	// This event is defined for the EndSessionState to dictate that
	// it is complete with the clean up.
	public static final String SESSION_TERMINATED = "SessionTerminated";
	
	// This is a private event for an FSM to declare it is complete and 
	// allows the FSM to terminate naturally.
	public static final String SHUTDOWN = "SHUTDOWN";
	
	// These events are used for presence state event changes.
	public static final String OPEN = "OPEN";
	public static final String CLOSED = "CLOSED";
	
	// This is an event for MWI
	public static final String MWI = "MWI";
	
	// These events are used to inject an event from the user
	public static final String USER_EVENT_1 = "UserEvent1";
	public static final String USER_EVENT_2 = "UserEvent2";
	public static final String USER_EVENT_3 = "UserEvent3";
	public static final String USER_EVENT_4 = "UserEvent4";
	public static final String USER_EVENT_5 = "UserEvent5";
	
	// This event allows an FSM to know when media is no longer being streamed.
	public static final String MEDIA_COMPLETE = "MediaComplete";
	
	// This is a private event to control changing to a prompt when
	// Auto provisioning is off
	public static final String AUTO_PROV_PROMPT = "AutoProvPrompt";
	
	/**
	 * This tests if the given event is a platform internal event.
	 * 
	 * @param event - name of the event.
	 * @return - true if it is a platform internal event, false otherwise
	 */
	static public boolean isEvent(String event) {
		if (AUTHENTICATE_SUCCEED.equalsIgnoreCase(event) ||
				AUTHENTICATE_FAILED.equalsIgnoreCase(event) ||
				AUTO_REBOOT_EVENT.equalsIgnoreCase(event) ||
				REGISTERED.equalsIgnoreCase(event) ||
				REGISTRATION_LOST.equalsIgnoreCase(event) ||
				REG_EVENT_SUCCEED.equalsIgnoreCase(event) ||
				REG_EVENT_FAILED.equalsIgnoreCase(event) ||
				SUCCEED_EVENT.equalsIgnoreCase(event) ||
				FAIL_EVENT.equalsIgnoreCase(event) ||
				SESSION_TERMINATED.equalsIgnoreCase(event) ||
				BRANCH_1_EVENT.equalsIgnoreCase(event) ||
				BRANCH_2_EVENT.equalsIgnoreCase(event) ||
				BRANCH_3_EVENT.equalsIgnoreCase(event) ||
				BRANCH_4_EVENT.equalsIgnoreCase(event)||
				BRANCH_5_EVENT.equalsIgnoreCase(event)||
				MWI.equalsIgnoreCase(event)||
				OPEN.equalsIgnoreCase(event)||
				CLOSED.equalsIgnoreCase(event) ||
				USER_EVENT_1.equalsIgnoreCase(event) ||
				USER_EVENT_2.equalsIgnoreCase(event) ||
				USER_EVENT_3.equalsIgnoreCase(event) ||
				USER_EVENT_4.equalsIgnoreCase(event) ||
				USER_EVENT_5.equalsIgnoreCase(event) ||
				MEDIA_COMPLETE.equalsIgnoreCase(event)) {
			return true;
		}
		return false;
	}
	
	/**
	 * A string representation of the currently supported platform internal events.
	 * 
	 */
	static public String getEvents() {
		String result = AUTHENTICATE_FAILED 
		+ ", " + AUTHENTICATE_SUCCEED 
		+ ", " + AUTO_REBOOT_EVENT
		+ ", " + BRANCH_1_EVENT
		+ ", " + BRANCH_2_EVENT
		+ ", " + BRANCH_3_EVENT 
		+ ", " + BRANCH_4_EVENT
		+ ", " + BRANCH_5_EVENT
		+ ", " + CLOSED
		+ ", " + FAIL_EVENT
		+ ", " + USER_EVENT_1
		+ ", " + USER_EVENT_2
		+ ", " + USER_EVENT_3
		+ ", " + USER_EVENT_4
		+ ", " + USER_EVENT_5
		+ ", " + MEDIA_COMPLETE
		+ ", " + MWI
		+ ", " + OPEN
		+ ", " + REG_EVENT_FAILED
		+ ", " + REG_EVENT_SUCCEED 
		+ ", " + REGISTERED
		+ ", " + REGISTRATION_LOST 
		+ ", " + SESSION_TERMINATED
		
		;
		return result;
		
	}
}
