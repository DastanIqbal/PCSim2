<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SIP-UE 1.3.3.2" 
	descrip="UE Treats First Session Description as Answer (100rel)" 
	number="SIP-UE 1.3.3.2">
	
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup"/>
		<state ID="Answer"/>
		<state ID="Connected"/>
		<state ID="Alerting"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<NE targets="RTP" ext_require="100rel"/>
		
		<state ID="Setup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
					or a 180 to the INVITE -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<!--Sending 18x-Invite with SS not supporting precondition.-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
				</if>
			</response>
			<transition to="Setup" event="DialDigitsComplete"/>
			<transition to="Alerting" event="INVITE"/>
		</state>
		
		<state ID="Alerting">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliablity required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="rtp">Request</msg_ref>
						<expr>RTP</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC663, RFC664" group="RTP">
							<and>
								<eq>
									<msg_ref type="rtp" msg_instance="last">RTP.DestinationAddress.Port</msg_ref>
									<msg_ref type="platform">UE1.SDPPort</msg_ref>
								</eq>
								<neq>
									<msg_ref type="rtp" msg_instance="last">RTP.DestinationAddress.Port</msg_ref>
									<msg_ref type="platform">UE1.SDPPort2</msg_ref>
								</neq>
							</and>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Alerting" event="DialDigitsComplete"/>
			<transition to="Alerting" event="PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="Alerting" event="RTP"/>
			<transition to="Answer" event="ALERTING_UAS"/>
		</state>
		
		<state ID="Answer" timer="15000">
			<response>
				<if>
					<eq>
						<msg_ref type="rtp">Request</msg_ref>
						<expr>RTP</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC663, RFC664" group="RTP">
							<and>
								<eq>
									<msg_ref type="rtp" msg_instance="last">RTP.DestinationAddress.Port</msg_ref>
									<msg_ref type="platform">UE1.SDPPort</msg_ref>
								</eq>
								<neq>
									<msg_ref type="rtp" msg_instance="last">RTP.DestinationAddress.Port</msg_ref>
									<msg_ref type="platform">UE1.SDPPort2</msg_ref>
								</neq>
							</and>
						</verify>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Sending 200-Invite-->
						<send protocol="sip" msgtype="200-INVITE" bodies="SDP">
							<mod modtype="replace" hdr="audio" param="port">
								<msg_ref type="platform">UE1.SDPPort2</msg_ref>
							</mod>
						</send>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>PRACK</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
			</response>
			<transition to="Answer" event="UPDATE"/>
			<transition to="Answer" event="PRACK"/>
			<transition to="Answer" event="RTP"/>
			<transition to="Answer" event="TimerExpired"/>
			<transition to="Connected" event="ACK"/>
		</state>
		
		<state ID="Connected" timer="2000">
			<!-- Step 3 from test case 1.3.3.2 - 
			Verify that media being sent from the UE towards the 
			SS is destined for port answer1_port from step 1, and 
			not to answer2_port from step 2.-->
			<response>
				<!--  Only allow the verify to be executed when the timer has 
					expired and confirmation that the UE1.SDPPort2 configuration
					setting matches the Platform.RTP Port2 setting -->
				<if>
					<eq>
						<msg_ref type="rtp">Request</msg_ref>
						<expr>RTP</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC663, RFC664" group="RTP">
							<and>
								<eq>
									<msg_ref type="rtp" msg_instance="last">RTP.DestinationAddress.Port</msg_ref>
									<msg_ref type="platform">UE1.SDPPort</msg_ref>
								</eq>
								<neq>
									<msg_ref type="rtp" msg_instance="last">RTP.DestinationAddress.Port</msg_ref>
									<msg_ref type="platform">UE1.SDPPort2</msg_ref>
								</neq>
							</and>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Connected" event="RTP"/>
			<transition to="Releasing" event="TimerExpired"/>
		</state>
	</add_to>
</pc2xml>
