<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : Update the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-




-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="RST-EDVA 1.2.9" 
	descrip="Ability of E-DVA To Implement the Location Information Profile Objects" 
	number="RST-EDVA 1.2.9">
	
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<NE targets="service:sos"/>
	  <states initialstate="Reboot">
		<state ID="Reboot" timer="10000">
			<!-- First we need to power cycle the UE to conduct the test -->
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<!-- Transitions for PendingRegistration state -->
			<transition to="Reboot" event="SNMPResp"/>
			<transition to="Register" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot" event="REGISTER"/>
		</state>
		
		<transition from="RealOrSimulatedUE" to="Provisioned" event="Branch2Event"/>
		
		<state ID="Provisioned">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="2">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="LocationInfo" event="SNMPResp"/>
			<transition to="LocationInfo" event="SNMPRespFailure"/>
		</state>
		
		<state ID="LocationInfo">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVALocationInfo.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPResp</expr>
					</eq>
					<then> 
						<!--  Store the pktcEDVALocationInfo -->
						<var name="location">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						</var>
					</then>
				</if>
			</response>
			<transition to="OffHook" event="SNMPResp"/>
			<transition to="OffHook" event="SNMPRespFailure"/>
		</state>
		
		<state ID="Setup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>911</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="3">
							<contains>
								<msg_ref type="sip">INVITE.Request-Line.Request-URI</msg_ref>
								<expr>service:sos</expr>
							</contains>
						</verify>
						<verify step="4">
							<contains>
								<msg_ref type="pidf+xml">INVITE</msg_ref>
								<var_ref name="location"/>
							</contains>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Setup" event="DialDigitsComplete"/>
		</state>

		<state ID="EndCall1" ES="true">
			<prelude>
				<stop_capture/>
			</prelude>
			<response>
				<if>
					<and>
						<eq>
							<msg_ref type="event"/>
							<expr>SessionTerminated</expr>
						</eq>
						<eq ignroeCase="true">
							<msg_ref type="platform">Platform.Auto Provision</msg_ref>
							<expr>true</expr>
						</eq>
					</and>
					<then>
						<generate event="Branch1Event"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="event"/>
							<expr>SessionTerminated</expr>
						</eq>
						<then>
							<generate event="Branch2Event"/>
						</then>
					</elseif>
				</if>
			</response>	
			<transition to="PromptOrProv" event="SessionTerminated"/>
		</state>
		
		<state ID="PromptOrProv">
			<transition to="Prompt" event="Branch2Event"/>
			<transition to="GeoLocProv" event="Branch1Event"/>
		</state>
		
		<state ID="Prompt">
			<prelude>
				<log promptUser="true" expr="Set the DUT to use the configuration file that include Geographic Location Information."/>
				<generate event="Branch1Event"/>
			</prelude>
			<transition to="Reboot2" event="Branch1Event"/>
		</state>
		
		<state ID="GeoLocProv" provFile="RST_Baseline_SecureFlow_ES_Geo.bin" 
				policyFile="MTAFORCW122_test" nextState="Reboot2"/>
		
		<!-- Skip steps 5-7 as they are for full testing -->	
		<!-- STEP 8 -->		
		<state ID="Reboot2" timer="10000">
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot2" event="SNMPResp"/>
			<transition to="Register2" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot2" event="REGISTER"/>
		</state>
		
		<state ID="Register2">
			<transition to="Provisioned2" event="Registered"/>
		</state>
		
		<state ID="Provisioned2">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="8">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="LocationInfo2" event="SNMPResp"/>
			<transition to="LocationInfo2" event="SNMPRespFailure"/>
		</state>
		
		<state ID="LocationInfo2">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVALocationInfo.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPResp</expr>
					</eq>
					<then> 
						<!--  Store the pktcEDVALocationInfo -->
						<var name="location">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						</var>
					</then>
				</if>
			</response>
			<transition to="OffHook2" event="SNMPResp"/>
			<transition to="OffHook2" event="SNMPRespFailure"/>
		</state>

		<state ID="OffHook2">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="Setup2" event="OffHookComplete"/>
		</state>
		
		<state ID="Setup2">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>911</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="9">
							<contains>
								<msg_ref type="sip">INVITE.Request-Line.Request-URI</msg_ref>
								<expr>service:sos</expr>
							</contains>
						</verify>
						<verify step="10">
							<contains>
								<msg_ref type="pidf+xml">INVITE</msg_ref>
								<var_ref name="location"/>
							</contains>
						</verify>
					</then>
				</if>
			</response>
			<!-- Transitions for Setup state -->
			<transition to="EndCall2" event="INVITE"/>
			<transition to="Setup2" event="DialDigitsComplete"/>
		</state>
		
		<state ID="EndCall2" ES="true">
			<prelude>
				<stop_capture/>
			</prelude>
			<response>
				<if>
					<and>
						<eq>
							<msg_ref type="event"/>
							<expr>SessionTerminated</expr>
						</eq>
						<eq ignroeCase="true">
							<msg_ref type="platform">Platform.Auto Provision</msg_ref>
							<expr>true</expr>
						</eq>
					</and>
					<then>
						<generate event="Branch1Event"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="event"/>
							<expr>SessionTerminated</expr>
						</eq>
						<then>
							<generate event="Branch2Event"/>
						</then>
					</elseif>
				</if>
			</response>	
			<transition to="PromptOrProv2" event="SessionTerminated"/>
		</state>
		
		<state ID="PromptOrProv2">
			<transition to="Prompt2" event="Branch2Event"/>
			<transition to="Opt99_123" event="Branch1Event"/>
		</state>
		
		<state ID="Prompt2">
			<prelude>
				<log promptUser="true" expr="Configure the DHCPv4 application to provide both Option 99 and 123 in the DHCP Offer."/>
				<generate event="Branch2Event"/>
			</prelude>
			<transition to="Reboot3" event="Branch2Event"/>
		</state>
		
		<state ID="Opt99_123" provFile="RST_Baseline_SecureFlow_ES_DHCP_Pref_Civic.bin" 
				policyFile="MTA_OPTION99_123_sec" nextState="Reboot3"/>
		
		<!-- Skip steps 11-12 as they are for full testing -->	
		<!-- STEP 13 -->	
		<state ID="Reboot3" timer="10000">
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<!-- Transitions for PendingRegistration state -->
			<transition to="Reboot3" event="SNMPResp"/>
			<transition to="Register3" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot3" event="REGISTER"/>
		</state>
		
		<state ID="Register3">
			<transition to="Provisioned3" event="Registered"/>
		</state>
		
		<state ID="Provisioned3">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="13">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="OffHook3" event="SNMPResp"/>
			<transition to="OffHook3" event="SNMPRespFailure"/>
		</state>
		
		<state ID="OffHook3">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="Setup2" event="OffHookComplete"/>
		</state>
		
		<state ID="Setup3">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>911</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="14">
							<contains>
								<msg_ref type="sip">INVITE.Request-Line.Request-URI</msg_ref>
								<expr>service:sos</expr>
							</contains>
						</verify>
					</then>
				</if>
			</response>
			<transition to="EndCall3" event="INVITE"/>
			<transition to="Setup3" event="DialDigitsComplete"/>
		</state>
		
		<state ID="EndCall3" ES="true">
			<prelude once="true">
				<stop_capture/>
				<parse_capture name="DHCP123">
					<parser_filter ip="DUT.IP"/>
				</parse_capture>
				<verify step="15">
					<contains>
						<msg_ref type="pidf+xml">INVITE</msg_ref>
						<capture_ref type="bootp" name="DHCP123">ACK.Option123</capture_ref>
					</contains>
				</verify>
			</prelude>
			<response>
				<if>
					<and>
						<eq>
							<msg_ref type="event"/>
							<expr>SessionTerminated</expr>
						</eq>
						<eq ignroeCase="true">
							<msg_ref type="platform">Platform.Auto Provision</msg_ref>
							<expr>true</expr>
						</eq>
					</and>
					<then>
						<generate event="Branch1Event"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="event"/>
							<expr>SessionTerminated</expr>
						</eq>
						<then>
							<generate event="Branch2Event"/>
						</then>
					</elseif>
				</if>
			</response>	
			<transition to="PromptOrProv3" event="SessionTerminated"/>
		</state>
 
		<state ID="PromptOrProv3">
			<transition to="Prompt3" event="Branch2Event"/>
			<transition to="LocProv" event="Branch1Event"/>
		</state>
		
		<state ID="Prompt3">
			<prelude>
				<log promptUser="true" expr="Set the DUT to use the configuration file that include Location Information Preference."/>
				<generate event="Branch1Event"/>
			</prelude>
			<transition to="Reboot4" event="Branch1Event"/>
		</state>
		
		<state ID="LocProv" provFile="RST_Baseline_SecureFlow_ES_DHCP_Pref_Geo.bin" 
				policyFile="MTA_OPTION99_123_sec" nextState="Reboot4"/>
		
		<!-- STEP 16 -->		
		<state ID="Reboot4" timer="10000">
			<prelude once="true">
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP CM Gateway IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.KDC IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.TFTP Server IP</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
					<mod modtype="replace" hdr="agentip">
						<msg_ref type="platform">DUT.CM IP Address</msg_ref>
					</mod>
					<!-- Always use version 2 for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPRespFailure</expr>
					</eq>
					<then>
						<fail/>
					</then>
				</if>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot4" event="SNMPResp"/>
			<transition to="Register4" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
			<transition to="Reboot4" event="REGISTER"/>
		</state>
		
		<state ID="Register4">
			<transition to="Provisioned4" event="Registered"/>
		</state>
		
		<state ID="Provisioned4">	
			<prelude>
				<send protocol="utility" msgtype="SNMPGet">
					<mod modtype="add" hdr="oids">
						<expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
					</mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="16">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
			</response>
			<transition to="OffHook4" event="SNMPResp"/>
			<transition to="OffHook4" event="SNMPRespFailure"/>
		</state>
		
		<state ID="OffHook4">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="Setup4" event="OffHookComplete"/>
		</state>
		
		<state ID="Setup4">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>911</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="17">
							<contains>
								<msg_ref type="sip">INVITE.Request-Line.Request-URI</msg_ref>
								<expr>service:sos</expr>
							</contains>
						</verify>
					</then>
				</if>
			</response>
			<transition to="EndCall4" event="INVITE"/>
			<transition to="Setup4" event="DialDigitsComplete"/>
		</state>
		
		<state ID="EndCall4" ES="true">
			<prelude once="true">
				<stop_capture/>
				<parse_capture name="DHCP99">
					<parser_filter ip="DUT.IP"/>
				</parse_capture>
				<verify step="15">
					<contains>
						<msg_ref type="sip">INVITE</msg_ref>
						<capture_ref type="bootp" name="DHCP99">ACK.Option99</capture_ref>
					</contains>
				</verify>
			</prelude>
			<transition to="END" event="SessionTerminated"/>
		</state>
		</states>
		<!-- Skip steps 19-22 as they are for full testing -->
	</add_to>
</pc2xml>
