#//*****************************************************************************
#// Filename: PROV_12-4.test
#// Author:   Matthew Forbes
#//           
#// Creation Date: June 14, 2007
#// Modified by: 
#//*****************************************************************************
#// Description:
#//     TC2515 TEST CASE PROV 12.4 Line Voltage Control - Policy-3
#//
#// Objective:
#//     Verify that the E-MTA DUT is capable of implementing Policy-3
#//     of the Line Voltage Control.
#//
#// PacketCable DUT:
#//     E-MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start Sniffer trace 
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtPolicy MIB Object, set value = voltage_based_on_service_or_timers(3)
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, value should be the default 5
#//     - Soft Reset MTA
#//     - Check Provisioning state
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtPolicy MIB Object, get value = voltage_based_on_service_or_timers(3)
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, set value to 4 minutes
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, check value 2 times over 2 mins, should be 4
#//     - Hook up Line Voltage Registration Tool (LVRT) to all lines and start log
#//     - Hard Reboot DUT
#//     - Check Provisioning state
#//     - Check LVRT log and verify voltage is high for all physical lines on DUT from reboot until prov complete
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, value should count down time since reboot
#//     - Soft Reset MTA
#//     - Check Provisioning state
#//     - Check LVRT log and verify voltage is high for all physical lines on DUT from reboot until prov complete
#//     - Perform SNMPv3 GET 2 times in 2 mins, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, value should count down
#//       time since reboot
#//     - Disconnect RF cable long enough for T4, but not long enough for pktcEnNcsEndPntLVMgmtResetTimer to hit 0
#//     - Reconnect RF cable
#//     - Check Provisioning state
#//     - Check LVRT log and trace and verify voltage is high for all physical lines on DUT from T4 until prov complete
#//     - Perform SNMPv3 GET 2 times in 2 mins, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, value should count down
#//       time since RF disconnect
#//     - Disconnect RF cable long enough for T4 and long enough for pktcEnNcsEndPntLVMgmtResetTimer to hit 0
#//     - Reconnect RF cable
#//     - Check Provisioning state
#//     - Check LVRT log and trace and verify voltage is high for all physical lines on DUT from T4 until 
#//       pktcEnNcsEndPntLVMgmtResetTimer hit 0 and that voltage is low from that point until prov complete and high after that
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, value should be 0
#//     - Record the Line Voltage State of all lines
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, set value to 4 minutes
#//     - Perform SNMPv3 GET 2 times in 2 mins, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, value should count down
#//       time since set
#//     - Soft Reset MTA
#//     - Check Provisioning state
#//     - Check LVRT log and verify voltage the same as recorded for all physical lines on DUT from reboot until prov complete
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, value should count down time of reset time
#//     - Disconnect RF cable long enough for T4 and long enough for pktcEnNcsEndPntLVMgmtResetTimer to hit 0
#//     - Reconnect RF cable
#//     - Check Provisioning state
#//     - Check LVRT log and trace and verify voltage is the same as recorded for all physical lines on DUT from T4 until
#//       pktcEnNcsEndPntLVMgmtMaintTimer hit 0 and that voltage is low from that point until prov complete and high after that
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, value should be 0
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, set value to 2 minutes
#//     - Hard Reboot DUT
#//     - Check Provisioning state
#//     - Perform SNMPv3 GET 2 times in 2 mins, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, value should be the default 0
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtPolicy MIB Object, set to 1
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, value should be 0
#//     - Perform SNMPv3 GET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, value should be 0
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtMaintTimer MIB Object, set value > 0, should receive error inconsistentValue
#//     - Perform SNMPv3 SET, pktcEnNcsEndPntLVMgmtResetTimer MIB Object, set value > 0, should receive error inconsistentValue
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: RST_E-DVA_1-2-7_3.test 7406 2010-07-20 17:17:37Z dthakore $ }

 DoStep "PROV_12-4_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
 } { PASS_STEP }

 # DoStep "PROV_12-4_1-2" "Initial configuration" {
    # if {$AUTOCONFIG_INIT} {
        # AutoCfg_OpenFile $MTA_MAC
        # # Delete all endpoints except the first line
        # for "{set ln 2;set index 10} {$ln <= $MTA1_NUMLINES} {incr ln;incr index} {"
        # AutoCfg_EditFile delete $CLABS_OID.2.2.2.1.2.1.1.1.$index $MTA_MAC						;# CallAgentId
        # }
        # # save config file for MTA
        # AutoCfg_CloseSaveFile $MTA_MAC
        # } else {
            # verify_signal "Modify configuration file to disable all lines except line 1"
        # }
    # } {
        # PASS_STEP
    # }
    
 DoStep "PROV_12-4_1-3" "Configure Provisioning Server" {
        PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
     PROV_DEPLOY_DHCP
 } { PASS_STEP }
    
    
    
  DoStep "PROV_12-4_1-5" "Start sniffer" {
      LogMsg "--- Start sniffer ---"
      Init_CONTROLLER_LAN
      SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
      StartCaptureControllerLan
  } {PASS_STEP}
    
################ Reset CM and MTA and Verify Provisioning ################

 DoStep "PROV_12-4_2-1" "Hard reboot MTA" {
        set val [SNMPvN_RESET $CM_IP]
        set valt1 [clock format [clock seconds]]
     LogMsg "Hard reboot of CM and MTA has passed"
 } {
     IsEqual $val 0
 }
 
 DoStep "PROV_12-4_3-1" "pktcMTADevProvisioningState Content Verification" {
     # Wait for a minute to let CM/MTA starting to reboot
     actionWait "Wait for CM/MTA to reboot" 30
     # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt2 [clock format [clock seconds]]
     LogMsg "MTA Provisioning State"
     LogMsg "             - Expected : 1"
     LogMsg "             - Received : $val"
 } {
     IsEqual $val 1
 }

set oid_pktcEnNcsEndPntLVMgmtPolicy .1.3.6.1.4.1.4491.2.2.6.2.1.2.3.1.1.1
set oid_pktcEnNcsEndPntLVMgmtResetTimer .1.3.6.1.4.1.4491.2.2.6.2.1.2.3.1.2.1
set oid_pktcEnNcsEndPntLVMgmtMaintTimer .1.3.6.1.4.1.4491.2.2.6.2.1.2.3.1.3.1
    
    DoStep "PROV_12-4_4-1" "SNMP SET pktcEnNcsEndPntLVMgmtPolicy to voltage_based_on_service_or_timers(3)" {
        set type  INTEGER
        set newValue 3
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtPolicy $type $newValue $MTA_IP]
    } {
        IsEqual $result 0 ;# check MIB is writable
    }   
    
    DoStep "PROV_12-4_5-1" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        # set type  Unsigned32
        # set newValue 5
        # set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtResetTimer $type $newValue $MTA_IP]
        # IsEqual $result 0 ;# check MIB is writable
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        if {$val == 5} {
            PASS_STEP
        } else  {
        verify_signal "The value of pktcEnNcsEndPntLVMgmtResetTimer is $val.
        Please get an untested unit and restart the test."
        FAIL_STEP "Default value has been changed."
        }
    }

    DoStep "PROV_12-4_6-1" "SNMP RESET" {
        # SNMP_RESET $MTA_IP
        # WaitProvCompletion 60
        SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        actionWait "Wait for MTA to reboot" 30
    } {PASS_STEP}
    
    DoStep "PROV_12-4_7-1" "pktcMtaDevProvisioningState Content Verification" {
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
        LogMsg "The Value of MTA Provisioning State is: $val"
    } {
        IsEqual $val 1
    }
    
    DoStep "PROV_12-4_8-1" "pktcEnNcsEndPntLVMgmtPolicy Content Verification" {
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtPolicy $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtPolicy is: $val"
    } {
        IsEqual $val 3
    }

    # DoStep "PROV_12-4_8-2" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        # # Get the OID from the MTA and check it using our previously defined
        # set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        # LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $val"
    # } {
        # IsEqual $val 0
    # }

    DoStep "PROV_12-4_9-1" "Set pktcEnNcsEndPntLVMgmtResetTimer to a new value" {
        set type Unsigned32
        set newValue 4
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtResetTimer $type $newValue $MTA_IP]
    } {
        IsEqual $result 0
    }
    
    DoStep "PROV_12-4_10-1" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        actionWait "Wait 60 seconds and query MIB object." 65
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        IsEqual $val 4
    }
    
    DoStep "PROV_12-4_10-2" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        actionWait "Wait 60 seconds and query MIB object." 65
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        IsEqual $val 4
    }

    DoStep "PROV_12-4_11-1" "Connect LVRT" {
        verify_signal "Connect all $MTA1_NUMLINES lines to the Line Voltage Registration Tool & start log."
    } { PASS_STEP }
    
    DoStep "PROV_12-4_12-1" "Hard Reboot DUT" {
        verify_signal "Hard reset DUT (power cycle)."
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be high(20-48V) now. ---"
        verify_signal "Voltage should be high(20-48V) now on line 1."
    } { PASS_STEP }

    DoStep "PROV_12-4_13-1" "pktcMTADevProvisioningState Content Verification" {
        # Wait for a minute to let CM/MTA starting to reboot
        actionWait "Wait for CM/MTA to reboot" 30
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt2 [clock format [clock seconds]]
        LogMsg "--- Voltage should have remained high(20-48V). ---"
        verify_signal "Voltage should have remained high(20-48V) on line 1."
        LogMsg "MTA Provisioning State"
        LogMsg "             - Expected : 1"
        LogMsg "             - Received : $val"
    } {
        IsEqual $val 1
    }

    # DoStep "PROV_12-4_12-1" "pktcEnNcsEndPntLVMgmtPolicy Content Verification" {
        # # Get the OID from the MTA and check it using our previously defined
        # set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtPolicy $MTA_IP 20]
        # LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtPolicy is: $val"
    # } {
        # IsEqual $val 2
    # }

    # DoStep "PROV_12-4_14-1" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for line 1 is high(20-48V) between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }

    DoStep "PROV_12-4_15-1" "Wait 2 minutes for pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        verify_signal "The reboot was at $valt1.
        Has 2 minutes passed? (Wait and click yes when it has)"
    } {
        PASS_STEP
    }
    
    DoStep "PROV_12-4_15-2" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        # Get the OID from the MTA and check to see that it is counting down
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        # IsEqual $val 2
        verify_signal "The value of the Reset Timer is $val.(This should be less than 4) Is this correct?"
    }
    
    DoStep "PROV_12-4_16-1" "SNMP RESET" {
        # SNMP_RESET $MTA_IP
        SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be high(20-48V) now. ---"
        verify_signal "Voltage should be high(20-48V) now for line 1."
        # WaitProvCompletion 30
        actionWait "Wait for MTA to reboot" 30
        set valt2 [clock format [clock seconds]]
        LogMsg "--- Voltage should have remained high(20-48V). ---"
        verify_signal "Voltage should have remained high(20-48V) for line 1."
    } {PASS_STEP}
    
    DoStep "PROV_12-4_17-1" "pktcMtaDevProvisioningState Content Verification" {
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
        LogMsg "The Value of MTA Provisioning State is: $val"
    } {
        IsEqual $val 1
    }

    # DoStep "PROV_12-4_18-1" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for line 1 is high(20-48V) between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }

    DoStep "PROV_12-4_19-1" "Wait 1 minute for pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        verify_signal "The reset was at $valt1.
        Has 1 minute passed? (Wait and click yes when it has)"
    } {
        PASS_STEP
    }
    
    DoStep "PROV_12-4_19-2" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        # Get the OID from the MTA and check to see that it is counting down
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        # IsEqual $val 3
        verify_signal "The value of the Reset Timer is $val.(This should be less than 4) Is this correct?"
    }
    
    DoStep "PROV_12-4_20-1" "Disconnect RF signal" {
        verify_signal "Disconnect RF cable and wait for T4 timeout."
        actionWait "Wait 35 seconds for T4 timeout." 35
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be high(20-48V) now. ---"
        verify_signal "Voltage should be high(20-48V) now for line 1."
    } { PASS_STEP }
    
    DoStep "PROV_12-4_20-2" "Restore RF signal." {
        verify_signal "Reconnect RF cable."
    } { PASS_STEP }
    
    DoStep "PROV_12-4_21-1" "pktcMTADevProvisioningState Content Verification" {
        # Wait for a minute to let CM/MTA starting to reboot
        actionWait "Wait for CM/MTA to reboot" 30
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt2 [clock format [clock seconds]]
        LogMsg "MTA Provisioning State"
        LogMsg "             - Expected : 1"
        LogMsg "             - Received : $val"
        LogMsg "--- Voltage should have remained high(20-48V). ---"
        verify_signal "Voltage should have remained high(20-48V) for line 1."
    } {
        IsEqual $val 1
    }
    
    # DoStep "PROV_12-4_22-1" "Verify voltage levels on LVRT" {
            # verify_signal "View LVRT log & verify voltage for line 1 is high(20-48V) between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }

    # DoStep "PROV_12-4_23-1" "Wait 1 minute for pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        # verify_signal "The reboot was at $valt1.
        # Has 1 minute passed? (Wait and click yes when it has)"
    # } {
        # PASS_STEP
    # }
    
    DoStep "PROV_12-4_23-1" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        actionWait "Wait 60 seconds and query MIB object." 60
        # Get the OID from the MTA and check to see that it is counting down
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        # IsEqual $val 3
        verify_signal "The value of the Reset Timer is $val.(This should be less than 4) Is this correct?"
    }
    
    DoStep "PROV_12-4_24-1" "Disconnect RF signal" {
        verify_signal "Disconnect RF cable and wait for T4 timeout and pktcEnNcsEndPntLVMgmtResetTimer timeout."
        actionWait "Wait 35 seconds for T4 timeout." 35
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be high(20-48V) now. ---"
        verify_signal "Voltage should be high(20-48V) now on all lines."
        actionWait "Wait 4 minutes pktcEnNcsEndPntLVMgmtResetTimer timeout." 240
        set valt2 [clock format [clock seconds]]
        LogMsg "--- Voltage should be low (0-20V) now. ---"
        verify_signal "Voltage should have remained high and now be low(0-20V) on all lines."
    } { PASS_STEP }
    
    DoStep "PROV_12-4_24-2" "Restore RF signal." {
        verify_signal "Reconnect RF cable."
    } { PASS_STEP }

    DoStep "PROV_12-4_25-1" "pktcMTADevProvisioningState Content Verification" {
        # Wait for a minute to let CM/MTA starting to reboot
        actionWait "Wait for CM/MTA to reboot" 30
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt3 [clock format [clock seconds]]
        LogMsg "MTA Provisioning State"
        LogMsg "             - Expected : 1"
        LogMsg "             - Received : $val"
        LogMsg "--- Voltage should be high (20-48V) now. ---"
        verify_signal "Voltage should have remained low and now be high(20-48V) on line 1."
    } {
        IsEqual $val 1
    }

    # DoStep "PROV_12-4_26-1" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is high(20-48V) between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }

    # DoStep "PROV_12-4_26-2" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is low(0-20V) between the times
        # $valt2 and
        # $valt3."
    # } { PASS_STEP }
    # 
     # DoStep "PROV_12-4_26-3" "Verify voltage levels on LVRT" {
            # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is high(20-48V) after the time
         # $valt3."
        # } { PASS_STEP }
    
    DoStep "PROV_12-4_27-1" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        # Get the OID from the MTA and check to see that it is counting down
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        IsEqual $val 0
    }
    
     DoStep "PROV_12-4_28-1" "Record the Line Voltage State of all Telephony lines (high/low)." {
            verify_signal "Record the Line Voltage State of all Telephony lines(must be high(20-48V))."
     } { PASS_STEP }
        
    DoStep "PROV_12-4_29-1" "Set pktcEnNcsEndPntLVMgmtMaintTimer to a new value" {
        set type Unsigned32
        set newValue 8
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $type $newValue $MTA_IP]
        set valstartmt [clock format [clock seconds]]
    } {
        IsEqual $result 0
    }

    DoStep "PROV_12-4_30-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        actionWait "Wait 60 seconds and query MIB object." 65
        # Get the OID from the MTA and check to see that it is counting down
        set valmt [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $valmt"
    } {
        # IsEqual $valmt 4
        verify_signal "The value of the Maintenance Timer is $valmt.(This should be less than 8) Is this correct?"
    }
    

    DoStep "PROV_12-4_31-1" "SNMP RESET" {
        # SNMP_RESET $MTA_IP
        SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be the same as the recorded values. ---"
        verify_signal "Voltage should be the same as the recorded values on all lines."
        # WaitProvCompletion 30
        actionWait "Wait for MTA to reboot" 30
        set valt2 [clock format [clock seconds]]
    } {PASS_STEP}
    
    DoStep "PROV_12-4_32-1" "pktcMtaDevProvisioningState Content Verification" {
        # Get the OID from the MTA and check it using our previously defined
        set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
        LogMsg "The Value of MTA Provisioning State is: $val"
        LogMsg "--- Voltage should have remained the same as the recorded values. ---"
        verify_signal "Voltage should have remained the same as the recorded values on all lines."
    } {
        IsEqual $val 1
    }

    # DoStep "PROV_12-4_33-1" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is the same as recorded previously between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }

    # DoStep "PROV_12-4_34-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        # # Get the OID from the MTA and check to see that it is counting down
        # set valmt2 [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        # LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $valmt2"
        # # set valctdwn [expr 4 - $val]
        # # set timelapse [expr $valsect2 - $valsect1]
        # # LogMsg "The time that elapsed during the soft reset was: $timelapse seconds."
        # # set timelapse [expr $timelapse /60]
    # } {
        # # IsEqual $valctdwn $timelapse
        # if {$valmt2 < $valmt} {
            # PASS_STEP
        # } else  {
            # # verify_signal "The value of pktcEnNcsEndPntLVMgmtMaintTimer is $val which is not less than $valmt. Continue?"
            # FAIL_STEP "The value of pktcEnNcsEndPntLVMgmtMaintTimer is $valmt2 which is not less than $valmt."
        # }
    # }

    DoStep "PROV_12-4_34-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        actionWait "Wait 60 seconds and query MIB object." 65
        # Get the OID from the MTA and check to see that it is counting down
        set valmt2 [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $valmt"
    } {
        # IsEqual $valmt 4
        verify_signal "The value of the Maintenance Timer is $valmt2.(This should be less than $valmt) Is this correct?"
    }
    

    DoStep "PROV_12-4_35-1" "Disconnect RF signal" {
        verify_signal "Disconnect RF cable and wait for T4 timeout."
        actionWait "Wait 35 secontds for T4 timeout." 35
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be the same as the recorded values. ---"
        verify_signal "Voltage should be the same as the recorded values on all lines."
        # set valsect1 [clock seconds]
    } { PASS_STEP }
    
    DoStep "PROV_12-4_35-2" "Restore RF signal." {
        verify_signal "Reconnect RF cable."
    } { PASS_STEP }

    DoStep "PROV_12-4_36-1" "pktcMTADevProvisioningState Content Verification" {
        # Wait for a minute to let CM/MTA starting to reboot
        actionWait "Wait for CM/MTA to reboot" 30
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt2 [clock format [clock seconds]]
        # set valsect2 [clock seconds]
        LogMsg "MTA Provisioning State"
        LogMsg "             - Expected : 1"
        LogMsg "             - Received : $val"
        LogMsg "--- Voltage should have remained the same as the recorded values. ---"
        verify_signal "Voltage should have remained the same as the recorded values on all lines."
    } {
        IsEqual $val 1
    }
    
    # DoStep "PROV_12-4_37-1" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is high(20-48V) between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }

    # DoStep "PROV_12-4_38-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        # # Get the OID from the MTA and check to see that it is counting down
        # set valmt3 [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        # LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $valmt3"
        # # set valctdwn [expr 4 - $val]
        # # set timelapse [expr $valsect2 - $valsect1]
        # # LogMsg "The time that elapsed during the soft reset was: $timelapse seconds."
        # # set timelapse [expr $timelapse /60]
    # } {
        # # IsEqual $valctdwn $timelapse
        # if {$valmt3 < $valmt2} {
            # PASS_STEP
        # } else  {
            # # verify_signal "The value of pktcEnNcsEndPntLVMgmtMaintTimer is $val which is not less than $valmt. Continue?"
            # FAIL_STEP "The value of pktcEnNcsEndPntLVMgmtMaintTimer is $valmt3 which is not less than $valmt2."
        # }
    # }
    
     DoStep "PROV_12-4_34-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
         actionWait "Wait 60 seconds and query MIB object." 65
         # Get the OID from the MTA and check to see that it is counting down
         set valmt3 [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
         LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $valmt"
     } {
         # IsEqual $valmt 4
         verify_signal "The value of the Maintenance Timer is $valmt3.(This should be less than $valmt2) Is this correct?"
     }

    DoStep "PROV_12-4_39-1" "Disconnect RF signal" {
        verify_signal "Disconnect RF cable and wait for T4 timeout and pktcEnNcsEndPntLVMgmtMaintTimer timeout."
        actionWait "Wait 35 seconds for T4 timeout." 35
        set valt1 [clock format [clock seconds]]
        LogMsg "--- Voltage should be the same as the recorded values. ---"
        verify_signal "Voltage should be the same as the recorded values on all lines."
        verify_signal "    The maintenance timer started at
        $valstartmt.
        Has 8 minutes passed? (wait and click yes when 8 minutes has passed)"
        set valt2 [clock format [clock seconds]]
        LogMsg "--- Voltage should have remained the same as the recorded values and now be low. ---"
        verify_signal "Voltage should have remained the same as the recorded values and now be low on all lines."
    } { PASS_STEP }
    
    DoStep "PROV_12-4_39-2" "Restore RF signal." {
        verify_signal "Reconnect RF cable."
    } { PASS_STEP }
    
    DoStep "PROV_12-4_40-1" "pktcMTADevProvisioningState Content Verification" {
        # Wait for a minute to let CM/MTA starting to reboot
        actionWait "Wait for CM/MTA to reboot" 30
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt3 [clock format [clock seconds]]
        LogMsg "MTA Provisioning State"
        LogMsg "             - Expected : 1"
        LogMsg "             - Received : $val"
        LogMsg "--- Voltage should be high (20-48V) now. ---"
        verify_signal "Voltage should have remained low and now be high(20-48V) on line 1."
    } {
        IsEqual $val 1
    }
    
    # DoStep "PROV_12-4_41-1" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is the same as recorded earlier between the times
        # $valt1 and
        # $valt2."
    # } { PASS_STEP }
    # 
    # DoStep "PROV_12-4_41-2" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is low between the times
        # $valt2 and
        # $valt3."
    # } { PASS_STEP }
    # 
    # DoStep "PROV_12-4_42-3" "Verify voltage levels on LVRT" {
        # verify_signal "View LVRT log & verify voltage for all $MTA1_NUMLINES lines is high after the time
        # $valt3."
    # } { PASS_STEP }

    DoStep "PROV_12-4_43-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $val"
    } {
        IsEqual $val 0
    }

    DoStep "PROV_12-4_44-1" "Hard Reboot DUT" {
        verify_signal "Hard reset DUT (power cycle)."
        set valt1 [clock format [clock seconds]]
    } { PASS_STEP }
    
    DoStep "PROV_12-4_45-1" "pktcMTADevProvisioningState Content Verification" {
        # Wait for a minute to let CM/MTA starting to reboot
        actionWait "Wait for CM/MTA to reboot" 30
        # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
        set valt2 [clock format [clock seconds]]
        LogMsg "MTA Provisioning State"
        LogMsg "             - Expected : 1"
        LogMsg "             - Received : $val"
    } {
        IsEqual $val 1
    }
    
    DoStep "PROV_12-4_46-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        # Get the OID from the MTA and check to see that it is the default value
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $val"
    } {
        IsEqual $val 0
    }
    
    DoStep "PROV_12-4_47-1" "Set pktcEnNcsEndPntLVMgmtMaintTimer to the default value" {
        set type Unsigned32
        set newValue 5
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $type $newValue $MTA_IP]
    } {
        IsEqual $result 0
    }

    DoStep "PROV_12-4_48-1" "SNMP SET pktcEnNcsEndPntLVMgmtPolicy to a different value." {
        set type INTEGER
        set newValue 1
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtPolicy $type $newValue $MTA_IP]
    } {
        IsEqual $result 0 ;# check MIB is writable
    }
    
    DoStep "PROV_12-4_49-1" "pktcEnNcsEndPntLVMgmtMaintTimer Content Verification" {
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtMaintTimer is: $val"
    } {
        IsEqual $val 0
    }
    
    DoStep "PROV_12-4_49-2" "pktcEnNcsEndPntLVMgmtResetTimer Content Verification" {
        set val [SNMP_GET $oid_pktcEnNcsEndPntLVMgmtResetTimer $MTA_IP 20]
        LogMsg "The Value of MTA pktcEnNcsEndPntLVMgmtResetTimer is: $val"
    } {
        IsEqual $val 0
    }
    
    DoStep "PROV_12-4_50-1" "SNMP SET pktcEnNcsEndPntLVMgmtMaintTimer to a different value." {
        set type Unsigned32
        set newValue 1
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtMaintTimer $type $newValue $MTA_IP]
    } {
        IsEqual $result 2 ;# check MIB is not writable
    }
    
    DoStep "PROV_12-4_50-2" "SNMP SET pktcEnNcsEndPntLVMgmtResetTimer to a different value." {
        set type Unsigned32
        set newValue 1
        set result [SNMP_SET $oid_pktcEnNcsEndPntLVMgmtResetTimer $type $newValue $MTA_IP]
    } {
        IsEqual $result 2 ;# check MIB is not writable
    }

    DoStep "PROV_12-4_50-3" "Stop sniffer" {
        LogMsg "--- Stop sniffer ---"
        StopCaptureControllerLan
        SaveToFileControllerLan
    } {PASS_STEP}
    
    DoStep "PROV_12-4_50-4" "Verify voltage levels on LVRT" {
        verify_signal "Save LVRT log."
    } { PASS_STEP }
    
########################## INVOKE PARSING TOOL ##################################

DoStep "PROV_12-4_50-5" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "PROV_12-4_50-6" "Parse all data into database" {
    # Parse data
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "PROV_12-4_50-7" "SNMP RESPONSE" {
    LogMsg "Verify SNMP RESPONSE"
} {
    # Verify Correlation ID
    VerifyValue $msgID_MTA "INANY SNMP SNMP_RESPONSE SNMP_LVMMT" "IS" "1" AND "SNMP_ERROR_STATUS" "IS" "INCONSISTENT VALUE"
}

DoStep "PROV_12-4_50-8" "SNMP RESPONSE" {
    LogMsg "Verify SNMP RESPONSE"
} {
    # Verify Correlation ID
    VerifyValue $msgID_MTA "INANY SNMP SNMP_RESPONSE SNMP_LVMRT" "IS" "1" AND "SNMP_ERROR_STATUS" "IS" "INCONSISTENT VALUE"
}

################################################################################
# Cleanup
################################################################################

Cleanup
return 0

