<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="Simulated UE2 Terminates Dialog Template" 
	descrip="This is a template to emulate a UE (UE2) terminating a SIP dialog from (UE1)." 
	number="1">
	<!-- Next we define the each of state mahcines -->
	<fsm name="UE2" sipStack="SIP Stack 2">
		<models>
			<session/>
		</models>
		<NE sim_type="term" elements="UE2" targets="UE2"/>
		<states initialstate="UE2Registering">
			<!-- UE2REGISTERING State -->
			<state ID="UE2Registering">
				<prelude>
					<!-- Let the originator register first -->
					<sleep time="1000"/>
					<send protocol="sip" msgtype="Register"/>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
							<expr>200</expr>
						</eq>
						<then>
							<generate event="Registered"/>
						</then>
					</if>
				</response>
				<transition to="UE2Digest" event="401-Register"/>
				<transition to="UE2Register" event="200-Register"/>
			</state>
			<state ID="UE2Digest">
				<prelude>
					<send protocol="sip" msgtype="Register"/>
				</prelude>
				<postlude>
					<generate event="Registered"/>
				</postlude>
				<transition to="UE2Register" event="200-Register"/>
			</state>
			<!-- UE2REGISTER State -->
			<state ID="UE2Register">
				<!-- Transitions for Register state -->
				<transition to="UE2Setup" event="Registered"/>
			</state>
			<!-- SETUP UE2State -->
			<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
			<!-- Step 1 of the Call-Orig-at_UE(DUT) Default Message Flow document. -->
			<state ID="UE2Setup">
				<response>
					<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
					<!-- Step 2 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="100-INVITE" destination="UE1"/>
						</then>
					</if>
					<!-- This set of tests determines whether to send 183 with Answer
						 or a 180 to the INVITE -->
					<!-- Step 3 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<eq>
								<msg_ref type="extensions">precondition</msg_ref>
								<expr>require</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
									<expr>precondition</expr>
								</contains>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
									<expr>precondition</expr>
								</contains>
							</or>
						</and>
						<then>
							<!--Sending 183-Invite with answer-->
							<send protocol="sip" msgtype="183-Invite" destination="UE1"/>
						</then>
						<elseif>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>Invite</expr>
							</eq>
							<then>
								<!--Sending 180-Invite with SS not supporting precondition.-->
								<send protocol="sip" msgtype="180-Invite" destination="UE1"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Setup state -->
				<transition to="UE2Alerting" event="INVITE"/>
			</state>
			<!-- UE2ALERTING State -->
			<!-- NOTE: This is were all of the optional message processing before the 
           session is complete will occur during an originate test call. -->
			<state ID="UE2Alerting">
				<response>
					<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
					<!-- Steps 4 and 5 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<!-- test for need to answer second PRACK -->
					<!-- Steps 9 and 10 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<!-- This is same as for steps 4 and 5 -->
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>PRACK</expr>
							</eq>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test sending 200-Prack message to peer.-->
							<send protocol="sip" msgtype="200-PRACK" destination="UE1"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" destination="UE1"/>
						</then>
					</if>
					<!-- Test whether to send 180 -->
					<!-- Step 8 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<contains>
								<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
								<expr>183</expr>
							</contains>
							<eq>
								<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
								<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
							</eq>
						</and>
						<then>
							<!--Sending 180 for required preconditions.-->
							<send protocol="sip" msgtype="180-Invite" destination="UE1"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Alerting state -->
				<transition to="UE2Alerting" event="PRACK"/>
				<transition to="UE2Alerting" event="UPDATE"/>
				<transition to="UE2Answer" event="ALERTING_UAS"/>
			</state>
			<!-- UE2ANSWER State -->
			<state ID="UE2Answer" timer="15000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-INVITE" destination="UE1"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update" destination="UE1"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Answer state -->
				<transition to="UE2Answer" event="UPDATE"/>
				<transition to="UE2Answer" event="TimerExpired"/>
				<transition to="UE2Connected" event="ACK"/>
			</state>
			
			<!-- UE2CONNECTED State -->
			<state ID="UE2Connected">
				<!-- Transitions for Connected state -->
				<transition to="UE2OnHook" event="Bye"/>
			</state>
			<!-- UE2OnHook State -->
			<state ID="UE2OnHook">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<postlude>
					<send protocol="sip" msgtype="200-BYE" destination="UE1"/>
				</postlude>
				<!-- Transitions for OnHook state -->
				<transition to="UE2CallComplete" event="OnHookComplete"/>
			</state>
			<state ID="UE2CallComplete" ES="true"/>
		</states>
	</fsm>
</pc2xml>
