###############################################################################
#// Filename: E-UE-DATA_1-2-1-4.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: March 10, 2009
#// Modified by:
################################################################################
#// Description:
#//     TC2901 TEST CASE E-UE-DATA 1.2.1.4 - Ability of eUE to Implement the
#//	    BSF Table
#//
#// Objective:
#//     This test verifies the eUE ability to properly implement the pktcEUEDevBSFTable  defined in
#//     CL-PKTC-EUE-DEV-MIB.
#//
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//
#//
#// Notes:
#//     - Requires provPrimitives.tcl
#//
#//
################################################################################
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-1-4.test 7406 2010-07-20 17:17:37Z dthakore $ }

set test_case E-UE-DATA_1-2-1-4-
set step_num 1

Init_PROV
Init_PART

set NON_WRITABLE 2

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Secure_Flow_BasicCall_DigitMap.cfg
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 CFG_C.1.2.5.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUEDevBSFASType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevBSFASType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_2 "pktcEUEDevBSFAddrType Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevBSFAddrType is: $val"
   
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_3 "pktcEUEDevBSFAddr Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevBSFAddr is: $val"
        set hexip [ decIpToHexIp $PROV_DNS1_IP ]
} {
    IsEqual $val $hexip
}

DoStep ${test_case}${step_num}_4 "pktcEUEDevBSFRowStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevBSFRowStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num] "pktcEUEDevBSFAddrType Content set" {
    # Try to set the read only parameter
    set val [SNMP_SET $oid_pktcEUEDevBSFAddrType INTEGER 2 $MTA_IP]
    LogMsg "The Value of pktcEUEDevBSFAddrType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure"
} { PASS_STEP }

set step_num 1

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 CFG_C.1.2.5.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

## Get all the values and verify

DoStep ${test_case}[incr step_num]h_1 "pktcEUEDevBSFASType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUEDevBSFASType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_2 "pktcEUEDevBSFAddrType Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUEDevBSFAddrType is: $val"
    
} {
    IsEqual $val "$hexip "
}

DoStep ${test_case}${step_num}h_3 "pktcEUEDevBSFAddr Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUEDevBSFAddr is: $val"
    set hexip [ decIpToHexIp $PROV_DNS1_IP ]
} {
    IsEqual $val $hexip
}

DoStep ${test_case}${step_num}h_4 "pktcEUEDevBSFRowStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUEDevBSFTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUEDevBSFRowStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h "pktcEUEDevBSFAddrType Content set" {
    # Try to set the read only parameter
    set val [SNMPvN_SET $oid_pktcEUEDevBSFAddrType INTEGER 2 $MTA_IP]
    LogMsg "The Value of pktcEUEDevBSFAddrType is: $val"
} {IsEqual $val $NON_WRITABLE}

DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid"
} { PASS_STEP }

DoStep ${test_case}[incr step_num] "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


############### Reset CM and MTA and Verify Provisioning ################

DoStep ${test_case}[incr step_num] "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup
