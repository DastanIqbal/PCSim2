<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)


-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.1.5.1" 
	descrip="In-Service and Out-of-Service States" 
	number="RST-UE 1.1.5.1">
	
	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- Power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
								<generate event="AuthenticateSucceed" fsm="Stun"/>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<transition to="Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Registered">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="Registered" event="REGISTER"/>
				<transition to="Notification" event="SUBSCRIBE"/>
			</state>
			
			<state ID="Notification">
				<transition to="WaitStunKA" event="200-NOTIFY"/>
			</state>
			
			<state ID="WaitStunKA">
				<transition to="OffHook" event="Branch1Event"/>
			</state>
			
			<state ID="OffHook">
				<prelude>
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<transition to="VerifyDialTone" event="OffHookComplete"/>
			</state>
			
			<state ID="VerifyDialTone">
				<prelude>
					<send protocol="utility" msgtype="VerifyDialTone"/>
				</prelude>
				<response>
					<verify step="2" requirements="REQ13488, REQ13489, REQ23113">
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyDialToneComplete</expr>
						</eq>
					</verify>
				</response>
				<transition to="OnHook" event="VerifyDialToneComplete"/>
				<transition to="OnHook" event="VerifyDialToneError"/>
			</state>
			
			<state ID="OnHook">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>
					<generate event="Branch2Event" fsm="Stun"/>
				</prelude>
				<transition to="WaitUnansweredKA" event="OnHookComplete"/>
			</state>
			
			<state ID="WaitUnansweredKA">
				<transition to="Step4a_GetRegister" event="Branch3Event"/>
			</state>
			
			<state ID="Step4a_GetRegister">
				<transition to="OffHook1" event="REGISTER"/>
			</state>
			
			<!--  Step 5-->
			<state ID="OffHook1">
				<prelude once="true">
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<transition to="VerifyDialTone1" event="OffHookComplete"/>
			</state>
			
			<state ID="VerifyDialTone1">
				<prelude once="true">
					<sleep time="1000"/>
					<send protocol="utility" msgtype="VerifyDialTone"/>
				</prelude>
				<response>
					<verify step="5" requirements="REQ13488, REQ23113, REQ23117, REQ23118">
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyDialToneError</expr>
						</eq>
					</verify>
				</response>
				<transition to="OnHook1" event="VerifyDialToneError"/>
				<transition to="OnHook1" event="VerifyDialToneComplete"/>
			</state>
			
			<state ID="OnHook1">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<transition to="step7_PendingRegistration" event="OnHookComplete"/>
			</state>
			
			<state ID="step7_PendingRegistration">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="step7_Authorization" event="REGISTER"/>
			</state>
			
			<state ID="step7_Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
								<generate event="Branch4Event" fsm="Stun"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<transition to="step7_Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="step7_Authorization" event="REGISTER"/>
			</state>
			
			<state ID="step7_Registered">
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<or>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>dialog</expr>
									</contains>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>message-summary</expr>
									</contains>
								</or>
							</or>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="step7_Notification" event="SUBSCRIBE"/>
			</state>
			
			<state ID="step7_Notification">
				<postlude>
					<generate event="Registered" fsm="Stun"/>
				</postlude>
				<transition to="WaitNextKA" event="200-NOTIFY"/>
			</state>
			
			<state ID="WaitNextKA">
				<transition to="OffHook2" event="Branch5Event"/>
			</state>
			
			<state ID="OffHook2">
				<prelude>
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<transition to="VerifyDialTone3" event="OffHookComplete"/>
			</state>
			
			<state ID="VerifyDialTone3">
				<prelude once="true">
					<generate event="Branch5Event" fsm="Stun"/>
					<send protocol="utility" msgtype="VerifyDialTone"/>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyDialToneComplete</expr>
						</eq>
						<then>
							<verify step="8" requirements="REQ13488, REQ13489, REQ23113">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyDialToneComplete</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="VerifyDialTone3" event="VerifyDialToneComplete"/>
				<transition to="VerifyDialTone3" event="VerifyDialToneError"/>
				<transition to="Step9a_WaitRegister" event="Branch1Event"/>
			</state>
			
			<state ID="Step9a_WaitRegister">
				<transition to="VerifyDialTone4" event="REGISTER"/>
			</state>
			
			<state ID="VerifyDialTone4">
				<prelude>
					<send protocol="utility" msgtype="VerifyDialTone">
						<mod modtype="replace" hdr="voiceExpected">
							<expr>no</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>VerifyDialToneComplete</expr>
						</eq>
						<then>
							<verify step="10" requirements="REQ23117, REQ23118">
								<eq>
									<msg_ref type="utility">Response</msg_ref>
									<expr>VerifyDialToneComplete</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="END" event="VerifyDialToneComplete"/>
				<transition to="END" event="VerifyDialToneError"/>
			</state>
		</states>
	</fsm>
	
	<fsm name="Stun">
		<models>
			<stun/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="PCSCF1"/>
		
		<states initialstate="WaitReg">
			<state ID="WaitReg">
				<transition to="ProcessBindingReq" event="AuthenticateSucceed"/>
			</state>
			
			<state ID="ProcessBindingReq">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<generate event="Branch1Event" fsm="Registrar"/>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to="ProcessBindingReq" event="BindingRequest"/>
				<transition to="BlockBindingReq" event="Branch2Event"/>
			</state>
			
			<state ID="BlockBindingReq">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="stun">Request</msg_ref>
								<expr>BindingRequest</expr>
							</eq>
							<count>
								<cur_state/>
								<expr>1</expr>
							</count>
						</and>
						<then>
							<generate event="Branch3Event" fsm="Registrar"/>
							<!-- Don't RESPOND to the request -->
							<!-- send protocol="stun" msgtype="BindingResponse"/-->
						</then>
					</if>
				</response>
				<transition to="BlockBindingReq" event="BindingRequest"/>
				<transition to="ProcessBindingReq2" event="Branch4Event"/>
			</state>
			
			<state ID="ProcessBindingReq2">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to="ProcessBindingReq2" event="BindingRequest"/>
				<transition to="AllowBindingReq" event="Registered"/>
			</state>
			
			<state ID="AllowBindingReq">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<generate event="Branch5Event" fsm="Registrar"/>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to="BlockBindingReq2" event="Branch5Event"/>
				<transition to="AllowBindingReq" event="BindingRequest"/>
			</state>
			
			<state ID="BlockBindingReq2">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="stun">Request</msg_ref>
								<expr>BindingRequest</expr>
							</eq>
							<count>
								<cur_state/>
								<expr>1</expr>
							</count>
						</and>
						<then>
							<generate event="Branch1Event" fsm="Registrar"/>
							<!-- Don't RESPOND to the request -->
							<!-- send protocol="stun" msgtype="BindingResponse"/-->
						</then>
					</if>
				</response>
				<transition to="Done" event="BindingRequest"/>
			</state>
			
			<!-- PCPCII-95 Add the offHookOK attribute to this state -->
			<state ID="Done" ES="true" offHookOK="true"/>
		</states>
	</fsm>
</pc2xml>
