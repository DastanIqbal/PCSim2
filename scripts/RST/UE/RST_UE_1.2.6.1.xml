<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : Update the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)	
	PCPCIIAPPSATP-138 : Use P-Asserted-Identity instead of P-Preferred-Identity in the INVITEs sent for UE2. (ghassler 06/30/2010)



-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.2.6.1" 
	descrip="Caller ID with Call Waiting" 
	number="RST-UE 1.2.6.1">
	
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	<template file="./templates/CallTermAtUETemp.xml" name="UE2"/>
	
	<remove_from fsm="UE1">
		<state ID="Connected"/>
		<state ID="OnHook"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<state ID="Connected">
			<prelude once="true">
				<generate event="Branch1Event" fsm="UE2"/>
			</prelude>
			<transition to="OnHook" event="Branch2Event"/>
		</state>
		
		<state ID="OnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="Released" event="OnHookComplete"/>
		</state>
		
		<state ID="Released">
			<postlude>
				<send protocol="sip" msgtype="200-BYE"/>
				<log promptUser="true" 
					expr="Reprovision the DUT to disable Caller-ID on Call Waiting."/>
			</postlude>
			<transition to="EndCall" event="BYE"/>
		</state>
		
		<state ID="EndCall" ES="true">
			<transition to="Reboot2" event="SessionTerminated"/>
		</state>
		
		<state ID="Reboot2" timer="5000">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPSet">
					<mod modtype="add" hdr="array">
						<var_expr>
							<expr>varBind 1 1 3 \r\n ][ , </expr>
							<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<or>
						<eq>
							<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
							<expr>0</expr>
						</eq>
						<eq>
							<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
							<expr>0</expr>
						</eq>
					</or>
					<then>
						<send protocol="sip" msgtype="200-REGISTER"/>
					</then>
				</if>
			</response>
			<transition to="Reboot2" event="SNMPResp"/>
			<transition to="OffHook2" event="TimerExpired"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
		
		<state ID="OffHook2">
			<prelude>
				<sleep time="120000"/>
				<generate event="Branch3Event" fsm="UE2"/>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="Setup2" event="OffHookComplete"/>
		</state>
			
		<state ID="Setup2">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<sleep time="200"/>
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<sleep time="200"/>
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Setup2" event="DialDigitsComplete"/>
			<transition to="Alerting2" event="INVITE"/>
		</state>
			
		<state ID="Alerting2">
			<response>
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliability required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite"/>
					</then>
				</if>
			</response>
			<transition to="Alerting2" event="DialDigitsComplete"/>
			<transition to="Alerting2" event="PRACK"/>
			<transition to="Alerting2" event="UPDATE"/>
			<transition to="Answer2" event="ALERTING_UAS"/>
		</state>
			
		<state ID="Answer2" timer="15000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Sending 200-Invite-->
						<send protocol="sip" msgtype="200-INVITE"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="Answer2" event="UPDATE"/>
			<transition to="Answer2" event="TimerExpired"/>
			<transition to="Connected2" event="ACK"/>
		</state>
			
		<state ID="Connected2">
			<prelude>
				<generate event="Branch4Event" fsm="UE2"/>
			</prelude>
			<transition to="Releasing2" event="SucceedEvent"/>
		</state>
		
		<state ID="Releasing2">
			<prelude>
				<!--Sending BYE to peer to terminate call.-->
				<send protocol="sip" msgtype="BYE"/>
			</prelude>
			<transition to="OnHook2" event="200-Bye"/>
		</state>
		
		<state ID="OnHook2">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="END" event="OnHookComplete"/>
		</state>
	</add_to>
	
	<remove_from fsm="UE2">
		<NE elements="UE1" targets="UE1"/>
		<state ID="Setup" sub="prelude"/>
		<state ID="Alerting"/>
	</remove_from>		
	
	<add_to fsm="UE2">
		<NE elements="UE2" targets="UE2"/>
		<transition from="RealOrSimulatedUE" to="WaitCall1" event="Branch2Event"/>
		
		<state ID="WaitCall1">
			<transition to="Setup" event="Branch1Event"/>
		</state>
		
		<state ID="Setup" sub="prelude">
			<send protocol="sip" msgtype="Invite">
				<mod modtype="add" hdr="P-Asserted-Identity">
					<var_expr>
						<expr>&quot;Cullen, Jennings&quot; &lt;sip:</expr>
						<msg_ref type="platform">UE2.username</msg_ref>
						<expr>@</expr>
						<msg_ref type="platform">UE2.domain</msg_ref>
						<expr>&gt;</expr>
					</var_expr>
				</mod>
			</send>
		</state>
		
		<state ID="Alerting" timer="12000">
			<response>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<!-- Step 6 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received UPDATE -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram- received UPDATE -->
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<!-- Step 8 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 180 -->
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
			</response>
			<!-- Transitions for Alerting state -->
			<transition to="Alerting" event="200-PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="Alerting" event="18x-INVITE"/>
			<transition to="EndCall" event="TimerExpired"/>
			<transition to="Connected" event="200-INVITE"/>
		</state>
		
		<state ID="EndCall" ES="true">
			<prelude>
				<log promptUser="true" verify="true" step="2" requirements="REQ23108"
					expr="Is the Caller-ID displaying Cullen, Jennings in the name field?"/>
			</prelude>
			<transition to="WaitCall2" event="SessionTerminated"/>
		</state>
		
		<state ID="WaitCall2" timer="90000">
			<prelude once="true">
				<generate event="Branch2Event" fsm="UE1"/>
			</prelude>
			<transition to="WaitCall2" event="TimerExpired"/>
			<transition to="WaitCall2" event="Branch3Event"/>
			<transition to="Setup2" event="Branch4Event"/>
		</state>
		
		<state ID="Setup2">
			<prelude>
				<send protocol="sip" msgtype="Invite">
					<mod modtype="add" hdr="P-Asserted-Identity">
						<var_expr>
							<expr>sip:</expr>
							<msg_ref type="platform">UE2.username</msg_ref>
							<expr>@</expr>
							<msg_ref type="platform">UE2.domain</msg_ref>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="Proceeding2" event="100-INVITE"/>
			<transition to="Alerting2" event="180-INVITE"/>
			<transition to="Alerting2" event="183-INVITE"/>
		</state>
			
		<state ID="Proceeding2">
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="Alerting2" event="180-INVITE"/>
			<transition to="Alerting2" event="183-INVITE"/>
		</state>
		
		<state ID="Alerting2" timer="6000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<log promptUser="true" verify="true" yesExpected="false" step="6" requirements="REQ23108"
							expr="Is the Caller-ID displaying UE2's information?"/>
					</then>
				</if>
			</response>
			<transition to="Alerting2" event="200-PRACK"/>
			<transition to="Alerting2" event="UPDATE"/>
			<transition to="Alerting2" event="18x-INVITE"/>
			<transition to="EndCall2" event="TimerExpired"/>
		</state>
			
		<state ID="EndCall2" ES="true">
			<prelude>
				<generate event="SucceedEvent" fsm="UE1"/>
			</prelude>
		</state>
	</add_to>
</pc2xml>
