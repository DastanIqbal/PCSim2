<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-131 : Several of the steps in this test case have changed with version D09 of the ATP. (ghassler 06/11/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)
	PCPCIIAPPSATP-111 : Replace step 8's hook flash with a check for two way voice. (ghassler 04/30/2010)


-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.5.2.1" 
	descrip="Call Waiting support " 
	number="RST-UE 1.5.2.1" inspector="disable">

	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	<template file="./templates/CallTermAtUETemp.xml" name="UE2"/>

	<remove_from fsm="UE1">
		<state ID="Connected"/>
	</remove_from>

	<remove_from fsm="UE2">
		<NE elements="UE1" targets="UE1"/>
		<state ID="Setup"/>
		<state ID="Proceeding"/>
		<state ID="Alerting"/>
	</remove_from>

	<add_to fsm="UE1">
		<NE targets="*70 "/>
		<transition from="OffHook" to="CWDial" event="OffHookComplete"/>
		
		<state ID="CWDial">
			<prelude>
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>*70</expr>
					</mod>
				</send>
			</prelude>
			<transition to="CWToggle" event="DialDigitsComplete"/>
		</state>
		
		<state ID="CWToggle">
			<prelude>
				<log promptUser="true" verify="true"
					step="3" requirements="REQ13780"
					expr="Did you hear a confirmation tone?"/>
				<send protocol="utility" msgtype="VerifyDialTone"/>
			</prelude>
			<response>
				<verify step="3" requirements="REQ13780">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyDialToneComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="Setup" event="VerifyDialToneComplete"/>
		</state>
		
		<state ID="Connected">
			<prelude>
				<generate event="Branch1Event" fsm="UE2"/>
			</prelude>
			<transition to="PauseMedia" event="Branch2Event"/>
		</state>
		
		<state ID="PauseMedia">
			<prelude>
				<!-- Step 6 of test case 1.5.2.1  - Hook Flash on DUT.-->
				<send protocol="utility" msgtype="HookFlash"/>
			</prelude>
			<transition to="UE1GoOnHold" event="HookFlashComplete"/>
		</state>
		
		<state ID="UE1GoOnHold">
			<transition to="UE1OnHoldResponse" event="REINVITE"/>
		</state>
		
		<state ID="UE1OnHoldResponse">
			<prelude>
				<!-- HookFlash Step 2 and 3 -Sending 100-Invite and 200-Invite to Invite -->
				<send protocol="sip" msgtype="100-INVITE"/>
				<sleep time="200"/>
				<send protocol="sip" msgtype="200-INVITE"/>
			</prelude>
			<transition to="UE1OnHold" event="ACK"/>
		</state>
		
		<state ID="UE1OnHold">
			<prelude once="true">
				<!-- Step 7 test case SIP 1.5.2.1 - Dial *70, listen. -->
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>*70</expr>
					</mod>
				</send>
				<log promptUser="true" verify="true" step="3" requirements="REQ13780" 
					expr="Did you hear a confirmation tone played in the DUT's receiver?"/>
			</prelude>
			<transition to="END" event="DialDigitsError"/>
			<transition to="ResumeMedia" event="DialDigitsComplete"/>
		</state>
		
		<state ID="ResumeMedia">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>REINVITE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<send protocol="sip" msgtype="200-INVITE"/>
					</then>
				</if>
			</response>
			<transition to="ResumeMedia" event="REINVITE"/>
			<transition to="VerifyVoice" event="ACK"/>
		</state>
		
		<state ID="VerifyVoice">
			<prelude>
				<!-- Step 8 test case SIP 1.5.1.2 -  -->
				<send protocol="utility" msgtype="VerifyVoicePath2Way">
					<mod modtype="replace" hdr="from voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
					<mod modtype="replace" hdr="to voiceport">
						<msg_ref type="platform">Platform.voiceport1</msg_ref>
					</mod>
					<mod modtype="replace" hdr="voiceExpected">
						<expr>yes</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<verify step="8" requirements="REQ23436">
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyVoicePath2WayComplete</expr>
					</eq>
				</verify>
			</response>
			<transition to="WaitBranch2Event" event="VerifyVoicePath2WayComplete"/>
			<transition to="WaitBranch2Event" event="VerifyVoicePath2WayError"/>
		</state>
	
		<state ID="WaitBranch2Event">
			<prelude>
				<generate event="Branch3Event" fsm="UE2"/>
			</prelude>
			<transition to="HookFlash2" event="Branch4Event"/>
		</state>
		
		<state ID="HookFlash2">
			<prelude>
				<send protocol="utility" msgtype="HookFlash"/>
			</prelude>
			<transition to="PauseMedia2" event="HookFlashComplete"/>
		</state>
		
		<state ID="PauseMedia2">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>REINVITE</expr>
					</eq>
					<then>
						<verify step="11" requirements="REQ13786">
							<eq>
								<msg_ref type="sdp">REINVITE.mode.value</msg_ref>
								<expr>inactive</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<postlude>
				<send protocol="sip" msgtype="100-INVITE"/>
				<send protocol="sip" msgtype="200-INVITE"/>
			</postlude>
			<transition to="AckPauseMedia2" event="REINVITE"/>
		</state>
		
		<state ID="AckPauseMedia2">
			<postlude>
				<generate event="Branch5Event" fsm="UE2"/>
			</postlude>
			<transition to="WaitSucceedUE2" event="ACK"/>
		</state>
		
		<state ID="WaitSucceedUE2">
			<postlude>
				<send protocol="sip" msgtype="BYE"/>
				<log promptUser="true" verify="true" 
					step="11" requirements="REQ13785" 
					expr="Verify in the capture file that there were no RTP packets sent\nfrom the DUT to UE1 after the hookflash to UE2."/>
			</postlude>
			<transition to="END" event="SucceedEvent"/>
		</state>
	</add_to>
	
	<add_to fsm="UE2">
		<NE elements="UE2" targets="UE2"/>
		
		<transition from="Register" to="WaitState" event="Registered"/>
		
		<state ID="WaitState">
			<transition to="Setup" event="Branch1Event"/>
		</state>
		
		<state ID="Setup">
			<prelude once="true">
				<!-- Step 5 test case SIP 1.5.1.2 -  Hook Flash on DUT.-->
				<send protocol="sip" msgtype="Invite"/>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
						<expr>486</expr>
					</eq>
					<then>
						<verify step="4" requirements="REQ13777, REQ13778">
							<eq>
								<msg_ref type="sip">Response</msg_ref>
								<expr>486-INVITE</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Setup" event="100-INVITE"/>
			<transition to="EndSession2" event="486-INVITE"/>
		</state>
		
		<state ID="EndSession2" ES="true" offHookOK="true">
			<transition to="WaitForCall2" event="SessionTerminated"/>
		</state>
		
		<state ID="WaitForCall2">
			<prelude>
				<generate event="Branch2Event" fsm="UE1"/>
			</prelude>
			<transition to="Setup2" event="Branch3Event"/>
		</state>
		
		<state ID="Setup2">
			<prelude>
				<!-- Step 10 test case SIP 1.5.1.2 -  Hook Flash on DUT.-->
				<start_capture>
					<filter>
						<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">UE0.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">Platform.STUN IP Address</msg_ref>
						</var_expr>
					</filter>
				</start_capture>
				<send protocol="sip" msgtype="Invite"/>
			</prelude>
			<!-- Expected responses are 100, 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="Proceeding" event="100-INVITE"/>
			<transition to="Alerting" event="180-INVITE"/>
			<transition to="Alerting" event="183-INVITE"/>
			<transition to="AlertingUAC" event="ALERTING_UAC"/>
			<transition to="Connected" event="200-INVITE"/>
		</state>
		
		<state ID="Proceeding">
			<!-- Expected responses are 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="Alerting" event="180-INVITE"/>
			<transition to="Alerting" event="183-INVITE"/>
			<transition to="AlertingUAC" event="ALERTING_UAC"/>
			<transition to="Connected" event="200-INVITE"/>
		</state>
		
		<state ID="Alerting" timer="3000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Take DUT phone off hook-->
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Alerting" event="200-PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="Alerting" event="18x-INVITE"/>
			<transition to="Connected" event="200-INVITE"/>
			<transition to="AlertingUAC" event="ALERTING_UAC"/>
		</state>
		
		<state ID="AlertingUAC">
			<prelude once="true">
				<send protocol="utility" msgtype="VerifyCallWaitingTone">
					<mod modtype="replace" hdr="voiceport">
						<msg_ref type="platform">Platform.voiceport0</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>VerifyCallWaitingToneComplete</expr>
					</eq>
					<then>
						<verify step="10" requirements="REQ13779">
							<eq>
								<msg_ref type="utility">Response</msg_ref>
								<expr>VerifyCallWaitingToneComplete</expr>
							</eq>
							<then>
								<generate event="Branch4Event" fsm="UE1"/>
								<stop_capture/>
							</then>
						</verify>
					</then>
				</if>
			</response>
			<transition to="WaitAnswer" event="Branch5Event"/>
			<transition to="AlertingUAC" event="VerifyCallWaitingToneComplete"/>
			<transition to="AlertingUAC" event="VerifyCallWaitingToneError"/>
		</state>
		
		<state ID="WaitAnswer">
			<response>
				<verify step="12" requirements="REQ13787, REQ13794, REQ23107">
					<eq>
						<msg_ref type="sip">Response</msg_ref>
						<expr>200-INVITE</expr>
					</eq>
				</verify>
			</response>
			<postlude>
				<send protocol="sip" msgtype="ACK"/>
			</postlude>
			<transition to="EndCall2" event="200-INVITE"/>
		</state>
		
		<state ID="EndCall2" ES="true">
			<prelude>
				<generate event="SucceedEvent" fsm="UE1"/>
			</prelude>
		</state>
	</add_to>
</pc2xml>
