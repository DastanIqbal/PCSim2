##############################################################################
#// Filename: RST E-UE PROV 3-1-3-4.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: March 12, 2009
#// Modified by:
#//            Matthew Forbes 2/4/10 - changed config file
################################################################################
#// Description:
#//     TC2895 TEST CASE RST E-UE PROV 3.1.3.4 - Ability of eUE to Implement the
#//	    User and Network Announcement Call Feature Tables
#//
#//
#// Objective:
#//     This test verifies the eUE ability to properly implement the 
#//     pktcEUERSTAncTable, pktcEUERSTNfAncTable and pktcEUERSTNfAncLocalMediaTable as
#//     defined in CL-PKTC-EUE-RST-MIB.
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//
#//
#// Notes:
#//     - Requires provPrimitives.tcl
#//
#//
################################################################################

global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: RST_E-UE_PROV_3-1-3-4.test 7464 2010-08-06 15:40:55Z ghassler $ }


set test_case RST_E-UE_PROV_3-1-3-4-
set step_num 1
set NON_WRITABLE 2

Init_PROV

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 CFG_C.1.1.16_MotoCW71.cfg
    # PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 SecureFlow_BasicCall_DigitMap_CID_AllFeatures_Anon.cfg
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 CFG_C.1.1.8.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}${step_num}_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUERSTAncPrefLang Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTAncTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTAncPrefLang is: $val"
} {
    IsEqual $val 199
}

DoStep ${test_case}${step_num}_2 "pktcEUERSTAncStatus Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTAncTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTAncStatus is: $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num]_1 "pktcEUERSTNfAncRes Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncRes is: $val"
} {
    IsEqual $val "URI for media server"
}

DoStep ${test_case}${step_num}_2 "pktcEUERSTNfAncDomain Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncDomain is: $val"
} {
    IsEqual $val cablelabs.com
}

DoStep ${test_case}${step_num}_3 "pktcEUERSTNfAncPath Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncPath is: $val"
} {
    IsEqual $val "announcement path URI"
}

DoStep ${test_case}${step_num}_4 "pktcEUERSTNfAncMIMEType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUERSTNfAncMIMEType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_5 "pktcEUERSTNfAncStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUERSTNfAncStatus is: $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num]_1 "pktcEUERSTNfAncMapRspCode Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMapTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncMapRspCode is: $val"
} {
    IsEqual $val 400
}

DoStep ${test_case}${step_num}_2 "pktcEUERSTNfAncMapURI Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMapTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncMapURI is: $val"
} {
    IsEqual $val "response code URI"
}

DoStep ${test_case}${step_num}_3 "pktcEUERSTNfAncMapStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMapTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncMapStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]_1 "pktcEUERSTNfAncMediaId Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncMediaId is: $val"
} {
    IsEqual $val "announcement identifier"
}

DoStep ${test_case}${step_num}_2 "pktcEUERSTNfAncMediaURI Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncMediaURI is: $val"
} {
    IsEqual $val "announcement identifier URI"
}

DoStep ${test_case}${step_num}_3 "pktcEUERSTNfAncMediaCachMaxAge Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncMediaCachMaxAge is: $val"
} {
    IsEqual $val 3600
}

DoStep ${test_case}${step_num}_4 "pktcEUERSTNfAncMediaStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUERSTNfAncMediaStatus is: $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num]_1 "pktcEUERSTNfAncLclMediaURI   Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaURI  is: $val"
} {
    IsEqual $val "file:///PacketCableRST/ct"
}

DoStep ${test_case}${step_num}_2 "pktcEUERSTNfAncLclMediaType Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaType is: $val"
} {
    IsEqual $val "file:///PacketCableRST/ct"
}

DoStep ${test_case}${step_num}_3 "pktcEUERSTNfAncLclMediaData Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaData is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}_4 "pktcEUERSTNfAncLclMediaStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num] "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure"
} { PASS_STEP }

set step_num 1

DoStep ${test_case}${step_num}h "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_1 "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep ${test_case}[incr step_num]h_2 "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}${step_num}h_3 "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h_1 "pktcEUERSTAncPrefLang Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTAncTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTAncPrefLang is: $val"
} {
    IsEqual $val 199
}

DoStep ${test_case}${step_num}h_2 "pktcEUERSTAncStatus Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTAncTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTAncStatus is: $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num]h_1 "pktcEUERSTNfAncRes Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncRes is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_2 "pktcEUERSTNfAncDomain Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncDomain is: $val"
} {
    IsEqual $val cablelabs.com
}

DoStep ${test_case}${step_num}h_3 "pktcEUERSTNfAncPath Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncPath is: $val"
} {
    IsEqual $val 199
}

DoStep ${test_case}${step_num}h_4 "pktcEUERSTNfAncMIMEType Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUERSTNfAncMIMEType is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_5 "pktcEUERSTNfAncStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncTable.1 $MTA_IP 5]
    LogMsg "The Value of pktcEUERSTNfAncStatus is: $val"
} {
    IsEqual $val 1
}


DoStep ${test_case}[incr step_num]h_1 "pktcEUERSTNfAncMapRspCode Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMapTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncMapRspCode is: $val"
} {
    IsEqual $val 400
}

DoStep ${test_case}${step_num}h_2 "pktcEUERSTNfAncMapURI Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMapTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncMapURI is: $val"
} {
    IsEqual $val "response code URI"
}

DoStep ${test_case}${step_num}h_3 "pktcEUERSTNfAncMapStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMapTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncMapStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h_1 "pktcEUERSTNfAncMediaId Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncMediaId is: $val"
} {
    IsEqual $val "announcement identifier"
}

DoStep ${test_case}${step_num}h_2 "pktcEUERSTNfAncMediaURI Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncMediaURI is: $val"
} {
    IsEqual $val "announcement identifier URI"
}

DoStep ${test_case}${step_num}h_3 "pktcEUERSTNfAncMediaCachMaxAge Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncMediaCachMaxAge is: $val"
} {
    IsEqual $val 3600
}

DoStep ${test_case}${step_num}_4 "pktcEUERSTNfAncMediaStatus Content Verification" {
    # Get the OID from the MTAh and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncMediaMapTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUERSTNfAncMediaStatus is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}[incr step_num]h_1 "pktcEUERSTNfAncLclMediaURI   Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 1]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaURI  is: $val"
} {
    IsEqual $val "file:///PacketCableRST/ct"
}

DoStep ${test_case}${step_num}h_2 "pktcEUERSTNfAncLclMediaType Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 2]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaType is: $val"
} {
    IsEqual $val "file:///PacketCableRST/ct"
}

DoStep ${test_case}${step_num}h_3 "pktcEUERSTNfAncLclMediaData Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 3]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaData is: $val"
} {
    IsEqual $val 1
}

DoStep ${test_case}${step_num}h_4 "pktcEUERSTNfAncLclMediaStatus Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_TABLE_GET $table_pktcEUERSTNfAncLocalMediaTable.1 $MTA_IP 4]
    LogMsg "The Value of pktcEUERSTNfAncLclMediaStatus is: $val"
} {
    IsEqual $val 1
}
DoStep ${test_case}[incr step_num]h "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid"
} { PASS_STEP }

DoStep ${test_case}[incr step_num] "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


############### Reset CM and MTA and Verify Provisioning ################

DoStep ${test_case}[incr step_num] "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep ${test_case}[incr step_num] "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup


