<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" name="NAT_UE_1.2.5.13" descrip=" Call to Full-ICE UE from a Lite-ICE UE (DUT) - STUN request username verification" number="NAT_UE_1.2.5.13">
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	<remove_from fsm="UE1">
		<state ID="Setup"/>
		<state ID="Answer"/>
		<state ID="Alerting"/>
		<state ID="Proceeding"/>
	</remove_from>
	<add_to fsm="UE1">
		<NE targets="RTP RTCP"/>
		<!-- SETUP State -->
		<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
		<!-- Step 1 of the Call-Orig-at_UE(DUT) Default Message Flow document. -->
		<state ID="Setup">
			<response>
				<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
				<!-- Step 2 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
			</response>
			<!-- Transitions for Setup state -->
			<transition to="Send200invite" event="INVITE"/>
		</state>
		<!-- Send200invite State -->
		<state ID="Send200invite">
			<prelude once="true">
				<send protocol="sip" msgtype="200-INVITE">
					<mod modtype="add" hdr="c">
						<var_expr>
							<expr>IN IP4</expr>
							<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
						</var_expr>
					</mod>
					<mod modtype="add" hdr="rtpmap">
						<expr>icepwd:asd88fgpdd777uzjYhagZg</expr>
					</mod>
					<mod modtype="add" hdr="rtpmap">
						<expr>ice-ufrag:8hhY</expr>
					</mod>
					<mod modtype="add" hdr="SDP">
						<var_expr>
							<expr>a=candidate:1 1 UDP 2130706431</expr>
							<msg_ref type="platform">UE1.IP</msg_ref>
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
							<expr> typ host unkwownAttr unknownVal</expr>
						</var_expr>
					</mod>
					<mod modtype="add" hdr="SDP">
						<var_expr>
							<expr>a=candidate:2 1 UDP 1694498815</expr>
							<msg_ref type="platform">Platform.STUN IP Address</msg_ref>
							<msg_ref type="platform">Platform.STUN UDP Port</msg_ref>
							<expr>typ srflx raddr </expr>
							<msg_ref type="platform">UE1.IP</msg_ref>
							<expr> rport </expr>
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
							<expr>unknownAttr unknownVal</expr>
						</var_expr>
					</mod>
					<mod modtype="add" hdr="SDP">
						<expr>a=candidate:Rd8bb574e 1 UDP16777215 216.187.87.78 65535 typ relay raddr 216.187.87.78 rport 65535 unknownAttr UnknownVal</expr>
					</mod>
				</send>			
				<generate event="Branch4Event" fsm="STUN1"/> 
			</prelude>
			<response>
				<!-- Now test for an UPDATE message -->
				<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<!-- Transitions for Answer state -->
			<transition to="Send200invite" event="UPDATE"/>
			<transition to="END" event="Branch5Event"/>
		</state>
	</add_to>
	<fsm name="STUN1">
		<models>
			<stun/>
		</models>
		<!-- Next we define all of the network elements-->
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		<states initialstate="WaitSucceedEvent">
			<!-- WaitSucceedEvent STATE -->
			<state ID="WaitSucceedEvent">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">Request</msg_ref>
							<expr>BindingRequest</expr>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Connected state -->
				<transition to="SendBindingReq" event="Branch4Event"/>
				<transition to="WaitSucceedEvent" event="BindingRequest"/>
			</state>
			<!-- SendBindingReq State -->
			<state ID="SendBindingReq" timer="3000">
				<prelude once="true">
					<send protocol="stun" msgtype="BindingRequest">
						<mod modtype="replace" hdr="FINGERPRINT">
							<expr>xxxx</expr>
						</mod>
						<mod modtype="replace" hdr="Username">
							<msg_ref type="platform">UE1.username</msg_ref>
						</mod>
						<mod modtype="replace" hdr="Priority">
							<msg_ref type="platform">UE1.STUN Priority</msg_ref>
						</mod>
						<mod modtype="replace" hdr="ICE-CONTROLLING">
							<expr>xxxx</expr>
						</mod>
						<mod modtype="replace" hdr="MESSAGE-INTEGRITY">
							<expr>xxxx</expr>
						</mod>
					</send>
					<generate event="Branch5Event" fsm="UE1"/>
				</prelude>
				<response>
					<verify step="3" requirements="REQ4410">
						<or>
							<eq>
								<msg_ref type="stun">Response</msg_ref>
								<expr>BindingErrorResponse</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>TimerExpired</expr>
							</eq>
						</or>
					</verify>
				</response>
			</state>
		</states>
	</fsm>
</pc2xml>
