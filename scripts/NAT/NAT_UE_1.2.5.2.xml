<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
 
 
-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="NAT_UE_1.2.5.2" 
	descrip="Call from UE(Lite-ICE) to a UE (Lite-ICE)" 
	number="NAT_UE_1.2.5.2">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup"/>
		<state ID="Answer"/>
		<state ID="Alerting"/>
		<state ID="Proceeding"/>
		<state ID="Connected"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<NE targets="RTP"/>
		<state ID="Setup" timer="12000">
			<prelude once="true">
				<var name="answer">
					<expr>false</expr>
				</var>
				<send protocol="sip" msgtype="Invite">
					<mod modtype="add" hdr="SDP">
						<var_expr>
							<expr>a=ice-pwd:</expr>
							<msg_ref type="platform">UE1.STUN Password Credential</msg_ref>
							<expr>\r\na=ice-ufrag:</expr>
							<msg_ref type="platform">UE1.STUN Username Credential</msg_ref>
							<expr>\r\na=candidate:1 1 UDP </expr>
							<msg_ref type="platform">UE1.STUN Priority</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">UE1.IP</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
							<expr> typ host unknownAttr unknownVal</expr>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<!-- Expected responses are 100, 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
				<if>
					<and>
						<eq>
							<var_ref name="answer"/>
							<expr>false</expr>
						</eq>
						<contains>
							<msg_ref type="sip">Response.SDP</msg_ref>
							<expr>rtpmap</expr>
						</contains>
					</and>
					<then>
						<assign name="answer">
							<expr>true</expr>
						</assign>
									
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<contains>
								<msg_ref type="sip">Response.SDP</msg_ref>
								<expr>a=ice-pwd:</expr>
							</contains>
						</verify>

						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<gte>
								<msg_ref type="sdp" length="true">Response.ice-pwd.value</msg_ref>
								<expr>22</expr>
							</gte>
						</verify>

						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<contains>
								<msg_ref type="sip">Response.SDP</msg_ref>
								<expr>a=ice-ufrag:</expr>
							</contains>
						</verify>
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<gte>
								<msg_ref type="sdp" length="true">Response.ice-ufrag.value</msg_ref>
								<expr>4</expr>
							</gte>
						</verify>
						
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<contains>
								<msg_ref type="sip">Response.SDP</msg_ref>
								<expr>a=ice-lite</expr>
							</contains>
						</verify>
						
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<contains>
								<msg_ref type="sdp">Response.host-1.component-id</msg_ref>
								<expr>1</expr>
							</contains>
						</verify>
						
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<contains>
								<msg_ref type="sdp">Response.host-2.component-id</msg_ref>
								<expr>2</expr>
							</contains>
						</verify>
						<!--  This verify is checking that the foundations are the same and that 
							component-id starts at 1 and is incremented by 1 -->
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<eq>
								<msg_ref type="sdp">Response.host-1.foundation</msg_ref>
								<msg_ref type="sdp">Response.host-2.foundation</msg_ref>
							</eq>
						</verify>
						
						<!--  How is the RTP candidate address being verified that it is 1? -->	
						<!--  How is the RTCP candidate address being verified that it is 2? -->
							
						<!--  Where is the test  that rport and raddr parameters are not present in host candidates? -->
								<!--   -->			
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<dnc>
								<msg_ref type="sdp">Response.host-1</msg_ref>
								<expr>raddr</expr>
							</dnc>
						</verify>
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<dnc>
								<msg_ref type="sdp">Response.host-1</msg_ref>
								<expr>rport</expr>
							</dnc>
						</verify>
						
						<verify step="3" requirements="RFC4510, RFC4509, RFC4361, RFC4365, RFC4367, RFC4369, RFC4371, RFC4495, RFC4496, RFC4497, RFC4498, RFC4501, RFC4502, RFC4506" >
							<contains>
								<msg_ref type="sip">Response.SDP</msg_ref>
								<expr>a=rtcp</expr>
							</contains>
						</verify>
						<generate event="Branch1Event"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="Setup" event="1xx-INVITE"/>
			<transition to="Setup" event="200-INVITE"/>
			<transition to="Setup" event="PRACK"/>
			<transition to="Setup" event="200-UPDATE"/>
			<transition to="Setup" event="RTP"/>
			<transition to="Answer" event="Branch1Event"/>
			<transition to="Answer" event="TimerExpired"/>
		</state>
		
		<state ID="Answer">
			<prelude once="true">
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="Answer" event="UPDATE"/>
			<transition to="Answer" event="200-PRACK"/>
			<transition to="Answer" event="18x-INVITE"/>
			<transition to="Answer" event="OffHookComplete"/>
			<transition to="Connected" event="200-INVITE"/>
		</state>
		
		<state ID="Connected" timer="20000">
			<prelude once="true">
				<send protocol="sip" msgtype="ACK"/>
				<start_stream name="vm2" file="../config/tones/tone2.rtp" format="G711">
					<to>
						<ip>
							<msg_ref type="sdp" msg_instance="last">INVITE.c.address</msg_ref>
						</ip>
						<port>
							<msg_ref type="sdp" msg_instance="last">INVITE.audio.port</msg_ref>
						</port>
					</to>
					<from>
						<ip>
							<msg_ref type="platform">UE1.IP</msg_ref>
						</ip>
						<port>
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
						</port>
					</from>
				</start_stream>
				<!--  Step-4 test case SIP 1.2.5.2 -Verify the tone2 is audible on the UE -->
				<log promptUser="True" yesExpected="True" verify="True" 
					step="4" requirements="RFC2502" 
					expr="Verify the tone2 is audible on the UE?"/>
				
			</prelude>
			<transition to="Connected" event="OffHookComplete"/>
			<transition to="END" event="TimerExpired"/>
		</state>
	</add_to>
</pc2xml>
