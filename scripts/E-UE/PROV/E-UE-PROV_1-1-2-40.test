#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-2-40.test
#// Author:   Matthew Forbes
#// Creation Date: October 27, 2008
#// Modified by:
#//*****************************************************************************
#// Description:
#//     TC3248 TEST CASE E-UE-PROV 1-1-2-40 Ability of eUE to not Proceed with the
#//     Basic and Hybrid Provisioning Flows if there is no ToD received by the eCM
#//
#// Objective:
#//     To verify the ability of the eUE to not proceed with Basic and Hybrid 
#//     Provisioning flows when no ToD is received by the eCM.
#//
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial Configuration
#//     - Set policy for no ToD response
#//     - Start sniffer
#//     - Reset DUT
#//     - Wait for Provisioning of eUE
#//     - Monitor trace and verify syslog message
#//     - Stop sniffer
#//     - Repeat above steps for Hybrid flow
#//     - Restore policy
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-40.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_1-1-2-40-PreStep-1" "Initialize Test Platform" {
    Init_PROV
    Init_CONTROLLER_LAN
    # Initial PARSER TOOL
    Init_PART
} { PASS_STEP }

set msgStr "Configure DHCP SERVER: Block ToD port and change policy and config file"
DoStep "E-UE-PROV_1-1-2-40_1-1" $msgStr {
} {
    PROV_BLOCK_PORT 37 udp 10.32.0.69
    PROV_MODIFY_DEVICE $MTA_MAC BASIC2 Device_Level_Basic.cfg
    PROV_DEPLOY_DHCP
}


set msgStr "Start Sniffer"
DoStep "E-UE-PROV_1-1-2-40_2-1" $msgStr {
    LogMsg "--- $msgStr ---"
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_1-1-2-40_2-2" "Reset DUT" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Hard reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-40_2-3" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 80 seconds for CM/MTA to provision" 80
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_1-1-2-40_2-4" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_BASIC"
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################
DoStep "E-UE-PROV_1-1-2-40_3-1" "Parse all data into database" {
    # Initial PARSER TOOL
    #set ::PART_SHOW_DB_WRITE 1
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
    
    # Parse data
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set MTA_MAC_COL [AddColMac $MTA_MAC]
    # Set up parser file
    set msgID_MTA [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
    
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


DoStep "E-UE-PROV_1-1-2-40_3-2" "Obtain SYSLOG Event Message" {
    LogMsg "Event field in SYSLOG: Time unavailable from TOD server"
    set msg_event [GetValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT"]
    set corr_id [lindex [split $msg_event >] 1]
    set corr_id $corr_id>
} {
    VerifyValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT" "IS" "<4000960005>${corr_id}Time unavailable from the ToD Server - Basic or Hybrid flow."
}



set msgStr "Configure DHCP SERVER: Set policy for eUE to Hybrid"
DoStep "E-UE-PROV_1-1-2-40_2a-1" $msgStr {
} {
    # verify_signal $msgStr
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
}


set msgStr "Start Sniffer"
DoStep "E-UE-PROV_1-1-2-40_2a-2" $msgStr {
    LogMsg "--- $msgStr ---"
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_1-1-2-40_2a-3" "Reset DUT" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Hard reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-40_2a-4" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 80 seconds for CM/MTA to provision" 90
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

DoStep "E-UE-PROV_1-1-2-40_2a-5" "Stop sniffer" {
    actionWait "Wait 30 seconds for Syslog Message" 30
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_HYBRID"
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################
DoStep "E-UE-PROV_1-1-2-40_3a-1" "Parse all data into database" {
    # Initial PARSER TOOL
    #set ::PART_SHOW_DB_WRITE 1
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
    
    # Parse data
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    
    set MTA_MAC_COL [AddColMac $MTA_MAC]
    
    # Set up parser file
    set msgID_MTA [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
    
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}


DoStep "E-UE-PROV_1-1-2-40_3a-2" "Obtain SYSLOG Event Message" {
    LogMsg "Event field in SYSLOG: Time unavailable from TOD server"
    set msg_event [GetValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT"]
    set corr_id [lindex [split $msg_event >] 1]
    set corr_id $corr_id>
} {
    VerifyValue $msgID_MTA "INANY SYSLOG SYSLOG_MSG SYSLOG_EVENT" "IS" "<4000960005>${corr_id}Time unavailable from the ToD Server - Basic or Hybrid flow."
}

################################################################################
# Cleanup
################################################################################
set msgStr "Restore DHCP SERVER: Unblock ToD port and change policy and config file"
DoStep "E-UE-PROV_1-1-2-40-PostStep-1" $msgStr {
} {
    PROV_UNBLOCK_PORT 37 udp 10.32.0.69
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
}

DoStep "E-UE-PROV_1-1-2-40_PostStep-2" "Reset DUT" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Hard reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-40_PostStep-3" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 60 seconds for CM/MTA to provision" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}

Cleanup
