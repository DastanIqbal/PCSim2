<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	




-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="RST-EDVA 1.2.6" 
	descrip="Ability of E-DVA To Support the CODEC Profile MIB Group" 
	number="RST-EDVA 1.2.6">

	<configure name="No Response Timeout" value="180000"/>
	<!-- Next we define the each of state machines -->

	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		<!-- Next we define all of the network elements -->
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		<!-- All of the states for the test. References to "Step x" from the Default Message Flow - UE Registration (DUT) 
        and UE Subscription (DUT) Sequence Diagram -->
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<start_capture>
						<filter>
							<var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
						</var_expr>
					</filter>
					</start_capture>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
						</mod>
						<!-- Always use version 2 for a CM reset -->
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			<!-- PENDINGREGISTRATION State - Default Message Flow - 
			UE Registration (DUT) Sequence Diagram-->
			<state ID="PendingRegistration">
				<!-- Step 1 from the Default Message Flow - 
					UE Registration (DUT) Sequence Diagram- received REGISTER message-->
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<!-- Step-2 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- send 401-REGISTER-->
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Authorization" event="REGISTER"/>
			</state>
			<!--State changes from PENDINGREGISTRATION to AUTHORIZATION on receiving (Step-3) REGISTER message-->
			<!-- AUTHORIZATION State -->
			<!-- Step-3 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- received REGISTER message-->
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Authorization state -->
				<transition to="Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Registered">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
					<if>
						<eq>
							<msg_ref type="sip">Response</msg_ref>
							<expr>200-NOTIFY</expr>
						</eq>
						<then>
							<verify step="2">
								<eq>
									<msg_ref type="sip">Response</msg_ref>
									<expr>200-NOTIFY</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<!-- Transitions for Registered state -->
				<transition to="Registered" event="REGISTER"/>
				<transition to="Registered" event="SUBSCRIBE"/>
				<transition to="GetCodecG711V3" event="200-NOTIFY"/>
			</state>
			
			<state ID="GetCodecG711V3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPkt.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecG711Pkt  element -->
							<verify step="3">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>20</expr>
								</eq>
							</verify>
							
						</then>
					</if>
				</response>
				<transition to="GetT38V3" event="SNMPResp"/>
				<transition to="GetT38V3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetT38V3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecT38.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecT38  element -->
							<verify step="3">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
					</if>
				</response>
				<transition to="GetV152V3" event="SNMPResp"/>
				<transition to="GetV152V3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetV152V3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecV152.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<var name="v152v3">
						<array_ref>SNMPResp.varBind</array_ref>
						<where>
							<contains>
								<array_index index="* 0 0"/>
								<expr>pktcEDVACodecV152</expr>
							</contains>
						</where>
					</var>
					<if>
						<eq>
							<var_ref name="v152v3" index="0 0 2"/>
							<expr>1</expr>
						</eq>
						<then> 
							<var name="newv152v3">
								<expr>2</expr>
							</var>
							<!--  Test for the pktcEDVACodecV152 element -->
							<verify step="3" group="v152v3">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
						<elseif>
							<eq>
								<var_ref name="v152v3" index="0 0 2"/>
								<expr>2</expr>
							</eq>
							<then>
								<var name="newv152v3">
									<expr>1</expr>
								</var>
								<!--  Test for the pktcEDVACodecV152 element -->
								<verify step="3" group="v152v3">
									<eq>
										<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
										<expr>2</expr>
									</eq>
								</verify>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="GetAddrTypeV3" event="SNMPResp"/>
				<transition to="GetAddrTypeV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetAddrTypeV3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddrType.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<var name="addrtypev3">
						<array_ref>SNMPResp.varBind</array_ref>
						<where>
							<contains>
								<array_index index="* 0 0"/>
								<expr>pktcEDVACodecPubRepAddrType</expr>
							</contains>
						</where>
					</var>
					<if>
						<eq>
							<var_ref name="addrtypev3" index="0 0 2"/>
							<expr>1</expr>
						</eq>
						<then> 
							<var name="newaddrtypev3">
								<expr>1</expr>
							</var>
							<!--  Test for the pktcEDVACodecPubRepAddrType element -->
							<verify step="3" group="addrtypev3">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
						<elseif>
							<eq>
								<var_ref name="addrtypev3" index="0 0 2"/>
								<expr>0</expr>
							</eq>
							<then>
								<var name="newaddrtypev3">
									<expr>2</expr>
								</var>
								<!--  Test for the pktcEDVACodecPubRepAddrType element -->
								<verify step="3" group="addrtypev3">
									<eq>
										<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
										<expr>2</expr>
									</eq>
								</verify>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="GetPubAddrV3" event="SNMPResp"/>
				<transition to="GetPubAddrV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetPubAddrV3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddr.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecPubRepAddr element -->
					<verify step="3">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<msg_ref type="platform">DUT.mib1</msg_ref>
						</eq>
					</verify>
					<if>
						<ipv4>
							<msg_ref type="platform">Platform.SIP Stack 1 IP Address</msg_ref>
						</ipv4>
						<then>
							<var name="newpubaddrv3">
								<expr>0a200046</expr>
							</var>
							<var name="newpubaddrv3text">
								<expr>0a 20 00 46</expr>
							</var>
						</then>
						<elseif>
							<ipv6>
								<msg_ref type="platform">Platform.SIP Stack 1 IP Address</msg_ref>
							</ipv6>
							<then>
								<var name="newpubaddrv3">
									<expr>2003::24</expr>
								</var>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="GetRTCPXRV3" event="SNMPResp"/>
				<transition to="GetRTCPXRV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetRTCPXRV3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPXR.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecRTCPXR element -->
							<verify step="3">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
					</if>
				</response>
				<transition to="GetRTCPRateV3" event="SNMPResp"/>
				<transition to="GetRTCPRateV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetRTCPRateV3">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPRate.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecRTCPRate element -->
							<verify step="3">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>5</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="SetG711V3" event="SNMPResp"/>
				<transition to="SetG711V3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetG711V3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPkt.0,INTEGER,30][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecG711Pkt  element -->
					<verify step="4">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>30</expr>
						</eq>
					</verify>
				</response>
				<transition to="SetT38V3" event="SNMPResp"/>
				<transition to="SetT38V3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetT38V3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecT38.0,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecT38 element -->
					<verify step="4">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>2</expr>
						</eq>
					</verify>
				</response>
				<transition to="SetV152V3" event="SNMPResp"/>
				<transition to="SetV152V3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetV152V3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecV152.0,INTEGER,</expr>
								<var_ref name="newv152v3"/>
								<expr>][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecV152 element -->
					<verify step="4">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<var_ref name="newv152v3"/>
						</eq>
					</verify>
				</response>
				<transition to="SetAddrTypeV3" event="SNMPResp"/>
				<transition to="SetAddrTypeV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetAddrTypeV3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<!-- FOR NOW WE ARE GOING TO USE THE SAME ADDR TYPE THAT IS ALREADY SET -->
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddrType.0,INTEGER,</expr>
								<var_ref name="newaddrtypev3"/>
								<expr>][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecPubRepAddrType element -->
					<verify step="4">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<var_ref name="newaddrtypev3"/>
						</eq>
					</verify>
				</response>
				<transition to="SetPubAddrV3" event="SNMPResp"/>
				<transition to="SetPubAddrV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetPubAddrV3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddr.0,OCTET-STRING,</expr>
								<var_ref name="newpubaddrv3"/>
								<expr>][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecPubRepAddr element -->
					<verify step="4">
						<eq ignoreCase="true">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<var_ref name="newpubaddrv3text"/>
						</eq>
					</verify>
				</response>
				<transition to="SetRTCPXRV3" event="SNMPResp"/>
				<transition to="SetRTCPXRV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetRTCPXRV3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPXR.0,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecRTCPXR element -->
					<verify step="4">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>2</expr>
						</eq>
					</verify>
				</response>
				<transition to="SetRTCPRateV3" event="SNMPResp"/>
				<transition to="SetRTCPRateV3" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetRTCPRateV3">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPRate.0,INTEGER,60][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecRTCPRate element -->
					<verify step="4">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>60</expr>
						</eq>
					</verify>
				</response>
				<transition to="EndSecureProv" event="SNMPResp"/>
				<transition to="EndSecureProv" event="SNMPRespFailure"/>
			</state>
			
			<state ID="EndSecureProv">
				<prelude>
					<stop_capture/>
					<log promptUser="true" expr="Configure the DUT to reprovision in hybrid mode."/>
					<generate event="Branch1Event"/>
				</prelude>
				<transition to="Reboot2" event="Branch1Event"/>
			</state>
			
			<state ID="Reboot2" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<start_capture>
						<filter>
							<var_expr>
								<expr>host </expr>
								<msg_ref type="platform">DUT.IP</msg_ref>
							</var_expr>
						</filter>
					</start_capture>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
						</mod>
						<!-- Always use version 2 for a CM reset -->
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Reboot2" event="SNMPResp"/>
				<transition to="PendingRegistration2" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot2" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration2">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<!-- Step-2 from the Default Message Flow - UE Registration (DUT) Sequence Diagram- send 401-REGISTER-->
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration2 state -->
				<transition to="Authorization2" event="REGISTER"/>
			</state>
			
			<state ID="Authorization2">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Authorization state -->
				<transition to="Registered2" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization2" event="REGISTER"/>
			</state>
			
			<state ID="Registered2">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
					<if>
						<eq>
							<msg_ref type="sip">Response</msg_ref>
							<expr>200-NOTIFY</expr>
						</eq>
						<then>
							<verify step="6">
								<eq>
									<msg_ref type="sip">Response</msg_ref>
									<expr>200-NOTIFY</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<!-- Transitions for Registered state -->
				<transition to="Registered2" event="REGISTER"/>
				<transition to="Registered2" event="SUBSCRIBE"/>
				<transition to="GetCodecG711V2" event="200-NOTIFY"/>
			</state>
			
			<state ID="GetCodecG711V2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPkt.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecG711Pkt  element -->
							<verify step="7">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>20</expr>
								</eq>
							</verify>
							
						</then>
					</if>
				</response>
				<transition to="GetT38V2" event="SNMPResp"/>
				<transition to="GetT38V2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetT38V2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecT38.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecT38  element -->
							<verify step="7">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
					</if>
				</response>
				<transition to="GetV152V2" event="SNMPResp"/>
				<transition to="GetV152V2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetV152V2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecV152.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<var name="v152v2">
						<array_ref>SNMPResp.varBind</array_ref>
						<where>
							<contains>
								<array_index index="* 0 0"/>
								<expr>pktcEDVACodecV152</expr>
							</contains>
						</where>
					</var>
					<if>
						<eq>
							<var_ref name="v152v2" index="0 0 2"/>
							<expr>1</expr>
						</eq>
						<then> 
							<var name="newv152v2">
								<expr>2</expr>
							</var>
							<!--  Test for the pktcEDVACodecV152 element -->
							<verify step="7" group="v152v2">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
						<elseif>
							<eq>
								<var_ref name="v152v2" index="0 0 2"/>
								<expr>2</expr>
							</eq>
							<then>
								<var name="newv152v2">
									<expr>1</expr>
								</var>
								<!--  Test for the pktcEDVACodecV152 element -->
								<verify step="2" group="v152v2">
									<eq>
										<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
										<expr>2</expr>
									</eq>
								</verify>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="GetAddrTypeV2" event="SNMPResp"/>
				<transition to="GetAddrTypeV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetAddrTypeV2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddrType.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<var name="addrtypev2">
						<array_ref>SNMPResp.varBind</array_ref>
						<where>
							<contains>
								<array_index index="* 0 0"/>
								<expr>pktcEDVACodecPubRepAddrType</expr>
							</contains>
						</where>
					</var>
					<if>
						<eq>
							<var_ref name="addrtypev2" index="0 0 2"/>
							<expr>1</expr>
						</eq>
						<then> 
							<var name="newaddrtypev2">
								<expr>1</expr>
							</var>
							<!--  Test for the pktcEDVACodecPubRepAddrType element -->
							<verify step="7" group="addrtypev2">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
						<elseif>
							<eq>
								<var_ref name="addrtypev2" index="0 0 2"/>
								<expr>0</expr>
							</eq>
							<then>
								<var name="newaddrtypev2">
									<expr>2</expr>
								</var>
								<!--  Test for the pktcEDVACodecPubRepAddrType element -->
								<verify step="7" group="addrtypev2">
									<eq>
										<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
										<expr>2</expr>
									</eq>
								</verify>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="GetPubAddrV2" event="SNMPResp"/>
				<transition to="GetPubAddrV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetPubAddrV2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddr.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecPubRepAddr element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<msg_ref type="platform">DUT.mib1</msg_ref>
						</eq>
					</verify>
					<if>
						<ipv4>
							<msg_ref type="platform">Platform.SIP Stack 1 IP Address</msg_ref>
						</ipv4>
						<then>
							<var name="newpubaddrv2">
								<expr>0a0100e6</expr>
							</var>
							<var name="newpubaddrv2text">
								<expr>0a 01 00 e6</expr>
							</var>
						</then>
						<elseif>
							<ipv6>
								<msg_ref type="platform">Platform.SIP Stack 1 IP Address</msg_ref>
							</ipv6>
							<then>
								<var name="newpubaddrv2">
									<expr>2003::19</expr>
								</var>
								<var name="newpubaddrv2text">
									<expr>2003::19</expr>
								</var>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="GetRTCPXRV2" event="SNMPResp"/>
				<transition to="GetRTCPXRV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetRTCPXRV2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPXR.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecRTCPXR element -->
							<verify step="7">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>1</expr>
								</eq>
							</verify>
							
						</then>
					</if>
				</response>
				<transition to="GetRTCPRateV2" event="SNMPResp"/>
				<transition to="GetRTCPRateV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetRTCPRateV2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPRate.0</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<!--  Test for the pktcEDVACodecRTCPRate element -->
							<verify step="7">
								<eq>
									<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
									<expr>5</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="SetG711V2" event="SNMPResp"/>
				<transition to="SetG711V2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetG711V2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPkt.0,INTEGER,10][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecG711Pkt  element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>10</expr>
						</eq>
					</verify>
				</response>
				<transition to="SetT38V2" event="SNMPResp"/>
				<transition to="SetT38V2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetT38V2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecT38.0,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecT38 element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>2</expr>
						</eq>
					</verify>
				</response>
				<transition to="SetV152V2" event="SNMPResp"/>
				<transition to="SetV152V2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetV152V2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecV152.0,INTEGER,</expr>
								<var_ref name="newv152v2"/>
								<expr>][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecV152 element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<var_ref name="newv152v2"/>
						</eq>
					</verify>
				</response>
				<transition to="SetAddrTypeV2" event="SNMPResp"/>
				<transition to="SetAddrTypeV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetAddrTypeV2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<!-- FOR NOW WE ARE GOING TO USE THE SAME ADDR TYPE THAT IS ALREADY SET -->
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddrType.0,INTEGER,</expr>
								<var_ref name="newaddrtypev2"/>
								<expr>][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecPubRepAddrType element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<var_ref name="newaddrtypev2"/>
						</eq>
					</verify>
				</response>
				<transition to="SetPubAddrV2" event="SNMPResp"/>
				<transition to="SetPubAddrV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetPubAddrV2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecPubRepAddr.0,OCTET-STRING,</expr>
								<var_ref name="newpubaddrv2"/>
								<expr>][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecPubRepAddr element -->
					<verify step="7">
						<eq ignoreCase="true">
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<var_ref name="newpubaddrv2text"/>
						</eq>
					</verify>
				</response>
				<transition to="SetRTCPXRV2" event="SNMPResp"/>
				<transition to="SetRTCPXRV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetRTCPXRV2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPXR.0,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecRTCPXR element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>2</expr>
						</eq>
					</verify>
				</response>
				<transition to="SetRTCPRateV2" event="SNMPResp"/>
				<transition to="SetRTCPRateV2" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetRTCPRateV2">
				<prelude>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
								<expr>varBind 1 1 3 \r\n ][ , </expr>
								<expr>CL-PKTC-EUE-EDVA-MIB::pktcEDVACodecRTCPRate.0,INTEGER,27][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<!--  Test for the pktcEDVACodecRTCPRate element -->
					<verify step="7">
						<eq>
							<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
							<expr>27</expr>
						</eq>
					</verify>
				</response>
				<transition to="END" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
		</states>
	</fsm>
</pc2xml>
