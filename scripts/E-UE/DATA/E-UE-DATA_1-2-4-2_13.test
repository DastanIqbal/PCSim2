#//********************************************************************
#// Filename: E-UE-DATA_1-2-4-2_13.test
#// Author: Matthew Forbes
#// Creation Date: 11/10/2008
#// Modified by:
#//
#//
#//********************************************************************
#// Description:
#//    TC1598 Test Case E-UE-DATA_1-2-4-2_13 pktcDevEvLogIndex Content Verification
#//
#//
#// Objective:
#//    To verify the content of the MIB object pktcDevEvLogIndex
#//
#// PacketCable DUT:
#//    MTA
#//
#// Test Steps:
#//    - Initial configuration
#//    - Start sniffer
#//    - TFTP GET MTA config file
#//    - TFTP PUT and SNMP RESET
#//    - Check Provisioning state
#//    - Perform mib check
#//    - Stop sniffer
#//    - Delete MTA config file
#//    
#//
#// Notes:
#//    - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-4-2_13.test 7406 2010-07-20 17:17:37Z dthakore $ }

set test_case E-UE-DATA_1-2-4-2_13-
set step_num 1

## Build TopLevel Window so user can select if MTA Device supports nvram storage
set storage "NO"
set waitvar 0
toplevel .storages
focus -force .storages
label .storages.question -text "Please select whether MTA supports NVRAM Event Storage"
radiobutton .storages.yes -text YES -variable storage -value YES
radiobutton .storages.no -text NO -variable storage -value NO
button .storages.ok -text "OK" -width 15 -command {destroy .storages ; set waitvar 1}
grid .storages.question -sticky w -pady 5
grid .storages.no -sticky w -pady 5
grid .storages.yes -sticky w -pady 5
grid .storages.ok -sticky we -pady 5
vwait waitvar
#######################################################
# Added stop DNS service - MLF - 4/28/08
verify_signal "Stop DNS service on $CMS_IP (settings>control panel>administrative tools>computer mgmt>
    services and applications>services>ISC BIND)"

DoStep ${test_case}${step_num} "Initial Configuration" {
    LogMsg "--- Init PROV module ---"
    Init_PROV
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
    
} {PASS_STEP}

# Added clear table - MLF - 4/28/08
DoStep ${test_case}[incr step_num] "Clear pktcDevEventLogTable" {
    LogMsg "Clear pktcDevEventLogTable"
    set val [SNMP_SET 1.3.6.1.4.1.4491.2.2.3.1.1.0 bits 0 $MTA_IP]
} {IsEqual $val 0}

DoStep ${test_case}[incr step_num] "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {IsEqual $val 1}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]     
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {    
        set search_index [lsearch $text_list $pctext]       
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}   
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index]
    set val1 $index 
    if {$index == ""} { set command FAIL_STEP } 
} {eval $command}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set type Unsigned32
    set default_value "-range 0-4294967295"  ;# Range 0 - 2^32-1  
} {SnmpROVerify ${oid_pktcDevEvLogIndex}.$index $MTA_IP $type $default_value 4}

DoStep ${test_case}[incr step_num] "Configure Provisioning Service for both Primary and Secondary DNS" {
} {
    # verify_signal "Configure the Provisioning Service for both Primary and Secondary DNS server entries(MTATC1598).\n\
# (DNS2 is primary and should be unavailable, DNS1 is secondary)Click YES to continue."
    PROV_MODIFY_DEVICE $MTA_MAC MTATC1598
    PROV_DEPLOY_DHCP
}

DoStep ${test_case}[incr step_num] "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait for MTA to reboot" 60
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "pktcDevEvLogIndex Content Verification" {
    set command PASS_STEP
    set index 0
    set pc_event_text [list "Provisioning Complete"]     
    set text_list [SNMP_TABLE_GET $oid_pktcDevEvLogText $MTA_IP LIST 20]
    foreach pctext $pc_event_text {    
        set search_index [lsearch $text_list $pctext]       
        if {$search_index == -1} {
            LogMsg "ERROR: Unable to locate Provisioning Complete Log index value = $search_index"
            set command FAIL_STEP
        } else {set index [expr $search_index +1]; break}   
    }
    set index [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP $index] 
    if {$index == ""} { set command FAIL_STEP } 
} {eval $command}

DoStep ${test_case}[incr step_num] "GET pktcDevEvLogIndex Value Again; It must have incremented via NVRAM Storage Rule" {
    # set val2 [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP 1 20]  
    set val2 $index
    if {$storage == "NO"} {
        if {$val2 >=2} {
            set command PASS_STEP        
        } else  {set command FAIL_STEP}
    } else  {
        set val2 [SNMP_TABLE_GET $oid_pktcDevEvLogIndex $MTA_IP 2 20]
        if {$val2 >= [expr $val1 +1]} {
            set command PASS_STEP
        } else  {set command FAIL_STEP}
    }
} {eval $command}

DoStep ${test_case}[incr step_num] "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan 
} {PASS_STEP}

DoStep ${test_case}[incr step_num] "Restore provisioning server" {
} {
    # verify_signal "Restore provsioning server(MTAFORCW_122)."
   PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122
   PROV_DEPLOY_DHCP
}

verify_signal "Start DNS service on $CMS_IP"


Cleanup
