<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)




-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.7.2.12" 
	descrip="Auto Callback Deactivation with active AC- Anonymous" 
	number="RST-UE 1.7.2.12">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup" sub="prelude"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<NE targets="*69 *66 *86"/>	
		<state ID="Setup" sub="prelude">
			<send protocol="sip" msgtype="Invite">
				<mod modtype="delete" hdr="P-Asserted-Identity"/>
				<mod modtype="replace" hdr="From" param="name-addr">
					<expr>"Anonymous" &lt;sip:anonymous@anonymous.invalid&gt;</expr>
				</mod>
			</send>
		</state>
		
		<state ID="EndCall1" ES="true">
			<transition to="OffHook2" event="SessionTerminated"/>
		</state>
		
		<state ID="OffHook2">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="SetupCallback" event="OffHookComplete"/>
		</state>
				
		<state ID="SetupCallback">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>*69</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
					 or a 180 to the INVITE -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<sleep time="200"/>
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<sleep time="200"/>
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="SetupCallback" event="DialDigitsComplete"/>
			<transition to="AlertingCallback" event="INVITE"/>
		</state>
			
		<state ID="AlertingCallback">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
						 the system is using reliability -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliability required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite"/>
					</then>
				</if>
			</response>
			<transition to="AlertingCallback" event="DialDigitsComplete"/>
			<transition to="AlertingCallback" event="PRACK"/>
			<transition to="AlertingCallback" event="UPDATE"/>
			<transition to="AnswerCallback" event="ALERTING_UAS"/>
		</state>
			
		<state ID="AnswerCallback" timer="15000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Sending 200-Invite-->
						<send protocol="sip" msgtype="200-INVITE"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="AnswerCallback" event="UPDATE"/>
			<transition to="AnswerCallback" event="TimerExpired"/>
			<transition to="ConnectCallback" event="ACK"/>
		</state>
		
		<state ID="ConnectCallback" timer="1000">
			<transition to="ReleaseCallback" event="TimerExpired"/>
		</state>
		
		<state ID="ReleaseCallback">
			<prelude>
				<!--Sending BYE to peer to terminate call.-->
				<send protocol="sip" msgtype="BYE"/>
			</prelude>
			<transition to="OnHookCallback" event="200-Bye"/>
		</state>

		<state ID="OnHookCallback">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="EndCallback" event="OnHookComplete"/>
		</state>	
		
		<state ID="EndCallback" ES="true">
			<transition to="OffHook3" event="SessionTerminated"/>
		</state>
		
		<state ID="OffHook3">
			<prelude>
				<send protocol="utility" msgtype="OffHook"/>
			</prelude>
			<transition to="SetupAutoCallback" event="OffHookComplete"/>
		</state>
		
		<state ID="SetupAutoCallback">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>*66</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="486-INVITE"/>
					</then>
				</if>
			</response>
			<transition to="SetupAutoCallback" event="DialDigitsComplete"/>
			<transition to="WaitAck" event="INVITE"/>
		</state>
		
		<state ID="WaitAck">
			<transition to="WaitAck" event="DialDigitsComplete"/>
			<transition to="Subscribe1" event="ACK"/>
		</state>
		
		<state ID="Subscribe1">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>SUBSCRIBE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-SUBSCRIBE"/>
						<send protocol="sip" msgtype="NOTIFY"/>
					</then>
				</if>
			</response>
			<transition to="Notification" event="SUBSCRIBE"/>
		</state>
		
		<state ID="Notification">
			<transition to="OnHook1" event="200-NOTIFY"/>
		</state>
		
		<state ID="OnHook1">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="Subscribe2" event="OnHookComplete"/>
		</state>
		
		<state ID="Subscribe2">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<expr>*86</expr>
					</mod>
				</send>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>SUBSCRIBE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-SUBSCRIBE"/>
						<verify step="7" requirements="REQ16707, REQ16708">
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>dialog</expr>
							</contains>
						</verify>
						
						<verify step="7" requirements="REQ16707, REQ16708">
							<eq>
								<msg_ref type="sip">SUBSCRIBE.Request-Line.Request-URI</msg_ref>
								<msg_ref type="sip" msg_instance="last">INVITE.Request-Line.Request-URI</msg_ref>
							</eq>
						</verify>
						<verify step="7" requirements="REQ16707, REQ16708">
							<eq>
								<msg_ref type="sip">SUBSCRIBE.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Subscribe2" event="DialDigitsComplete"/>
			<transition to="END" event="SUBSCRIBE"/>
		</state>
	</add_to>
</pc2xml>
