################################################################################
#// Filename: E-UE-PROV_1-1-2-27.test
#// Author:   Matthew Forbes
#// Creation Date: 1/10/06
#// Modified by: M.Forbes - 3/12/08 - Removed repeated DHCP discover OFFER process in
#// sequence check in step 14-1
################################################################################
#// Description:
#//     TC1573 TEST CASE PROV 5.71 MTA Ability to Retry all resolved IP addresses 
#//     from SNMP Entity FQDN before return to MTA-1 (No SNMPv2c response in Hybrid Flow)
#// Objective:
#//     Test the MTA ability to retry all resolved IP addresses 
#//     from SNMP Entity FQDN contained in Option 122, sub-option 3 in the absence of a
#//     valid SNMPv2c response from the provisioning application when hybrid flow is indicated.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Configure provisioning server
#//     - Start sniffer capture
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Configure DNS
#//     - Reset MTA using SNMPv2c
#//     - Verify SNMP INFORM to first IP address
#//     - Verify No SNMP RESPONSE
#//     - Verify SNMP INFORM to second IP address
#//     - Verify No SNMP RESPONSE
#//     - Verify SNMP INFORM to third IP address
#//     - Verify No SNMP RESPONSE
#//     - Verify DUT returns to MTA-1
#//     - Stop Capture
#//     - Restore provisioning server
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Cleanup
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//
################################################################################

global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-27.test 7406 2010-07-20 17:17:37Z dthakore $ }

################################################################################

DoStep "E-UE-PROV_1-1-2-27_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 1457 $MTA_MAC

} { PASS_STEP }


DoStep "E-UE-PROV_1-1-2-27_3-1" "Setup policy in provisioning server" {
    LogMsg "Setup policy in provisioning server"
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }

################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-2-27_4-1" "Reboot CM & MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-27_5-1" "pktcMtaDevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for 90 seconds for reboot" 90
    
    # Initial variables
    set start_time   [clock clicks -milliseconds]
    set current_time [clock clicks -milliseconds]
    set diff_time    [expr $current_time - $start_time]
    set timeout      60000
    
    while {($val != 1) && ($diff_time < $timeout)} {
        set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
        
        update ;# Update other events
        set current_time [clock clicks -milliseconds]
        set diff_time    [expr $current_time - $start_time]
        after 2000 ;# Wait for a few seconds
    }
} {
    IsEqual $val 1
}


DoStep "E-UE-PROV_1-1-2-27_5-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || host $CM_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}


################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-2-27_6-1" "Setup policy in provisioning server" {
    LogMsg "Setup policy in provisioning server"
    # Set value for third provisioning server ip address
    set PROV_DHCP3_IP 10.32.0.73
} {
    verify_signal "Set IP Helper Addresses on CMTS to $PROV_DHCP1_IP, $PROV_DHCP2_IP, $PROV_DHCP3_IP"
    # verify_signal "Set up sessions with the provisioning servers $PROV_DHCP1_IP, $PROV_DHCP2_IP and $PROV_DHCP3_IP to block the SNMP port
    # (setup SSH session with server,PuTTY or other, at $PROV_DHCP1_IP and type the
    # command: iptables -A pact_chain -p udp -s ! $PROV_DHCP1_IP --dport 162 -j DROP
    # then WAIT to hit enter, use the same string but change $PROV_DHCP1_IP
    # to $PROV_DHCP2_IP & $PROV_DHCP3_IP on their respective sessions and enter.)"
    PACT_SWITCH_PROV_TO $PROV_DHCP2_IP
    PROV_BLOCK_SNMP_TRAP_PORT $PROV_DHCP2_IP
    PACT_SWITCH_PROV_TO $PROV_DHCP3_IP
    PROV_BLOCK_SNMP_TRAP_PORT $PROV_DHCP3_IP
    PACT_SWITCH_PROV_BACK
    PROV_MODIFY_DEVICE $MTA_MAC MTATC1573 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
}

##############################################################################
#         MTA RESET
###############################################################################
DoStep "E-UE-PROV_1-1-2-27_7-1" "Reset MTA" {
    set val [SNMPvN_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP]
    LogMsg "Reset MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-27_7-2" "Block SNMP on Provisioning Server 1" {
    LogMsg "Block SNMP on Provisioning Server 1"
    # verify_signal "IMMEDIATELY Block SNMP on Provisioning Server 1!"
    PROV_BLOCK_SNMP_TRAP_PORT $PROV_DHCP1_IP
} {
    PASS_STEP
}

DoStep "E-UE-PROV_1-1-2-27_8-1" "Wait for MTA to attempt to reprovision" {
    LogMsg "Monitor the trace."
} {
    verify_signal "Monitor trace for SNMP Inform messages to $PROV_DHCP1_IP, $PROV_DHCP2_IP, $PROV_DHCP3_IP with no response
    and the device then returns to MTA-1 (DHCP Discover)."
    # Wait 2 seconds for MTA to complete MTA 1-9
    actionWait "Wait for 2 seconds for MTA to complete MTA 1-9" 2
}


DoStep "E-UE-PROV_1-1-2-27_8-2" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-2-27_8-3" "Unblock Ports" {
    LogMsg "Unblock Ports"    
    # verify_signal "Unblock Ports (For the 3 sessions use the same strings as before, but set iptables -A to iptables -D)."
    PROV_UNBLOCK_SNMP_TRAP_PORT $PROV_DHCP1_IP
    PACT_SWITCH_PROV_TO $PROV_DHCP2_IP
    PROV_UNBLOCK_SNMP_TRAP_PORT $PROV_DHCP2_IP
    PACT_SWITCH_PROV_TO $PROV_DHCP3_IP
    PROV_UNBLOCK_SNMP_TRAP_PORT $PROV_DHCP3_IP
    PACT_SWITCH_PROV_BACK
} {
    PASS_STEP
}
################ Initialize parsing tool and parse data ################

DoStep "E-UE-PROV_1-1-2-27_8-3" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-2-27_8-4" "Parse all data into database" {
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "E-UE-PROV_1-1-2-27_8-5" "Verify SNMP INFORM from MTA to PROV Server 1" {
    LogMsg "Verify SNMP INFORM from MTAto PROV Server 1"
} {
    set mtaMac [string toupper [regsub -all {:} [AddColMac $MTA_MAC] { }] ]
    # Verify MTA MAC
    VerifyValue $msgID_MTA "INANY SNMP SNMP_INFORM HEADERDSTIP" "IS" "$PROV_DHCP1_IP"
}

DoStep "E-UE-PROV_1-1-2-27_9-1" "Verify NO SNMP Response from Provisioning Server 1" {
    LogMsg "Verify NO SNMP INFORM from Provisioning server 1"
} {
    VerifyNotValue $msgID_MTA "INANY SNMP SNMP_RESPONSE HEADERSRCIP" "IS" "$PROV_DHCP1_IP"
}

DoStep "E-UE-PROV_1-1-2-27_10-1" "Verify SNMP INFORM from MTA to PROV Server 2" {
    LogMsg "Verify SNMP INFORM from MTAto PROV Server 2"
} {
    # Verify MTA MAC
    VerifyValue $msgID_MTA "INANY SNMP SNMP_INFORM HEADERDSTIP" "IS" "$PROV_DHCP2_IP"
}

DoStep "E-UE-PROV_1-1-2-27_11-1" "Verify NO SNMP Response from Provisioning Server 2" {
    LogMsg "Verify NO SNMP INFORM from Provisioning server 2"
} {
    VerifyNotValue $msgID_MTA "INANY SNMP SNMP_RESPONSE HEADERSRCIP" "IS" "$PROV_DHCP2_IP"
}

DoStep "E-UE-PROV_1-1-2-27_12-1" "Verify SNMP INFORM from MTA to PROV Server 3" {
    LogMsg "Verify SNMP INFORM from MTAto PROV Server 3"
} {
    VerifyValue $msgID_MTA "INANY SNMP SNMP_INFORM HEADERDSTIP" "IS" "$PROV_DHCP3_IP"
}

DoStep "E-UE-PROV_1-1-2-27_13-1" "Verify NO SNMP Response from Provisioning Server 3" {
    LogMsg "Verify NO SNMP INFORM from Provisioning server 3"
} {
    VerifyNotValue $msgID_MTA "INANY SNMP SNMP_RESPONSE HEADERSRCIP" "IS" "$PROV_DHCP3_IP"
}


DoStep "E-UE-PROV_1-1-2-27_14-1" "MTA Sequence" {
    LogMsg "Verify MTA Sequence"
    
    # Set MTA SEQUENCE to check
################################################################################
#        Removed this portion of verification, not necessary - Matt Forbes - 3/12/08
#     # set MTA_SEQUENCE DHCP:DISCOVER,DHCP:OFFER,DHCP:DISCOVER,DHCP:OFFER,DHCP:DISCOVER,DHCP:OFFER,\
################################################################################
    set MTA_SEQUENCE "DHCP:DISCOVER,DHCP:OFFER,DHCP:REQUEST,DHCP:ACK,\
            DNS:DNS_QUERY_HOST,DNS:DNS_RESPONSE_HOST,SNMP:SNMP_INFORM,\
            SNMP:SNMP_INFORM,SNMP:SNMP_INFORM,DHCP:DISCOVER,DHCP:OFFER,DHCP:DISCOVER,DHCP:OFFER,\
            DHCP:DISCOVER,DHCP:OFFER,DHCP:DISCOVER,DHCP:OFFER,DHCP:REQUEST,DHCP:ACK"
    # Remove whitespace
    regsub -all { } $MTA_SEQUENCE {} MTA_SEQUENCE
} {
    # Verify TOD Response
    VerifyValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE" "" ""
}


################## Skip to here for non-automated test #############


DoStep "E-UE-PROV_1-1-2-27_18-1" "Restore policy in provisioning server" {
    LogMsg "Restore policy in provisioning server"
} {
    verify_signal " Remove additional IP Helper addresses"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
}

################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-2-27_19-1" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP ]
    LogMsg "Reset of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-27_19-2" "pktcMTADevProvisioningState Content Verification" {
    actionWait "Wait 60 seconds for CM/MTA to provision" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State" 49
    LogMsg "             - Expected : 1" 49
    LogMsg "             - Received : $val" 49
} {
    IsEqual $val 1
}
################################################################################
# Cleanup
################################################################################

Cleanup
return 0

