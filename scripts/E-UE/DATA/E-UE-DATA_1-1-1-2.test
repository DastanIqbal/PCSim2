#//****************************************************************************
#// Filename: E-UE-DATA_1-1-1-2.test
#// Author:   Matthew Forbes
#// Creation Date: 11/05/2008
#// Modified by:
#//
#//
#//
#//****************************************************************************
#// Description:
#//     TC2734 TEST CASE E-UE-DATA 1.1.1.2 Ability of eUE to Support Battery Backup MIBs
#//        (Scenario 1)
#//
#// Objective:
#//     If the eUE supports battery backup, this test verifies the read-only and read-write functionality
#//     for a subset of battery backup MIB objects. Additionally, this test checks functionality for specific
#//     battery usage.
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset EDVA
#//     - Check Provisioning state
#//     - Check values MIB values
#//     - Check read-write capablities
#//     - Stop Sniffer
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//****************************************************************************




set SCRIPT_VERSION { # $Id: E-UE-DATA_1-1-1-2.test 7406 2010-07-20 17:17:37Z dthakore $ }
global SCRIPT_VERSION

#
# Verify SNMPv3 API is loaded
#
if {!$SNMP_V3_API} {
    DoStep "verify snmp" "verify snmp" {
    } {
        verify_signal "It seems as though you do not have a Provisioning server API application.\nThis test can not be executed without a API or sort of SNMPv3 Utility.\
                to integrate your own SNMPv3 Utility, you must write your own code to inteface with that utility."
    }
}



DoStep "E-UE-DATA_1-1-1-2_1-1" "Configure DUT" {
    LogMsg "--- Configure DUT ---"
    Init_PROV
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} {PASS_STEP}

DoStep "E-UE-DATA_1-1-1-2_1-2" "Verify Battery" {
    tk_messageBox -message "Please ensure a battery is installed in the EDVA and AC power is connected, then press OK"
} {
    PASS_STEP
}

################################# START SNIFFER ###############################

DoStep "E-UE-DATA_1-1-1-2_1-3" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

################ RESET CM and MTA and VERIFY PROVISIONING STATE ################

DoStep "E-UE-DATA_1-1-1-2_1-4" "Reset EDVA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Reset of CM and DVA has passed"
} {
    IsEqual $val 0
}
DoStep "E-UE-DATA_1-1-1-2_1-5" "pktcMtaDevProvisioningState Content Verification" {
    actionWait "Wait for MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of EDVA Provisioning State is: $val"
} {
    IsEqual $val 1
}

#
# Retrieve upsIdentManufacturer MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_2-1" "Verify upsIdentManufacturer Content" {
    # Changed to SNMPv2 per ECN
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.1.1.0 $CM_IP]
    # For now, prompt user with value.  Until I figure out what value to base the comparison on
    set pf ""
    set pf [tk_messageBox -type yesno -message "The UPS Manufacturer value is '$result_1', is this correct?"]
} {
    if {$pf == "yes"} {
        PASS_STEP
    } else {
        FAIL_STEP
    }
}


#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_3-1" "Attempt SNMP Set" {
    set type  STRING
    set newValue "SomeString"
    set oid ".1.3.6.1.2.1.33.1.1.1.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Retrieve upsIdentModel MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_4-1" "Verify upsIdentModel Content" {
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.1.2.0 $CM_IP]
    set pf ""
    set pf [tk_messageBox -type yesno -message "The UPS Model value is '$result_1', is this correct?"]
} {
    if {$pf == "yes"} {
        PASS_STEP
    } else {
        FAIL_STEP
    }
}


#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_5-1" "Attempt SNMP Set" {
    set type  STRING
    set newValue "SomeString"
    set oid ".1.3.6.1.2.1.33.1.1.2.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Retrieve upsIdentAgentSoftwareVersion MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_6-1" "Verify upsIdentAgentSoftwareVersion Content" {
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.1.4.0 $CM_IP]
    # For now, prompt user with value.  Until I figure out what value to base the comparison on
    set pf ""
    set pf [tk_messageBox -type yesno -message "The upsIdentAgentSoftwareVersion value is '$result_1', is this correct?"]
} {
    if {$pf == "yes"} {
        PASS_STEP
    } else {
        FAIL_STEP
    }
}

#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_7-1" "Attempt SNMP Set" {
    set type  STRING
    set newValue "SomeString"
    set oid ".1.3.6.1.2.1.33.1.1.4.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check SNMP Set Failed
}


#
# Retrieve upsInputNumLines MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_8-1" "Verify upsInputNumLines Content" {
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.3.2.0 $CM_IP]
    # For now, prompt user with value. 
    LogMsg "--- upsInputNumLines = $result_1"
    set pf ""
    set pf [tk_messageBox -type yesno -message "Is the value '$result_1' correct for the upsInputNumLines?\n\n The value should be the number of batteries installed, PLUS 1 (AC power)"]
} {
    if {$pf == "yes"} {
        PASS_STEP
    } else {
        FAIL_STEP
    }
}


#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_9-1" "Attempt SNMP Set" {
    set type  INTEGER
    set newValue "8"
    set oid ".1.3.6.1.2.1.33.1.3.2.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Retrieve upsOutputSource MIB, verify value
#
DoStep "E-UE-DATA_1-1-1-2_10-1" "Verify upsOutputSource Content" {
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.4.1.0 $CM_IP]
    LogMsg "--- upsOutputSource = $result_1"
} {
    compare_value $result_1 3 ;# Verify value is 3 (normal)
}


#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_11-1" "Attempt SNMP Set to none(2)" {
    set type  INTEGER
    set newValue "2"
    set oid ".1.3.6.1.2.1.33.1.4.1.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_11-2" "Attempt SNMP Set to battery(5)" {
    set type  INTEGER
    set newValue "5"
    set oid ".1.3.6.1.2.1.33.1.4.1.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}

#
# Disconnect Power
#
DoStep "E-UE-DATA_1-1-1-2_12-1" "Disconnect AC Power" {
    tk_messageBox -message "Please disconnect the AC Power, then press OK"
} {
    PASS_STEP
}

#
# Retrieve upsOutputSource MIB, verify value
#
DoStep "E-UE-DATA_1-1-1-2_13-1" "Verify upsOutputSource Content" {
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.4.1.0 $CM_IP]
    LogMsg "--- upsOutputSource = $result_1"
} {
    compare_value $result_1 5 ;# Verify value is 5 (battery)
}


#
# Reconnect AC Power
#
DoStep "E-UE-DATA_1-1-1-2_14-1" "Reconnect AC Power" {
    tk_messageBox -message "Please reconnect AC Power and press OK"
} {
    PASS_STEP
}


#
# Retrieve upsOutputNumLines MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_15-1" "Verify upsOutputNumLines Content" {
    set result_1 [SNMPvN_GET .1.3.6.1.2.1.33.1.4.3.0 $CM_IP]
    # For now, prompt user with value.  
    LogMsg "--- upsOutputNumLines = $result_1"
    set fail_val 0
    if {$result_1 < 2} {
        set fail_val 1
        LogMsg "!! The upsOutputNumLines MUST be at least 2.  Actual value is: $result_1"
    }
} {
    FAIL_PASS_STEP $fail_val
}


#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_16-1" "Attempt SNMP Set" {
    set type  INTEGER
    set newValue "2"
    set oid ".1.3.6.1.2.1.33.1.4.3.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Retrieve upsAlarmsPresent MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_17-1" "Verify upsAlarmsPresent Content" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.6.1.0 $CM_IP]
    set fail_val 0
    if  {![string is integer $result]} {
        set fail_val 1
        LogMsg "!! The MTA did not return a proper value for the upsAlarmsPresent MIB.  Actual value is <$result>"
    }
    set alarms_powerOn $result
} {
    FAIL_PASS_STEP $fail_val
}


#
# Disconnect Power
#
DoStep "E-UE-DATA_1-1-1-2_18-1" "Disconnect AC Power" {
    tk_messageBox -message "Please disconnect the AC Power from the EDVA and then press OK"
} {
    PASS_STEP
}

#
# Verify upsAlarmsPresent incremented after power disconnect
DoStep "E-UE-DATA_1-1-1-2_19-1" "Verify upsAlarmsPresent Content" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.6.1.0 $CM_IP]
    set fail_val 0
    set alarms_powerOff $result
} {
    compare_value $alarms_powerOff [expr $alarms_powerOn + 1] ;# Value must increment when power was removed
}

#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_20-1" "Attempt SNMP Set" {
    # set type  INTEGER
    set type  Unsigned32
    set newValue "1"
    set oid ".1.3.6.1.2.1.33.1.6.1.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Retrieve upsAlarmDescr MIB, prompt use with value
#
DoStep "BE-UE-DATA_1-1-1-2_22-1" "Verify upsAlarmDescr Content" {
    set result [SNMPvN_TABLE_GET .1.3.6.1.2.1.33.1.6.2 $CM_IP 1]
} {
    compare_value $result "upsAlarmOnBattery"
}

#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_23-1" "Attempt SNMP Set" {
    # set type  "STRING"
    set type  "OBJECT IDENTIFIER"
    # set newValue "SomeRandomString"
    set newValue "upsAlarmOnBattery"
    set oid ".1.3.6.1.2.1.33.1.6.2.1.2.1"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Retrieve upsAlarmDescr MIB, prompt use with value
#
DoStep "E-UE-DATA_1-1-1-2_24-1" "Verify upsAlarmTime Content" {
    set sysUpTime [SNMPvN_GET .1.3.6.1.2.1.1.3.0 $CM_IP 2c private 1]
    set upsAlarmTime [SNMPvN_TABLE_GET .1.3.6.1.2.1.33.1.6.2 $CM_IP 2]
} {
    verify_signal "The sysUpTime value should be aproximately the same as the AlarmTime value.  Press 'Yes' to PASS, 'No' to FAIL.\n\
            sysUpTime =\t$sysUpTime
    upsAlarmTime=\t$upsAlarmTime\n"
}

#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_25-1" "Attempt SNMP Set" {
    set type  Timeticks
    set newValue "80000"
    set oid ".1.3.6.1.2.1.33.1.6.2.1.3"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Reconnect Power
#
DoStep "E-UE-DATA_1-1-1-2_26-1" "Reconnect AC Power" {
    tk_messageBox -message "Please reconnect the AC Power for the EDVA and then press OK"
} {
    PASS_STEP
}

##########################################################################
# SNMP GET
##########################################################################
DoStep "E-UE-DATA_1-1-1-2_27-1" "Verify upsIdentName Content" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.1.5.0 $CM_IP]
    
} {
    compare_value $result "_"
}

##########################################################################
# Attempt SNMP SET
##########################################################################
DoStep "E-UE-DATA_1-1-1-2_28-1" "Attempt SNMP_SET on upsIdentName" {
    set result [SNMPvN_SET .1.3.6.1.2.1.33.1.1.5.0 STRING "NameSetByScript" $CM_IP]
} {
    PASS_STEP
}

##########################################################################
#  Verify previous SNMP Set succeeded
##########################################################################
DoStep "E-UE-DATA_1-1-1-2_28-2" "Verify upsIdentName Content" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.1.5.0 $CM_IP]
    
} {
    compare_value $result "NameSetByScript"
}

#
# Retrieve upsSecondsOnBattery MIB
#
DoStep "E-UE-DATA_1-1-1-2_29-1" "Verify upsSecondsOnBattery Content" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.2.2.0 $CM_IP]
} {
    compare_value $result 0 ;# Verify value is '0'
}

#
# Attempt SNMP Set, verify failure
#
DoStep "E-UE-DATA_1-1-1-2_30-1" "Attempt SNMP Set" {
    set type  INTEGER
    set newValue 4
    set oid ".1.3.6.1.2.1.33.1.2.2.0"
    LogMsg "Attempting SNMP set on CM   = $CM_IP" 49
    LogMsg "                       Value = $newValue" 49
    LogMsg "                       Type  = $type " 49
    LogMsg "                       OID   = $oid" 49
    set result [SNMPvN_SET $oid $type $newValue $CM_IP]
} {
    compare_value $result 2 ;# check MIB is not writable
}


#
# Disonnect Power
#
DoStep "E-UE-DATA_1-1-1-2_31-1" "Disconnect AC Power" {
    tk_messageBox -message "Please Disconnect AC Power and Press OK"
    actionWait "Please wait 5 minutes" 300
} {
    PASS_STEP
}

#
# Retrieve upsSecondsOnBattery MIB
#
DoStep "E-UE-DATA_1-1-1-2_32-1" "Verify upsSecondsOnBattery Content" {
    set result [SNMPvN_GET .1.3.6.1.2.1.33.1.2.2.0 $CM_IP]
} {
    verify_signal "The value for upsSecondsOnBattery is $result. This should be approximately 5 mins(300 secs)."
}

#
# Reconnect Power
#
DoStep "E-UE-DATA_1-1-1-2_33-1" "Disconnect AC Power" {
    tk_messageBox -message "Please reconnect the AC Power for the EDVA and then press OK"
} {
    PASS_STEP
}


##################### STOP SNIFFER AND SAVE CAPTURE FILES #####################

DoStep "E-UE-DATA_1-1-1-2_35-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} { PASS_STEP }


Cleanup

