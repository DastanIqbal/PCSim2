################################################################################
#// Filename: E-UE-DATA_1-2-5-1.test (PACT)
#// Author:   Matthew Forbes
#//
#//
#//
#// Creation Date: November 11, 2008
#// Modified by:
################################################################################
#// Description:
#//     TC2757 TEST CASE E-UE-DATA_1-2-5-1 To test the ability of MTA to populate the ifTable
#//
#// Objective:
#//     This test verifies that the EDVA supports the required objects in the ifTable,
#//     as well as the values specified for PacketCable devices.
#//
#//
#// PacketCable DUT:
#//     EDVA
#//
#// Test Steps:
#//     - Initial configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv3 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//     - Hybrid configuration
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state
#//     - Invoke SNMPv2 API and bulk query MIB objects and validate values
#//     - Stop sniffer
#//     
#//
#// Notes:
#//     - Requires provPrimitives.tcl 
#//     
#//    
################################################################################
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-DATA_1-2-5-1.test 7453 2010-08-06 15:27:24Z ghassler $ }


DoStep "E-UE-DATA_1-2-5-1_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    Init_PART
    # ProvCreateConfig 291 $MTA_MAC
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-1_2-1" "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-1_2-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}



############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-1_2-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_2-4" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
        set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


DoStep "E-UE-DATA_1-2-5-1_6-1" "ifIndex Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifIndex $MTA_IP 1]
} {
    IsEqual $val 1
}


DoStep "E-UE-DATA_1-2-5-1_3-2" "ifDescr Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifDescr $MTA_IP 1]
} {
    IsEqual $val "DOCSIS Embedded Interface"
}


DoStep "E-UE-DATA_1-2-5-1_3-3" "ifType Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifType $MTA_IP 1]
} {
    IsEqual $val 1
}


DoStep "E-UE-DATA_1-2-5-1_3-4" "ifMtu Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifMtu $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_3-5" "ifSpeed Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifSpeed $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_3-6" "ifPhysAddress Content Verification" {
    set mtamac [string toupper [AddColMac $MTA_MAC]]
    set val [SNMP_TABLE_GET $oid_ifPhysAddress $MTA_IP 1]
} {
    IsEqual $val $mtamac
}

DoStep "E-UE-DATA_1-2-5-1_3-7" "ifAdminStatus Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifAdminStatus $MTA_IP 1]
} {
    IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-1_3-8" "ifOperStatus Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifOperStatus $MTA_IP 1]
} {
    IsEqual $val 1
}



DoStep "E-UE-DATA_1-2-5-1_3-10" "ifInOctets Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifInOctets $MTA_IP 1]
} {
    if {$val == 0} {
        LogMsg "--- MTA does not implement ifInOctets MIB ---"
    } else  {
        verify_signal "The value of ifInOctets MIB object is $val. Is this correct?
        (Positive interger value for the number of octets is expected)"
    }
}

DoStep "E-UE-DATA_1-2-5-1_3-11" "ifDiscards Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifDiscards $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_3-12" "ifErrors Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifErrors $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_3-13" "ifUnknownProtos Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifUnknownProtos $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_3-14" "ifOutOctets Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifOutOctets $MTA_IP 1]
} {
    if {$val == 0} {
        LogMsg "--- MTA does not implement ifOutOctets MIB ---"
    } else  {
        verify_signal "The value of ifOutOctets MIB object is $val. Is this correct?
        (Positive interger value for the number of octets is expected)"
    }
}

DoStep "E-UE-DATA_1-2-5-1_3-15" "ifOutUcastPkts Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifOutUcastPkts $MTA_IP 1]
} {
    if {$val == 0} {
        LogMsg "--- MTA does not implement ifOutOctets MIB ---"
    } else  {
        verify_signal "The value of ifOutUcastPkts MIB object is $val. Is this correct?
        (Positive interger value for the number of packets is expected)"
    }
}

DoStep "E-UE-DATA_1-2-5-1_3-16" "ifOutDiscards Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifOutDiscards $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_3-17" "ifOutErrors Content Verification" {
    set val [SNMP_TABLE_GET $oid_ifOutErrors $MTA_IP 1]
} {
    IsEqual $val 0
}

################################# For each endpoint ###############################################


set lines $MTA1_NUMLINES
for {set ln 1;set index 2;set ifindex 9} {$ln <= $lines} {incr ln;incr index;incr ifindex} {
    
    DoStep "E-UE-DATA_1-2-5-1_3-$ln-a" "ifIndex Content Verification" {
        set val [SNMP_TABLE_GET $oid_ifIndex $MTA_IP $index]
    } {
        IsEqual $val $ifindex
    }
    
    DoStep "E-UE-DATA_1-2-5-1_3-$ln-b" "ifDescr Content Verification" {
        set val [SNMP_TABLE_GET $oid_ifDescr $MTA_IP $index]
    } {
        IsEqual $val "Voice Over Cable Interface"
    }
    
    DoStep "E-UE-DATA_1-2-5-1_3-$ln-c" "ifType Content Verification" {
        set val [SNMP_TABLE_GET $oid_ifType $MTA_IP $index]
    } {
        IsEqual $val 198
    }
    
    DoStep "E-UE-DATA_1-2-5-1_3-$ln-d" "ifAdminStatus Content Verification" {
        set oid_ifAdminStatus 1.3.6.1.2.1.2.2.1.7
        set val [SNMP_TABLE_GET $oid_ifAdminStatus $MTA_IP $index]
    } {
        IsEqual $val 1
    }
    
    DoStep "E-UE-DATA_1-2-5-1_3-$ln-e" "ifOperStatus Content Verification" {
        set val [SNMP_TABLE_GET $oid_ifOperStatus $MTA_IP 1]
    } {
        IsEqual $val 1
    }
    
}

DoStep "E-UE-DATA_1-2-5-1_4-1" "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Secure_Prov"
} { PASS_STEP }

DoStep "E-UE-DATA_1-2-5-1_5-1" "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC HYBRID2 Device_Level_Hybrid.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


DoStep "E-UE-DATA_1-2-5-1_5-2" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    # Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}




############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-1_5-3" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_5-4" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 120
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMPvN_GET $oid_pktcMtaDevProvisioningState $MTA_IP]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}


DoStep "E-UE-DATA_1-2-5-1_6-1" "ifIndex Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifIndex $MTA_IP 1]
} {
    IsEqual $val 1
}


DoStep "E-UE-DATA_1-2-5-1_6-2" "ifDescr Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifDescr $MTA_IP 1]
} {
    IsEqual $val "DOCSIS Embedded Interface"
}


DoStep "E-UE-DATA_1-2-5-1_6-3" "ifType Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifType $MTA_IP 1]
} {
    IsEqual $val 1
}


DoStep "E-UE-DATA_1-2-5-1_6-4" "ifMtu Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifMtu $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_6-5" "ifSpeed Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifSpeed $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_6-6" "ifPhysAddress Content Verification" {
    set mtamac [string toupper [AddColMac $MTA_MAC]]
    set val [SNMPvN_TABLE_GET $oid_ifPhysAddress $MTA_IP 1]
} {
    IsEqual $val $mtamac
}

DoStep "E-UE-DATA_1-2-5-1_6-7" "ifAdminStatus Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifAdminStatus $MTA_IP 1]
} {
    IsEqual $val 1
}

DoStep "E-UE-DATA_1-2-5-1_6-8" "ifOperStatus Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifOperStatus $MTA_IP 1]
} {
    IsEqual $val 1
}



DoStep "E-UE-DATA_1-2-5-1_6-10" "ifInOctets Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifInOctets $MTA_IP 1]
} {
    if {$val == 0} {
        LogMsg "--- MTA does not implement ifInOctets MIB ---"
    } else  {
        verify_signal "The value of ifInOctets MIB object is $val. Is this correct?
        (Positive interger value for the number of octets is expected)"
    }
}

DoStep "E-UE-DATA_1-2-5-1_6-11" "ifDiscards Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifDiscards $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_6-12" "ifErrors Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifErrors $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_6-13" "ifUnknownProtos Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifUnknownProtos $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_6-14" "ifOutOctets Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifOutOctets $MTA_IP 1]
} {
    if {$val == 0} {
        LogMsg "--- MTA does not implement ifOutOctets MIB ---"
    } else  {
        verify_signal "The value of ifOutOctets MIB object is $val. Is this correct?
        (Positive interger value for the number of octets is expected)"
    }
}

DoStep "E-UE-DATA_1-2-5-1_6-15" "ifOutUcastPkts Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifOutUcastPkts $MTA_IP 1]
} {
    if {$val == 0} {
        LogMsg "--- MTA does not implement ifOutOctets MIB ---"
    } else  {
        verify_signal "The value of ifOutUcastPkts MIB object is $val. Is this correct?
        (Positive interger value for the number of packets is expected)"
    }
}

DoStep "E-UE-DATA_1-2-5-1_6-16" "ifOutDiscards Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifOutDiscards $MTA_IP 1]
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_6-17" "ifOutErrors Content Verification" {
    set val [SNMPvN_TABLE_GET $oid_ifOutErrors $MTA_IP 1]
} {
    IsEqual $val 0
}

################################# For each endpoint ###############################################


set lines $MTA1_NUMLINES
for {set ln 1;set index 2;set ifindex 9} {$ln <= $lines} {incr ln;incr index;incr ifindex} {
    
    DoStep "E-UE-DATA_1-2-5-1_6-$ln-a" "ifIndex Content Verification" {
        set val [SNMPvN_TABLE_GET $oid_ifIndex $MTA_IP $index]
    } {
        IsEqual $val $ifindex
    }
    
    DoStep "E-UE-DATA_1-2-5-1_6-$ln-b" "ifDescr Content Verification" {
        set val [SNMPvN_TABLE_GET $oid_ifDescr $MTA_IP $index]
    } {
        IsEqual $val "Voice Over Cable Interface"
    }
    
    DoStep "E-UE-DATA_1-2-5-1_6-$ln-c" "ifType Content Verification" {
        set val [SNMPvN_TABLE_GET $oid_ifType $MTA_IP $index]
    } {
        IsEqual $val 198
    }
    
    DoStep "E-UE-DATA_1-2-5-1_6-$ln-d" "ifAdminStatus Content Verification" {
        set oid_ifAdminStatus 1.3.6.1.2.1.2.2.1.7
        set val [SNMPvN_TABLE_GET $oid_ifAdminStatus $MTA_IP $index]
    } {
        IsEqual $val 1
    }
    
    DoStep "E-UE-DATA_1-2-5-1_6-$ln-e" "ifOperStatus Content Verification" {
        set val [SNMPvN_TABLE_GET $oid_ifOperStatus $MTA_IP 1]
    } {
        IsEqual $val 1
    }
    
}

DoStep "E-UE-DATA_1-2-5-1_7-1" "Stop Sniffer" {
    LogMsg "--- Stop Sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan "_Hybrid_Prov"
} { PASS_STEP }

DoStep "E-UE-DATA_1-2-5-1_8-1" "Configure Provisioning Server" {
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
} { PASS_STEP }


############### Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-DATA_1-2-5-1_8-2" "Reset CM/MTA" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "--- Reset of CM and MTA has passed ---"
} {
    IsEqual $val 0
}

DoStep "E-UE-DATA_1-2-5-1_8-3" "pktcMTADevProvisioningState Content Verification" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

################################################################################
# Cleanup
################################################################################
set CONTINUE_PAST_STEP_ERROR 0
Cleanup

