<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SECURITY 1.3.1" 
	descrip="Signaling Security Negotiation with Authentication" 
	number="SECURITY 1.3.1">
	
	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration">
				<response>
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<!--  Step 5 send 401 without Security-Server, Require and Proxy-Require -->
							<send protocol="sip" msgtype="401-REGISTER"/>
							<verify step="2" requirements="RFC1912, REQ19220, REQ19228, REQ16976">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Client.mechanism</msg_ref>
									<expr>tls</expr>
								</eq>
							</verify>
							<verify step="3" requirements="RFC1913">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
							<verify step="4" requirements="RFC1913">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Proxy-Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
						</then>
					</if>
				</response>
				<transition to="Challenge" event="REGISTER"/>
			</state>
			
			<state ID="Challenge">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>REGISTER</expr>
							</eq>
							<and>
								<contains>
									<msg_ref type="sip">REGISTER</msg_ref>
									<expr>Authorization</expr>
								</contains>
								<digest/>
							</and>
						</and>
						<then>
							<!--  Step 6 send 401 without Security-Server, Require and Proxy-Require -->
							<send protocol="sip" msgtype="401-REGISTER">
								<mod modtype="add" hdr="Security-Server">
									<expr>tls;q=0.1</expr>
								</mod>
								<mod modtype="add" hdr="Require">
									<expr>sec-agree</expr>
								</mod>
								<mod modtype="add" hdr="Proxy-Require">
									<expr>sec-agree</expr>
								</mod>
							</send>
							<verify step="5" requirements="REQ22314, REQ22315">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Client.mechanism</msg_ref>
									<expr>tls</expr>
								</eq>
							</verify>
							<verify step="5" requirements="REQ22314, REQ22315">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
							<verify step="5" requirements="REQ22314, REQ22315">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Proxy-Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
							
						</then>
						
					</if>
				</response>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Authorization">
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>REGISTER</expr>
							</eq>
							<and>
								<contains>
									<msg_ref type="sip">REGISTER</msg_ref>
									<expr>Authorization</expr>
								</contains>
								<digest/>
							</and>
						</and>
						<then>
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<contains>
									<msg_ref type="sip">REGISTER.Authorization.username</msg_ref>
									<msg_ref type="platform">DUT.prui</msg_ref>
								</contains>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Authorization.realm</msg_ref>
									<msg_ref type="sip" msg_instance="last">401-REGISTER.WWW-Authenticate.realm</msg_ref>
								</eq>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<contains>
									<msg_ref type="sip">REGISTER.Authorization.uri</msg_ref>
									<msg_ref type="platform">DUT.domain</msg_ref>
								</contains>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<notnull>
									<msg_ref type="sip">REGISTER.Authorization.cnonce</msg_ref>
								</notnull>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Authorization.nonce</msg_ref>
									<msg_ref type="sip" msg_instance="last">401-REGISTER.WWW-Authenticate.nonce</msg_ref>
								</eq>
							</verify>
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<and>
									<eq>
										<msg_ref type="sip" hdr_instance="any">REGISTER.Authorization.qop</msg_ref>
										<expr>auth</expr>
									</eq>
									<eq>
										<msg_ref type="sip" hdr_instance="any">REGISTER.Authorization.qop</msg_ref>
										<msg_ref type="sip" msg_instance="last">401-REGISTER.WWW-Authenticate.qop</msg_ref>
									</eq>
								</and>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<notnull>
									<msg_ref type="sip">REGISTER.Authorization.nc</msg_ref>
								</notnull>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Authorization.algorithm</msg_ref>
									<expr>MD5</expr>
								</eq>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<notnull>
									<msg_ref type="sip">REGISTER.Authorization.response</msg_ref>
									
								</notnull>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Call-ID.value</msg_ref>
									<msg_ref type="sip" msg_instance="last">401-REGISTER.Call-ID.value</msg_ref>
								</eq>
								
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Client.mechanism</msg_ref>
									<expr>tls</expr>
								</eq>
							</verify>
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Verify.mechanism</msg_ref>
									<expr>tls</expr>
								</eq>
							</verify>
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Verify.q</msg_ref>
									<expr>0.1</expr>
								</eq>
							</verify>
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Proxy-Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
							
							<verify step="6" requirements="RFC1918, RFC920, RFC1972, RFC1974, REQ19262, REQ19263, REQ19264, REQ19239, REQ19267, REQ19264, REQ16951, REQ16956, REQ16959, REQ16960, REQ22316, REQ22317, REQ22318, REQ22319, REQ22320">
								<eq>
									<msg_ref type="sip">REGISTER.Transport</msg_ref>
									<expr>TLS</expr>
								</eq>
							</verify>
							
							<verify step="7" requirements="REQ20010, REQ19268">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Verify.mechanism</msg_ref>
									<expr>tls</expr>
								</eq>>
							</verify>
							
							<verify step="8" requirements="RFC1920, REQ20011, REQ19269">
								<eq>
									<msg_ref type="sip">REGISTER.Security-Verify.q</msg_ref>
									<expr>0.1</expr>
								</eq>
							</verify>
							
							<verify step="9" requirements="RFC1974">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
							
							<verify step="10" requirements="RFC1974">
								<contains>
									<msg_ref type="sip" hdr_instance="any">REGISTER.Proxy-Require</msg_ref>
									<expr>sec-agree</expr>
								</contains>
							</verify>
						</then>
					</if>
				</response>
				<transition to="Registered" event="REGISTER"/>
			</state>
			
			<state ID="Registered">
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<or>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>dialog</expr>
									</contains>
									<contains>
										<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
										<expr>message-summary</expr>
									</contains>
								</or>
							</or>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="Registered" event="REGISTER"/>
				<transition to="Notification" event="SUBSCRIBE"/>
			</state>
			
			<state ID="Notification">
				<transition to="END" event="200-NOTIFY"/>
			</state>
			
		</states>
	</fsm>
</pc2xml>
