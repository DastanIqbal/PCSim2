<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" name="RST-EDVA 2.4.2" 
	descrip="Mapping a User to an EndPoint" 
	number="RST-EDVA 2.4.2">
	
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	<remove_from fsm="UE1">
		<state ID="Setup"/>
		<state ID="Alerting"/>
	</remove_from>
	<add_to fsm="UE1">
		<state ID="Setup">
			<prelude once="true">
				<send protocol="utility" msgtype="DialDigits">
					<mod modtype="add" hdr="number">
						<msg_ref type="platform">UE1.phone number 1</msg_ref>
					</mod>
				</send>
			</prelude>
			<response>
				<!-- If the current message that we received is an Invite, answer with
           a 100-trying -->
				<!-- Step 2 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>Invite</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="100-INVITE"/>
						<verify step="2" requirements="REQ22460">
							<or>
								<contains>
									<msg_ref type="sip">INVITE.P-Preffered-Identity.addr-spec</msg_ref>
									<msg_ref type="platform">DUT.pui</msg_ref>
								</contains>
								<dnc>
									<msg_ref type="sip">INVITE</msg_ref>
									<expr>P-Preffered-Identity: </expr>
								</dnc>
							</or>
						</verify>
						<verify step="3" requirements="REQ22461">
								<contains>
									<msg_ref type="sip">INVITE.From.addr-spec</msg_ref>
									<msg_ref type="platform">DUT.pui</msg_ref>
								</contains>
						</verify>
						<send protocol="utility" msgtype="SNMPGetTable">
							<mod modtype="add" hdr="oids">
								<expr>CL-PKTC-EUE-USER-MIB::pktcEUEUsrIMPUTable</expr>
							</mod>
							<mod modtype="replace" hdr="version">
								<expr>3</expr>
							</mod>
						</send>
					</then>
				</if>
				<!-- This set of tests determines whether to send 183 with Answer
					 or a 180 to the INVITE -->
				<!-- Step 3 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<and>
						<eq>
							<msg_ref type="extensions">precondition</msg_ref>
							<expr>require</expr>
						</eq>
						<or>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
								<expr>precondition</expr>
							</contains>
							<contains>
								<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
								<expr>precondition</expr>
							</contains>
						</or>
					</and>
					<then>
						<!--Sending 183-Invite with answer-->
						<sleep time="200"/>
						<send protocol="sip" msgtype="183-Invite"/>
					</then>
					<elseif>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<!--Sending 180-Invite with SS not supporting precondition.-->
							<sleep time="200"/>
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</elseif>
				</if>
			</response>
			<!-- Transitions for Setup state -->
			<transition to="Setup" event="DialDigitsComplete"/>
			<transition to="Alerting" event="INVITE"/>
		</state>
		<!-- ALERTING State -->
		<!-- NOTE: This is were all of the optional message processing before the 
       session is complete will occur during an originate test call. -->
		<state ID="Alerting">
			<response>
				<!-- Now test to see if the incoming message is a PRACK message because
						 the system is using reliability -->
				<!-- Steps 4 and 5 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<!-- test for need to answer second PRACK -->
				<!-- Steps 9 and 10 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<!-- This is same as for steps 4 and 5 -->
				<if>
					<and>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>PRACK</expr>
						</eq>
						<contains>
							<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
							<expr>100rel</expr>
						</contains>
					</and>
					<then>
						<!--Reliablity required for test sending 200-Prack message to peer.-->
						<send protocol="sip" msgtype="200-PRACK"/>
					</then>
				</if>
				<!-- Now test for an UPDATE message -->
				<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required or supported sending 200-Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<!-- Test whether to send 180 -->
				<!-- Step 8 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
				<if>
					<and>
						<contains>
							<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
							<expr>183</expr>
						</contains>
						<eq>
							<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
							<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
						</eq>
					</and>
					<then>
						<!--Sending 180 for required preconditions.-->
						<send protocol="sip" msgtype="180-Invite"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPResp</expr>
					</eq>
					<then>
						<var name="impu">
							<array_ref>SNMPResp.varBind</array_ref>
							<where>
								<contains>
									<array_index index="* 1 0"/>
									<expr>pktcEUEUsrIMPUId.1</expr>
								</contains>
							</where>
						</var>
						<var name="impu2">
							<array_ref>SNMPResp.varBind</array_ref>
							<where>
								<contains>
									<array_index index="* 1 0"/>
									<expr>pktcEUEUsrIMPUId.2</expr>
								</contains>
							</where>
						</var>
						<var name="quotedIMPU">
							<var_expr>
								<expr>&quot;sip:</expr>
								<msg_ref type="platform">DUT.pui</msg_ref>
								<expr>&quot;</expr>
							</var_expr>
						</var>
						<verify step="4" requirements="REQ22461">
							<and>
								<eq>
									<var_ref name="impu" index="0 1 2"/>
									<var_ref name="quotedIMPU"/>
								</eq>
								<contains>
									<msg_ref type="sip" msg_instance="last">INVITE.From.addr-spec</msg_ref>
									<msg_ref type="platform">DUT.pui</msg_ref>
								</contains>
							</and>
						</verify>
						<verify step="3" requirements="REQ22461">
							<dnc>
								<msg_ref type="sip" msg_instance="last">INVITE.From.addr-spec</msg_ref>
								<var_ref name="impu2" index="0 1 2"/>
							</dnc>
						</verify>
						<send protocol="utility" msgtype="SNMPGetTable">
							<mod modtype="add" hdr="oids">
								<expr>PKTC-IETF-MTA-MIB::pktcMtaDevErrorOidsTable</expr>
							</mod>
							<mod modtype="replace" hdr="version">
								<expr>3</expr>
							</mod>
						</send>
					</then>
				</if>
			</response>
			<!-- Transitions for Alerting state -->
			<transition to="Alerting" event="DialDigitsComplete"/>
			<transition to="Alerting" event="PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="VerifyErrorOids" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
		<state ID="VerifyErrorOids">
			<response>
				<if>
					<eq>
						<msg_ref type="utility">Response</msg_ref>
						<expr>SNMPResp</expr>
					</eq>
					<then>
						<!--var name="impu">
							<array_ref>SNMPResp.varBind</array_ref>
							<where>
								<contains>
									<array_index index="* 0 0"/>
									<expr>pktcMtaDevErrorOid.1</expr>
								</contains>
							</where>
						</var-->
						<var name="impu2">
							<array_ref>SNMPResp.varBind</array_ref>
							<where>
								<contains>
									<array_index index="* 0 0"/>
									<expr>pktcMtaDevErrorOid.2</expr>
								</contains>
							</where>
						</var>
						<!--verify step="5" requirements="REQ22461">
							<eq>
								<var_ref name="impu" index="0 2 2"/>
								<expr>pass with warning</expr>
							</eq>
						</verify-->
						<!-- This is a vendor specific value, other vendors may have a different
									string that will need to be added to this verification -->
						<verify step="5" requirements="REQ22461">
							<eq>
								<var_ref name="impu2" index="0 2 2"/>
								
								<expr>pktcEUEUsrIMPUAddtionalInfo MIB Attempt to Associate more than one IMPU as outbound for endpoint</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="END" event="SNMPResp"/>
			<transition to="END" event="SNMPRespFailure"/>
		</state>
	</add_to>
</pc2xml>
