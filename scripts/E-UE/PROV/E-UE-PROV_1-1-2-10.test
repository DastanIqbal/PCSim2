#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-2-10.test
#// Author:   Matthew Forbes
#// Creation Date: February 13, 2009
#// Modified by:
#//*****************************************************************************
#// Description:
#//     TC2776 TEST CASE E-UE-PROV 1-1-2-10 Verify eUE Ability to not Provision When
#//     Required sub-options are absent in the DHCP Configuration.
#//     
#// Objective:
#//     This test verifies the ability of the eUE to fail to provision when the required  
#//     sub-options are not provided in the DHCP configuration. Usage of the mandatory 
#//     sub-options is required for both DHCPv4 and DHCPv6.
#//
#// PacketCable DUT:
#//     eUE
#//
#// Test Steps:
#//     - Initial Configuration: Configure CM DHCP server to not send option 122
#//         or its sub-options
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state of CM
#//     - Stop sniffer
#//     - Invoke parsing tool and validate using Pass/Fail scripts
#//     - Delete MTA config file
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.                
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-2-10.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_1-1-2-10-PreStep-1" "Initialize Test Platform" {
    Init_PROV
    Init_CONTROLLER_LAN
    # Initial PARSER TOOL
    Init_PART
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-2-10_1-1" "Initial configuration" {
    LogMsg "--- Initial configuration ---"
    # ProvCreateConfig 291 $MTA_MAC
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 Device_Level_Secure.cfg
} { PASS_STEP }


set msgStr "Configure CM DHCP POLICY to NOT send Option 122 \n\
        or its sub-options(CMTC993)."
DoStep "E-UE-PROV_1-1-2-10_3-1" $msgStr {
} {
    # verify_signal $msgStr
    PROV_MODIFY_DEVICE $CM_MAC CMTC993
    PROV_DEPLOY_DHCP
}

set msgStr "Start Sniffer"
DoStep "E-UE-PROV_1-1-2-10_3-2" $msgStr {
    LogMsg "--- $msgStr ---"
    SetupCaptureControllerLan "host $MTA_IP || udp port 67 || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reset CM and MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-2-10_4-1" "Reset DUT" {
    set val [SNMPvN_RESET $CM_IP]
    LogMsg "Hard reboot of CM and MTA has passed"
} {
    IsEqual $val 0
}

DoStep "E-UE-PROV_1-1-2-10_5-1" "Verify Cable Modem Prov" {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to begin reboot" 60
    set timeout 60    
    while {$timeout > 0} {        
        if {![regexp -nocase timeout [SNMPvN_GET .1.3.6.1.2.1.1.1.0 $CM_IP]]} {break}
        after 1000
        incr timeout -1        
    }
    #If able to obtain SysDescr mib, then CM provisioned otherwise timeout=0
} {
    IsNotEqual $timeout 0
}

set msgStr "Stop Sniffer"
DoStep "E-UE-PROV_1-1-2-10_5-2" $msgStr {    
    LogMsg "--- $msgStr ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_1-1-2-10_6-1" "Analyze flow data" {
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-2-10_6-2" "Parse all CM data into database" {
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    set PARAMS_CM_SRC       "{{} {} {} {} $CM_IP {} {} {} {}}"
    set PARAMS_CM_DST       "{{} {} {} {} {} {} {} $CM_IP {}}"
    set msgID_CM            [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_CM_SRC $PARAMS_CM_DST"]
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

set msgStr "Verify CM DHCP sequence: At least 4-DHCP-DISCOVERS are issued by CM"
DoStep "E-UE-PROV_1-1-2-10_6-3" $msgStr {
    LogMsg "--- $msgStr ---"
    set CM_SEQUENCE_MAIN "DHCP:DISCOVER,DHCP:DISCOVER,DHCP:DISCOVER,\
            DHCP:DISCOVER,DHCP:REQUEST,DHCP:ACK"
    regsub -all { } $CM_SEQUENCE_MAIN {} CM_SEQUENCE_MAIN
} {
    # Verify CM Sequence
    VerifyValue $msgID_CM "SEQUENCE $CM_SEQUENCE_MAIN" "" ""
}

DoStep "E-UE-PROV_1-1-2-10_7-1" "DHCP DISCOVER from MTA does not EXIST" {
    set MTA_MAC_COL [AddColMac $MTA_MAC]
} {
    VerifyNotValue $msgID_MTA "INANY DHCP DISCOVER OPTION60" "EXISTS" "" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"
}

DoStep "E-UE-PROV_1-1-2-10_8-1" "Verify Cable Modem Still Operational" {
    set timeout 2
    while {$timeout > 0} {
        if {![regexp -nocase timeout [SNMPvN_GET .1.3.6.1.2.1.1.3.0 $CM_IP]]} {break}
        after 1000
        incr timeout -1
    }
    #If able to obtain SysDescr mib, then CM operational otherwise timeout=0
} {
    IsNotEqual $timeout 0
}

################################################################################
# Cleanup
################################################################################
set msgStr "Restore DHCP server policy (CMFORCW122)"
DoStep "E-UE-PROV_1-1-2-10-PostStep-1" $msgStr {
} {
    # verify_signal $msgStr
    PROV_MODIFY_DEVICE $CM_MAC CMFORCW_122
    PROV_DEPLOY_DHCP
}

set msgStr "Reset DUT"
DoStep "E-UE-PROV_1-1-2-10-PostStep-2" $msgStr {
    SNMPvN_RESET $CM_IP
    LogMsg "Reset CM/MTA has passed"
} {
    PASS_STEP
}


set msgStr "pktcMTADevProvisioningState Content Verification"
DoStep "E-UE-PROV_1-1-2-10-PostStep-3" $msgStr {
    # Wait for a minute to let CM/MTA starting to reboot
    actionWait "Wait for CM/MTA to reboot" 60
    # Get the OID from the MTA and check it using our previously defined
    set val [GetProvState 1 600]
    LogMsg "MTA Provisioning State"
    LogMsg "             - Expected : 1"
    LogMsg "             - Received : $val"
} {
    IsEqual $val 1
}

Cleanup
