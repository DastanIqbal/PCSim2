<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)




-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="UE Originates Call Template" 
	descrip="This is a template for testing SIP calls to a originating at UE (DUT)." 
	number="1">

	<!-- The below FSM handles both the cases when we have REAL UE or when we have Simulated UE -->
	<!-- Next we define all of the network elements and extension 
     controls to be used in this test -->
	<fsm name="Orig call template">
		<models>
			<session/>
		</models>
	
		<NE sim_type="orig" elements="UE1 SCSCF1 PCSCF1" targets="UE1"/>

		<!-- NOTE - The test platform is assumed to be performing the 
            registrar between tests. The session model requests
						to be informed when the DUT registers and the fsm
						will receive the Registered event once the DUT is
						registered -->
		<states initialstate="Register">
			<!-- REGISTER State -->
			<state ID="Register">
				<transition to="OffHook" event="Registered"/>
			</state>

			<!-- OFFHOOK State -->
			<state ID="OffHook">
				<prelude>
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<!-- Transitions for OffHook state -->
				<transition to="Setup" event="OffHookComplete"/>
			</state>
			
			<!-- SETUP State -->
			<!-- The state machine will wait in the Setup state until it 
				 receives an Invite from the originating UE or the fail timeout occurs. -->
			<!-- Step 1 of the Call-Orig-at_UE(DUT) Default Message Flow document. -->
			<state ID="Setup">
				<prelude once="true">
					<send protocol="utility" msgtype="DialDigits">
						<mod modtype="add" hdr="number">
							<msg_ref type="platform">UE1.phone number 1</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<!-- If the current message that we received is an Invite, answer with
               a 100-trying -->
					<!-- Step 2 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>Invite</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="100-INVITE"/>
						</then>
					</if>
					<!-- This set of tests determines whether to send 183 with Answer
						 or a 180 to the INVITE -->
					<!-- Step 3 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<eq>
								<msg_ref type="extensions">precondition</msg_ref>
								<expr>require</expr>
							</eq>
							<or>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Require</msg_ref>
									<expr>precondition</expr>
								</contains>
								<contains>
									<msg_ref type="sip" hdr_instance="any">Invite.Supported</msg_ref>
									<expr>precondition</expr>
								</contains>
							</or>
						</and>
						<then>
							<!--Sending 183-Invite with answer-->
							<sleep time="200"/>
							<send protocol="sip" msgtype="183-Invite"/>
						</then>
						<elseif>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>Invite</expr>
							</eq>
							<then>
								<!--Sending 180-Invite with SS not supporting precondition.-->
								<sleep time="200"/>
								<send protocol="sip" msgtype="180-Invite"/>
							</then>
						</elseif>
					</if>
				</response>
				<!-- Transitions for Setup state -->
				<transition to="Alerting" event="INVITE"/>
				<transition to="Setup" event="DialDigitsComplete"/>
			</state>
			<!-- ALERTING State -->
			<!-- NOTE: This is were all of the optional message processing before the 
           session is complete will occur during an originate test call. -->
			<state ID="Alerting">
				<response>
					<!-- Now test to see if the incoming message is a PRACK message because
							 the system is using reliability -->
					<!-- Steps 4 and 5 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<!-- test for need to answer second PRACK -->
					<!-- Steps 9 and 10 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<!-- This is same as for steps 4 and 5 -->
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>PRACK</expr>
							</eq>
							<contains>
								<msg_ref type="sip" msg_instance="last" hdr_instance="any">18x-Invite.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test sending 200-Prack message to peer.-->
							<send protocol="sip" msgtype="200-PRACK"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
					</if>
					<!-- Test whether to send 180 -->
					<!-- Step 8 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<and>
							<contains>
								<msg_ref type="sip" msg_instance="last">18x-Invite.Status-Line.status-code</msg_ref>
								<expr>183</expr>
							</contains>
							<eq>
								<msg_ref type="sdp">Request.qos-curr-remote.direction</msg_ref>
								<msg_ref type="sdp">Request.qos-des-remote.direction</msg_ref>
							</eq>
						</and>
						<then>
							<!--Sending 180 for required preconditions.-->
							<send protocol="sip" msgtype="180-Invite"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Alerting state -->
				<transition to="Alerting" event="DialDigitsComplete"/>
				<transition to="Alerting" event="PRACK"/>
				<transition to="Alerting" event="UPDATE"/>
				<transition to="Answer" event="ALERTING_UAS"/>
			</state>
			<!-- ANSWER State -->
			<state ID="Answer" timer="15000">
				<response>
					<if>
						<eq>
							<msg_ref type="event"/>
							<expr>TimerExpired</expr>
						</eq>
						<then>
							<!--Sending 200-Invite-->
							<send protocol="sip" msgtype="200-INVITE"/>
						</then>
					</if>
					<!-- Now test for an UPDATE message -->
					<!-- Steps 6 and 7 in the Call-Orig-at_UE(DUT) Default Message Flow document. -->
					<if>
						<eq>
							<msg_ref type="sip">Request</msg_ref>
							<expr>UPDATE</expr>
						</eq>
						<then>
							<!--QoS required or supported sending 200-Update message to peer.-->
							<send protocol="sip" msgtype="200-Update"/>
						</then>
					</if>
				</response>
				<!-- Transitions for Answer state -->
				<transition to="Answer" event="UPDATE"/>
				<transition to="Answer" event="TimerExpired"/>
				<transition to="Connected" event="ACK"/>
			</state>
			<!-- CONNECTED State -->
			<state ID="Connected" timer="20000">
				<!-- Transitions for Connected state -->
				<transition to="Releasing" event="TimerExpired"/>
			</state>
			<!-- RELEASING State -->
			<state ID="Releasing">
				<prelude>
					<!--Sending BYE to peer to terminate call.-->
					<send protocol="sip" msgtype="BYE"/>
				</prelude>
				<!-- Transitions for Releasing state -->
				<transition to="OnHook" event="200-Bye"/>
			</state>
			<!-- OnHook State -->
			<state ID="OnHook">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<!-- Transitions for OnHook state -->
				<transition to="END" event="OnHookComplete"/>
			</state>
		</states>
	</fsm>
</pc2xml>
