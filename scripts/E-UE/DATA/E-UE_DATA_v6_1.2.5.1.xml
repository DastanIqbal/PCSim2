<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################

 Change History: (Author & Date)



-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 7768 $" 
		name="E-UE_DATA_1.2.5.1" 
		descrip="Ability of eUE to Implement the IFTable."
		number="E-UE_DATA_1.2.5.1">

	<!-- Step 1 -->
	<template file="./templates/EUE_Prov_B_1_1_1.xml" name="IFTable"/>

	<add_to fsm="IFTable">
        <transition from="StartCapture_RebootWait" to="EUEProvision" event="TimerExpired"/>
		<states initialstate="Note">
		
		<state ID="Note">
			<prelude>
				<log promptUser="true" expr="To verify MAC address of eDVA, make sure the mac address of eDVA with colons is included in DUT.mib1 in config file."/>
				<generate event="Branch1Event"/>
			</prelude>
			<transition to="Reboot" event="Branch1Event"/>
		</state>
		
        <state ID="EUEProvision" timer="10000">
            <prelude once="true">				
                <send protocol="utility" msgtype="SNMPGet">
                    <mod modtype="add" hdr="oids">
                        <expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
                    </mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.IP</msg_ref>
                    </mod>
					<mod modtype="replace" hdr="version">
                        <expr>3</expr>
                    </mod>
                </send>
            </prelude>
            <response>
                <verify step="9">
                    <eq>
                        <msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
                        <expr>1</expr>
                    </eq>
                </verify>
            </response>
            <transition to="VerifyIFTable" event="SNMPResp"/>
            <transition to="END" event="SNMPRespFailure"/>
        </state>

		<!-- 3 Perform an SNMP query on the ifTable using the eUE interface. -->
		<state ID="VerifyIFTable" timer="10000">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>IF-MIB::ifTable</expr>
					</mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.IP</msg_ref>
                    </mod>
					<mod modtype="replace" hdr="version">
						<expr>3</expr>
					</mod>
				</send>
			</prelude>
			<response>

				<!--  IF-MIB::ifTable
						column
						 0       ifIndex = 1
						 1       ifDescr =	"DOCSIS Embedded Interface"
						 2       ifTypev = other (1)
						 3       ifMtu = 0
						 4       ifSpeed = eMTA MAC address
						 5       ifPhysAddress = up (1) 
						 6       ifAdminStatus = up (1) 
						 7       ifOperStatus = up (1) 
						 8       ifLastChange 
						 9       ifInOctets = the total number of octets received on the interface, else ‘0’ if not implemented 
						10       ifInUcastPkts
						 -       ifInNUcastPkts  - Deprecated
						11       ifInDiscards = 0
						12       ifInErrors = 0
						13       ifInUnknownProtos = 0
						14       ifOutOctets = the total number of octets transmitted over the interface, else ‘0’ if not implemented
						15       ifOutUcastPkts = for the total number of packets requested to be transmitted, else ‘0’ if not implemented
						 -       ifOutNUcastPkts   - Deprecated
						16       ifOutDiscards = 0
						17       ifOutErrors = 0
						18       ifOutQLen
						 -       ifSpecific   - Deprecated
												 -->						
				<verify step="10-IfIndex">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				<verify step="10-IfDescr">
					<eq>
						<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
						<expr>DOCSIS Embedded Interface</expr>
					</eq>
				</verify>
				<verify step="10-IfType">
					<eq>
						<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				<verify step="10-IfMtu">
					<eq>
						<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="10-ifSpeed">
					<eq>
						<msg_ref type="utility" index="0 4 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="10-ifPhysAddress">
					<eq>
						<msg_ref type="utility" index="0 5 2">SNMPResp.varBind</msg_ref>
						<msg_ref type="platform">DUT.mib1</msg_ref>
					</eq>
				</verify>
				<verify step="10-ifAdminStatus">
					<eq>
						<msg_ref type="utility" index="0 6 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				
				<verify step="10-ifOperStatus">
					<eq>
						<msg_ref type="utility" index="0 7 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				<verify step="10-ifInOctets">
					<gte>
						<msg_ref type="utility" index="0 9 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</gte>
				</verify>
				<verify step="10-ifInDiscards">
					<eq>
						<msg_ref type="utility" index="0 12 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="10-ifInErrors">
					<eq>
						<msg_ref type="utility" index="0 13 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="10-ifInUnknownProtos">
					<eq>
						<msg_ref type="utility" index="0 14 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="10-ifOutOctets">
					<gte>
						<msg_ref type="utility" index="0 15 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</gte>
				</verify>
				<verify step="10-ifOutUCastPkts">
					<gte>
						<msg_ref type="utility" index="0 16 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</gte>
				</verify>
				<verify step="10-ifOutDiscards">
					<eq>
						<msg_ref type="utility" index="0 18 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="10-ifOutErrors">
					<eq>
						<msg_ref type="utility" index="0 19 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
			</response>
			<postlude>
            	<stop_capture />
            </postlude>
			<transition to="Reconfigure" event="SNMPResp" />
			<transition to="END" event="SNMPRespFailure" />
		</state>
		
		<!-- vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv -->
        <!-- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -->
		<!-- Hybrid Mode -->
        <!-- Step 12 -->

        <state ID="Reconfigure"
			   provFile="v6.C.1.2.3_Hybrid.bin"
               policyFile="X_eUEv6_Hybrid"
               nextState="Reset2"/>

        <state ID="Reset2" timer="120000">
            <prelude once="true">
			    <start_capture>
                    <filter>
                        <var_expr>
							<expr>host </expr>
							<msg_ref type="platform">DUT.IP</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
							<expr> || host </expr>
							<msg_ref type="platform">DUT.DHCP Server IP</msg_ref>
						</var_expr>
                    </filter>
                </start_capture>
				
                <send protocol="utility" msgtype="SNMPSet">
                    <mod modtype="add" hdr="array">
                        <var_expr>
                            <expr>varBind 1 1 3 \r\n ][ , </expr>
                            <expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
                        </var_expr>
                    </mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.CM IP Address</msg_ref>
                    </mod>
                    <!-- Always use version 2c for a CM reset -->
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
                </send>
            </prelude>
            <response>
                <if>
                    <eq>
                        <msg_ref type="utility">Response</msg_ref>
                        <expr>SNMPRespFailure</expr>
                    </eq>
                    <then>
                        <fail/>
                    </then>
                </if>
                <if>
                    <or>
                        <eq>
                            <msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
                            <expr>0</expr>
                        </eq>
                        <eq>
                            <msg_ref type="sip">REGISTER.Expires.value</msg_ref>
                            <expr>0</expr>
                        </eq>
                    </or>
                    <then>
                        <send protocol="sip" msgtype="200-REGISTER"/>
                    </then>
                </if>
            </response>
            <transition to="EUEProvision2" event="TimerExpired"/>
            <transition to="Reset2" event="SNMPResp"/>
            <transition to="Reset2" event="REGISTER"/>
            <transition to="END" event="SNMPRespFailure"/>
        </state>

        <!-- Step 12 The E-UE DUT provisions successfully and becomes operational. -->
        <state ID="EUEProvision2" timer="10000">
            <prelude once="true">				
                <send protocol="utility" msgtype="SNMPGet">
                    <mod modtype="add" hdr="oids">
                        <expr>PKTC-IETF-MTA-MIB::pktcMtaDevProvisioningState.0</expr>
                    </mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.IP</msg_ref>
                    </mod>
					<mod modtype="replace" hdr="version">
                        <expr>2c</expr>
                    </mod>
                </send>
            </prelude>
            <response>
                <verify step="12">
                    <contains>
                        <msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
                        <expr>1</expr>
                    </contains>
                </verify>
            </response>
            <transition to="VerifyIFTable2" event="SNMPResp"/>
            <transition to="END" event="SNMPRespFailure"/>
        </state>
		
		<state ID="VerifyIFTable2" timer="10000">
			<prelude once="true">
				<send protocol="utility" msgtype="SNMPGetTable">
					<mod modtype="add" hdr="oids">
						<expr>IF-MIB::ifTable</expr>
					</mod>
                    <mod modtype="replace" hdr="agentip">
                        <msg_ref type="platform">DUT.IP</msg_ref>
                    </mod>
					<mod modtype="replace" hdr="version">
						<expr>2c</expr>
					</mod>
				</send>
			</prelude>
			<response>					
				<verify step="13-IfIndex">
					<eq>
						<msg_ref type="utility" index="0 0 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				<verify step="13-IfDescr">
					<eq>
						<msg_ref type="utility" index="0 1 2">SNMPResp.varBind</msg_ref>
						<expr>DOCSIS Embedded Interface</expr>
					</eq>
				</verify>
				<verify step="13-IfType">
					<eq>
						<msg_ref type="utility" index="0 2 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				<verify step="13-IfMtu">
					<eq>
						<msg_ref type="utility" index="0 3 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="13-ifSpeed">
					<eq>
						<msg_ref type="utility" index="0 4 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="13-ifPhysAddress">
					<eq>
						<msg_ref type="utility" index="0 5 2">SNMPResp.varBind</msg_ref>
						<msg_ref type="platform">DUT.mib1</msg_ref>
					</eq>
				</verify>
				<verify step="13-ifAdminStatus">
					<eq>
						<msg_ref type="utility" index="0 6 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				
				<verify step="13-ifOperStatus">
					<eq>
						<msg_ref type="utility" index="0 7 2">SNMPResp.varBind</msg_ref>
						<expr>1</expr>
					</eq>
				</verify>
				<verify step="13-ifInOctets">
					<gte>
						<msg_ref type="utility" index="0 9 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</gte>
				</verify>
				<verify step="13-ifInDiscards">
					<eq>
						<msg_ref type="utility" index="0 12 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="13-ifInErrors">
					<eq>
						<msg_ref type="utility" index="0 13 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="13-ifInUnknownProtos">
					<eq>
						<msg_ref type="utility" index="0 14 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="13-ifOutOctets">
					<gte>
						<msg_ref type="utility" index="0 15 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</gte>
				</verify>
				<verify step="13-ifOutUCastPkts">
					<gte>
						<msg_ref type="utility" index="0 16 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</gte>
				</verify>
				<verify step="13-ifOutDiscards">
					<eq>
						<msg_ref type="utility" index="0 18 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
				<verify step="13-ifOutErrors">
					<eq>
						<msg_ref type="utility" index="0 19 2">SNMPResp.varBind</msg_ref>
						<expr>0</expr>
					</eq>
				</verify>
			</response>
			<postlude>
            	<stop_capture />
            </postlude>
			<transition to="END" event="SNMPResp" />
			<transition to="END" event="SNMPRespFailure" />
		</state>
		</states>
	</add_to>
</pc2xml>
