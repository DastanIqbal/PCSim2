<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SIP-UE 1.6.3.4" 
	descrip="UAS Handling of INVITE Retransmission while in the Proceeding State" 
	number="SIP-UE 1.6.3.4">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	<configure name="FSM Process Duplicate Messages" value="true"/>
	
	<remove_from fsm="UE1">
		<transition from="Setup" to="Connected" event="200-INVITE"/>
		<transition from="Proceeding" to="Connected" event="200-INVITE"/>
		<transition from="Alerting" to="Connected" event="200-INVITE"/>
		<transition from="Alerting" to="Answer" event="TimerExpired"/>
		<state ID="Answer"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<transition from="Setup" to="2ndSetup" event="ALERTING_UAC"/>
		
		<transition from="Proceeding" to="2ndSetup" event="ALERTING_UAC"/>
		
		<transition from="Alerting" to="2ndSetup" event="ALERTING_UAC"/>
		
		<state ID="2ndSetup">
			<prelude>
				<retransmit protocol="sip" msgtype="Invite"/>
			</prelude>
			<transition to="WaitFor18x" event="100-INVITE"/>
			<transition to="Verify" event="18x-INVITE"/>
		</state>
		
		<state ID="WaitFor18x">
			<transition to="Verify" event="18x-INVITE"/>
		</state>
		
		<state ID="Verify" timer="100">
			<prelude>
				<verify step="3" requirements="RFC1006" group="18x">
					<eq>
						<msg_ref type="sip" msg_instance="last">18x-INVITE</msg_ref>
						<msg_ref type="sip" msg_instance="prev">18x-INVITE</msg_ref>
					</eq>
				</verify>
			</prelude>
			<transition to="END" event="TimerExpired"/>
		</state>
		
		<state ID="2ndProceeding">
			<!-- Expected responses are 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliability required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
						<expr>180</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC1006" group="18x">
							<eq>
								<msg_ref type="sip">180-INVITE</msg_ref>
								<msg_ref type="sip" msg_instance="prev">180-INVITE</msg_ref>
							</eq>
						</verify>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
						<expr>183</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC1006" group="18x">
							<eq>
								<msg_ref type="sip">183-INVITE</msg_ref>
								<msg_ref type="sip" msg_instance="prev">183-INVITE</msg_ref>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="2ndAlerting" event="180-INVITE"/>
			<transition to="2ndAlerting" event="183-INVITE"/>
		</state>
		
		<state ID="2ndAlerting">
			<response>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliability required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
						<expr>180</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC1006" group="18x">
							<eq>
								<msg_ref type="sip">180-INVITE</msg_ref>
								<msg_ref type="sip" msg_instance="prev">180-INVITE</msg_ref>
							</eq>
						</verify>
					</then>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
						<expr>183</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC1006" group="18x">
							<eq>
								<msg_ref type="sip">183-INVITE</msg_ref>
								<msg_ref type="sip" msg_instance="prev">183-INVITE</msg_ref>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="2ndAlerting" event="200-PRACK"/>
			<transition to="2ndAlerting" event="UPDATE"/>
			<transition to="END" event="18x-INVITE"/>
		</state>
	</add_to>
</pc2xml>
