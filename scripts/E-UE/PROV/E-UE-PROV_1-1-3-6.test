#//*****************************************************************************
#// Filename: E-UE-PROV_1-1-3-6.test
#// Author:   Matthew Forbes
#// Creation Date: October 28, 2008
#// Modified by: 
#//*****************************************************************************
#// Description:
#//     TC931 TEST CASE E-UE-PROV 1.1.3.6 To test the ability of the MTA to allow control
#//     of booting the Telephony Service Provider
#//     
#// Objective:
#//     Test the capability of the MTA to turn itself off when indicated to do so by
#//       the Telephony Service provider's DHCP.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Test Steps:
#//     - Initial Configuration:  Option 122.3 = 0.0.0.0
#//     - Start sniffer
#//     - Reset DUT
#//     - Check Provisioning state of CM (via MTA)
#//     - Stop sniffer
#//     - Invoke parsing tool and validate using Pass/Fail scripts
#//     - Delete MTA config file
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.                
#//*****************************************************************************
global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_1-1-3-6.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_1-1-3-6-PreStep-1" "Initialize Test Platform" {
    Init_PROV
    Init_CONTROLLER_LAN
    # Initial PARSER TOOL
    Init_PART
} { PASS_STEP }

# DoStep "E-UE-PROV_1-1-3-6_1-1" "Initial configuration" {
    # ProvCreateConfig 291 $MTA_MAC
# } { PASS_STEP }

set msgStr "Configure DHCP server option 122 suboption 3 with a 0.0.0.0 value (MTATC931)"
DoStep "E-UE-PROV_1-1-3-6_2-1" $msgStr {
} {
    # verify_signal $msgStr
    PROV_MODIFY_DEVICE $MTA_MAC MTATC931 Device_Level_Secure.cfg
    PROV_DEPLOY_DHCP
}

set msgStr "Start Sniffer"
DoStep "E-UE-PROV_1-1-3-6_3-1" $msgStr {
    LogMsg "--- $msgStr ---"
    SetupCaptureControllerLan "host $MTA_IP || host $PROV_DHCP1_IP || host $CM_IP"
    StartCaptureControllerLan
} {PASS_STEP}

################ Reset MTA and Verify Provisioning ################

DoStep "E-UE-PROV_1-1-3-6_4-1" "Reset DUT" {
    LogMsg "Reboot MTA"
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
} {
      # Wait for an appropriate timeout period, say 3 minutes
    actionWait "Wait for MTA to reboot" 180
}


set msgStr "Stop Sniffer"
DoStep "E-UE-PROV_1-1-3-6_6-1" "Stop Sniffer" {

    LogMsg "--- $msgStr ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_1-1-3-6_7-1" "Analyze flow data" {
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_1-1-3-6_7-2" "Parse all data into database" {
    # Parse data
    set PARAMS_DHCP         "{DHCP {} {} {} {} {} {} {} {}}"
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_DHCP $PARAMS_MTA_SRC $PARAMS_MTA_DST"]} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

DoStep "E-UE-PROV_1-1-3-6_7-4" "DHCP REQUEST: Does not exist" {
    LogMsg "Verify DHCP REQUEST: Does not exist"
        # Find MTA MAC with colons
        set MTA_MAC_COL [AddColMac $MTA_MAC]
} {
    # Verify OPTION 55 VALUE
    VerifyNotValue $msgID_MTA "INANY DHCP REQUEST OPTION55" "EXISTS" "" AND \
            "OPTIONCLIENTHWADDRESS" "IS" "$MTA_MAC_COL"
}

set msgStr "Verify MTA DHCP sequence: Verify no DHCP-REQUEST and only 1 DHCP-DISCOVER from MTA"
DoStep "E-UE-PROV_1-1-3-6_7-5" $msgStr {
    LogMsg "--- $msgStr ---"
    #Corrected sequence variables and added failure verification below MLF- 10/08/08
    # THIS IS OK CASE, YOU WANT TO JUST SEE A DISCOVER/OFFER THEN MTA STOPS
    set MTA_SEQUENCE_MAIN "DHCP:DISCOVER,DHCP:OFFER"
    regsub -all { } $MTA_SEQUENCE_MAIN {} MTA_SEQUENCE_MAIN
    set val1 [VerifyValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE_MAIN" "" ""]
    # THIS IS A BAD CASE # 1
    set MTA_SEQUENCE1 "DHCP:DISCOVER,DHCP:OFFER,DHCP:REQUEST"
    regsub -all { } $MTA_SEQUENCE1 {} MTA_SEQUENCE1
    set val2 [VerifyNotValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE1" "" ""]
    # THIS IS A BAD CASE # 2
    set MTA_SEQUENCE2 "DHCP:DISCOVER,DHCP:OFFER,DHCP:DISCOVER"
    regsub -all { } $MTA_SEQUENCE2 {} MTA_SEQUENCE2
    set val3 [VerifyNotValue $msgID_MTA "SEQUENCE $MTA_SEQUENCE2" "" ""]
} {
    # Verify MTA Sequence
    if {$val1 != 0 || $val2 != 0 || $val3 != 0} {
        FAIL_STEP
    } else {
        PASS_STEP
    }
}

################################################################################
# Cleanup
################################################################################
set msgStr "Restore DHCP server policy (MTAFORCW122)"
DoStep "E-UE-PROV_1-1-3-6-PostStep-1" $msgStr {
} {
    # verify_signal $msgStr
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122
    PROV_DEPLOY_DHCP
    SNMPvN_RESET $CM_IP
    actionWait "Wait 60 seconds for reboot" 60
}

Cleanup
