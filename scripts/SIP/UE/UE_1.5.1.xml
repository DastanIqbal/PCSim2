<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->
<pc2xml version="$Revision: 8188 $" 
	name="SIP-UE 1.5.1" 
	descrip=" CANCEL Message - Header Validation" 
	number="SIP-UE 1.5.1">
	
	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>
	<configure name="SIP Inspector Type" value="UE"/>
	<configure name="SIP Inspector" value="enable"/>
	
	<remove_from fsm="UE1">
		<state ID="OnHook"/>
		<state ID="Register" sub="response"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<state ID="Register" sub="response">
			<!-- When the registered event comes in see if the device
				is supposed to be simulated or a real device -->
			<if>
				<or>
					<neq>
						<msg_ref type="platform">Platform.SIP Inspector Type</msg_ref>
						<expr>UE</expr>
					</neq>
					<neq>
						<msg_ref type="platform">Platform.SIP Inspector</msg_ref>
						<expr>enable</expr>
					</neq>
				</or>
				<then>
					<log level="FATAL" expr="The SIP Inspector Type setting must equal enable and the SIP Inspector setting must equal UE for the test to be executed."/>
					<generate event="FailEvent"/>
				</then>
				<elseif>
					<or>
						<eq>
							<msg_ref type="platform">UE1.simulated</msg_ref>
							<expr>false</expr>
						</eq>
						<or>
							<eq>
								<msg_ref type="platform">UE1.simulated</msg_ref>
								<expr>disable</expr>
							</eq>
							<eq>
								<msg_ref type="platform">UE1.simulated</msg_ref>
								<expr>off</expr>
							</eq>
						</or>
					</or>
					<then>
						<generate event="Branch1Event"/>
					</then>
					<else>
						<generate event="Branch2Event"/>
					</else>
				</elseif>
			</if>
		</state>
		<transition from="Register" to="END" event="FailEvent"/>
		
		<transition from="Setup" to="OnHook" event="PROV_RSP_TX_UAS"/>
		
		<transition from="Alerting" to="OnHook" event="PROV_RSP_TX_UAS"/>
		
		<transition from="Answer" to="OnHook" event="PROV_RSP_TX_UAS"/>
		
		<state ID="OnHook">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="CANCEL" event="OnHookComplete"/>
		</state>
		
		<state ID="CANCEL">
			<response>
				<verify step="2" requirements="RFC432">
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>CANCEL</expr>
					</eq>
				</verify>
				<verify step="2" requirements="RFC432">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.Request-Line.Request-URI</msg_ref>
						<msg_ref type="sip">CANCEL.Request-Line.Request-URI</msg_ref>
					</eq>
				</verify>
				<verify step="2" requirements="RFC432">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.Call-ID.value</msg_ref>
						<msg_ref type="sip">CANCEL.Call-ID.value</msg_ref>
					</eq>
				</verify>
				<verify step="2" requirements="RFC432">
					<eq>
						<msg_ref type="sip">CANCEL.To.name-addr</msg_ref>
						<msg_ref type="sip" msg_instance="last">INVITE.To.name-addr</msg_ref>
					</eq>
				</verify>
				<verify step="2" requirements="RFC432">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.CSeq.value</msg_ref>
						<msg_ref type="sip">CANCEL.CSeq.value</msg_ref>
					</eq>
				</verify>
				<verify step="2" requirements="RFC432">
					<eq>
						<msg_ref type="sip">CANCEL.From</msg_ref>
						<msg_ref type="sip" msg_instance="last">INVITE.From</msg_ref>
					</eq>
				</verify>
				<verify step="3" requirements="RFC433">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.Via</msg_ref>
						<msg_ref type="sip">CANCEL.Via</msg_ref>
					</eq>
				</verify>
				<verify step="4" requirements="RFC434">
					<eq>
						<msg_ref type="sip">CANCEL.CSeq.method</msg_ref>
						<expr>CANCEL</expr>
					</eq>
				</verify>
				<verify step="5" requirements="RFC435">
					<eq>
						<msg_ref type="sip">CANCEL.Route</msg_ref>
						<msg_ref type="sip" msg_instance="last">INVITE.Route</msg_ref>
					</eq>
				</verify>
				<verify step="6" requirements="RFC436">
					<dnc>
						<msg_ref type="sip">CANCEL</msg_ref>
						<expr>Require:</expr>
					</dnc>
				</verify>
				<verify step="6" requirements="RFC436">
					<dnc>
						<msg_ref type="sip">CANCEL</msg_ref>
						<expr>Proxy-Require:</expr>
					</dnc>
				</verify>
				<verify step="7" requirements="RFC439">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.Transport</msg_ref>
						<msg_ref type="sip">CANCEL.Transport</msg_ref>
					</eq>
				</verify>
				<verify step="7" requirements="RFC439">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.DestinationAddress.IP</msg_ref>
						<msg_ref type="sip">CANCEL.DestinationAddress.IP</msg_ref>
					</eq>
				</verify>
				<verify step="7" requirements="RFC439">
					<eq>
						<msg_ref type="sip" msg_instance="last">INVITE.DestinationAddress.Port</msg_ref>
						<msg_ref type="sip">CANCEL.DestinationAddress.Port</msg_ref>
					</eq>
				</verify>
			</response>
			<transition to="END" event="CANCEL"/>
		</state>
	</add_to>
</pc2xml>
