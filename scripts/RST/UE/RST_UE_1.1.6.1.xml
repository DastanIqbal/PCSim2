<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)
	PCPCII-139 : Update the Voicetronix modifiers to use the new values. (ghassler 07/10/2009)




-->
<pc2xml version="$Revision: 8188 $" 
	name="RST-UE 1.1.6.1" 
	descrip="UE Status Change" 
	number="RST-UE 1.1.6.1">

	<template file="./templates/CallOrigAtUETemp.xml" name="UE1"/>

	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		
		<states initialstate="Reboot">
			<state ID="Reboot" timer="5000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegister" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegister">
				<!--  Don't respond to the REGISTER -->
				<transition to="OffHook" event="REGISTER"/>
			</state>
			
			<state ID="OffHook">
				<prelude>
					<send protocol="utility" msgtype="OffHook"/>
				</prelude>
				<transition to="Dial" event="OffHookComplete"/>
			</state>
			
			<state ID="Dial" timer="8000">
				<prelude once="true">
					<send protocol="utility" msgtype="DialDigits">
						<mod modtype="add" hdr="number">
							<msg_ref type="platform">UE1.phone number 1</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<neq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>DialDigitsComplete</expr>
						</neq>
						<then>
							<verify step="2" requirements="REQ13491">
								<and>
									<eq>
										<msg_ref type="event"/>
										<expr>TimerExpired</expr>
									</eq>
									<neq>
										<msg_ref type="sip">Request</msg_ref>
										<expr>INVITE</expr>
									</neq>
								</and>
							</verify>
						</then>
					</if>
				</response>
				<transition to="Dial" event="DialDigitsComplete"/>
				<transition to="OnHook" event="TimerExpired"/>
			</state>
			
			<state ID="OnHook">
				<prelude>
					<send protocol="utility" msgtype="OnHook"/>
				</prelude>
				<transition to="Reboot2" event="OnHookComplete"/>
			</state>
			
			<state ID="Reboot2" timer="5000">
				<!-- We need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot2" event="SNMPResp"/>
				<transition to="PendingRegistration1" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot2" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration1">
				<response>
					<if>
						<notnull>
							<msg_ref type="sip" msg_instance="last">REGISTER.Contact.expires</msg_ref>
						</notnull>
						<then>
							<verify step="4" requirements="REQ13492" group="step4">
								<eq>
									<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
									<expr>600</expr>
								</eq>
								<then>
									<send protocol="sip" msgtype="423-REGISTER">
										<mod modtype="replace" hdr="Min-Expires">
											<add_ref type="sip" msg_instance="last" value="100">REGISTER.Contact.expires</add_ref>
										</mod>
									</send>
								</then>
							</verify>
						</then>
						<elseif>
							<notnull>
								<msg_ref type="sip" msg_instance="last">REGISTER.Expires.value</msg_ref>
							</notnull>
							<then>
								<verify step="4" requirements="REQ13492" group="step4">
									<eq>
										<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
										<expr>600</expr>
									</eq>
									<then>
										<send protocol="sip" msgtype="423-REGISTER">
											<mod modtype="replace" hdr="Min-Expires">
												<add_ref type="sip" msg_instance="last" value="100">REGISTER.Expires.value</add_ref>
											</mod>
										</send>
									</then>
							</verify>
							</then>
						</elseif>
					</if>
					
				</response>
				<transition to="MinExpires" event="REGISTER"/>
			</state>
			
			<state ID="MinExpires">
				<response>
					<verify step="5" requirements="REQ13493">
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<msg_ref type="sip" msg_instance="last">423-REGISTER.Min-Expires.value</msg_ref>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<msg_ref type="sip" msg_instance="last">423-REGISTER.Min-Expires.value</msg_ref>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
					</verify>
				</response>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Authorization">
				<response>
					<if>
						<or>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateSucceed</expr>
							</eq>
							<eq>
								<msg_ref type="event"/>
								<expr>AuthenticateFailed</expr>
							</eq>
						</or>
						<then>
							<!-- this is to prevent the AuthenticateFailed from being forwarded
									to the next state on the AuthenticateSucceed -->
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<and>
									<contains>
										<msg_ref type="sip">REGISTER</msg_ref>
										<expr>Authorization</expr>
									</contains>
									<digest/>
								</and>
							</and>
							<then>
								<generate event="AuthenticateSucceed"/>
							</then>
							<else>
								<generate event="AuthenticateFailed"/>
								<send protocol="sip" msgtype="503-Register"/>
							</else>
						</elseif>
					</if>
				</response>
				<transition to="Registered" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
				<transition to="Authorization" event="REGISTER"/>
			</state>
			
			<state ID="Registered">
				<prelude>
					<send protocol="sip" msgtype="200-Register"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="sip">Request</msg_ref>
								<expr>SUBSCRIBE</expr>
							</eq>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
						</and>
						<then>
							<send protocol="sip" msgtype="200-SUBSCRIBE"/>
							<sleep time="100"/>
							<send protocol="sip" msgtype="NOTIFY"/>
						</then>
					</if>
				</response>
				<transition to="Notification1" event="SUBSCRIBE"/>
			</state>
			
			<state ID="Notification1">
				<postlude>
					<generate event="SucceedEvent" fsm="UE1"/>
				</postlude>
				<transition to="WaitState" event="200-NOTIFY"/>
			</state>
			
			<state ID="WaitState">
				<transition to="Reboot3" event="SucceedEvent"/>
			</state>
			
			<state ID="Reboot3" timer="5000">
				<!-- Power cycle the UE to conduct the test -->
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>PKTC-IETF-MTA-MIB::pktcMtaDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<transition to="Reboot3" event="SNMPResp"/>
				<transition to="PendingRegistration3" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot3" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration3">
				<response>
					<verify>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>600</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>600</expr>
							</eq>
						</or>
					</verify>
				</response>
				<transition to="END" event="REGISTER"/>
			</state>
		</states>
	</fsm>
	
	<remove_from fsm="UE1">
		<state ID="Connected"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<states initialstate="WaitSucceedEvent"/>
		<state ID="WaitSucceedEvent">
			<transition to="OffHook" event="SucceedEvent"/>
		</state>
		
		<transition from="OnHook" to="EndTheCall" event="OnHookComplete"/>
		
		<state ID="EndTheCall" ES="true">
			<prelude>
				<generate event="SucceedEvent" fsm="Registrar"/>
			</prelude>
		</state>
				
		<state ID="Connected" timer="20000">
			<prelude once="true">
				<verify step="7" requirements="REQ13491">
					<eq>
						<msg_ref type="sip" msg_instance="last">Response</msg_ref>
						<expr>200-INVITE</expr>
					</eq>
				</verify>
			</prelude>
			<transition to="Releasing" event="TimerExpired"/>
		</state>
	</add_to>
</pc2xml>
