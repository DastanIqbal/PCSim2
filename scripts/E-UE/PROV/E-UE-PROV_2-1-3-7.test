#//**************************************************************************
#// Filename: E-UE-PROV_2-1-3-7.test
#// Author:   Matthew Forbes
#// Creation Date: 11/04/08
#// Modified by:
#//****************************************************************************
#// Description:
#//     TC2844 TEST CASE E-UE-PROV 2.1.3.7 Ability of the eUE to
#// correctly process the absence of the sub-option TLV38.3 in the
#// Configuration File
#//
#// Objective:
#//     To test the ability of the eUE to correctly process the absence of the
#// sub-option TLV38.3 in the eUE Configuration File.
#//
#// PacketCable DUT:
#//     MTA
#//
#// Notes:
#//     - Requires provPrimitives.tcl & tftp_primitives.tcl.
#//     - Requires the specific config file in $BASE_CFG_FILE_PATH in Provisioning Server.
#//     - Requires parT.tcl parsing tool to parse data from capture file.
#//****************************************************************************

global SCRIPT_VERSION
set SCRIPT_VERSION { # $Id: E-UE-PROV_2-1-3-7.test 7406 2010-07-20 17:17:37Z dthakore $ }

DoStep "E-UE-PROV_2-1-3-7_1-1" "Initial configuration" {
    LogMsg "--- Initial PROV module ---"
    Init_PROV
    # ProvCreateConfig 1454 $MTA_MAC

} {PASS_STEP}

DoStep "E-UE-PROV_2-1-3-7_3-1" "Configure provisioning server" {
    LogMsg "--- Configure provisioning server ---"
    PROV_MODIFY_DEVICE $MTA_MAC MTAFORCW_122 cfg-2844.bin
    PROV_DEPLOY_DHCP
} {PASS_STEP}


DoStep "PRESTEP_E-UE-PROV_2-1-3-7_4-1" "Start sniffer" {
    LogMsg "--- Start sniffer ---"
    Init_CONTROLLER_LAN
    SetupCaptureControllerLan "host $MTA_IP || udp port 67"
    StartCaptureControllerLan
} {PASS_STEP}

DoStep "E-UE-PROV_2-1-3-7_4-2" "SNMP RESET" {
    SNMP_SET $oid_pktcMtaDevResetNow INTEGER 1 $MTA_IP
    actionWait "Wait 60 seconds for reboot" 60
} {PASS_STEP}

DoStep "E-UE-PROV_2-1-3-7_5-1" "pktcMtaDevProvisioningState Content Verification" {
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_GET $oid_pktcMtaDevProvisioningState $MTA_IP 20]
    LogMsg "The Value of MTA Provisioning State is: $val"
} {
    IsEqual $val 4
}

DoStep "E-UE-PROV_2-1-3-7_6-1" "pktcMtaDevErrorOidsTable Content Verification" {
    set val {}
    # Get the OID from the MTA and check it using our previously defined
    set val [SNMP_TABLE_GET $table_pktcMtaDevErrorOidsEntry $MTA_IP 3 10]
    LogMsg "The Value of MTA Error OID is: $val"
    # verify_signal "The Value of MTA Error OID should reflect the absence of TLV38.3, \
        # the Value is: $val, is this correct?"
    set vala "TLV38 Mandatory parameters not present"
    set valb "TLV38-Error - required sub-type missing"
    set valc "TLV38.3 is missing from the configuration file"
    if {$val == $vala || $val == $valb || $val == $valc} {
        PASS_STEP
    } else {
        FAIL_STEP "The value of the MTA Error OID is incorrect."
    }           
} {
    if {$val == {}} {
        FAIL_STEP "There is no reason in pktcMtaDevErrorOidsTable"
    } else {
        PASS_STEP
    }
}

DoStep "E-UE-PROV_2-1-3-7_7-1" "Stop sniffer" {
    LogMsg "--- Stop sniffer ---"
    StopCaptureControllerLan
    SaveToFileControllerLan
} {PASS_STEP}

########################## INVOKE PARSING TOOL ##################################

DoStep "E-UE-PROV_2-1-3-7_8-1" "Analyze flow data" {
    # Initial PARSER TOOL
    Init_PART
    
    # Set up parser file
    set PARSERFILE    $ETH_DEFAULT_TXT_FILE
} { PASS_STEP }

DoStep "E-UE-PROV_2-1-3-7_8-2" "Parse all data into database" {
    # Parse data
    set PARAMS_MTA_SRC      "{{} {} {} {} $MTA_IP {} {} {} {}}"
    set PARAMS_MTA_DST      "{{} {} {} {} {} {} {} $MTA_IP {}}"
    set msgID_MTA           [ParseFile $PARSERFILE "$PARAMS_MTA_SRC $PARAMS_MTA_DST"]
} {
    if { $::PART_RETURN == 0 } {
        PASS_STEP
    } else {
        FAIL_STEP "Cannot find data"
    }
}

######################### VERIFY SNMP OF MESSAGES ##########################

DoStep "E-UE-PROV_2-1-3-7_8-3" "Verify SNMPv3 INFORM from DUT to SNMP Entity(Option 122.3)" {
    set CONTINUE_PAST_STEP_ERROR 1
    LogMsg "Verify SNMPv3 INFORM from DUT to SNMP Entity"
} {
    # Verify SNMPv3 INFORM
    VerifyValue $msgID_MTA "INANY SNMP SNMP_INFORM SNMP_VERSION" "IS" "3" AND \
            "HEADERSRCIP" "IS" "$MTA_IP" AND \
            "HEADERDSTIP" "IS" "$PROV_DHCP1_IP"
}

DoStep "E-UE-PROV_2-1-3-7_8-4" "Verify there is no SNMPv2 INFORM" {
    LogMsg "Verify there is no  SNMPv2 INFORM from DUT to IP1"
} {
    # Verify SNMPv2 INFORM is NOT present
    VerifyNotValue $msgID_MTA "INANY SNMP SNMP_INFORM SNMP_VERSION" "IS" "2C" AND \
            "HEADERSRCIP" "IS" "$MTA_IP" 
}

Cleanup
