<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)
	PCPCII-135 : UPdate the script to accommodate a de-register message during the reboot. (ghassler 06/24/2009)




-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="RST-EDVA 1.2.1" 
	descrip="Ability of E-DVA To Properly Implement ifTable MIBs in the interfaces MIB Group" 
	number="RST-EDVA 1.2.1">
	
	<configure name="No Response Timeout" value="180000"/>
	
	<fsm name="Registrar">
		<models>
			<registrar/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1 PUI2"/>
		
		<states initialstate="CheckRegistrar">
			<state ID="CheckRegistrar">
				<prelude once="true">
					<generate event="Branch1Event"/>
				</prelude>
				<response>
					<if>
						<and>
							<eq>
								<msg_ref type="event"/>
								<expr>Branch1Event</expr>
							</eq>
							<eq ignoreCase="true">
								<msg_ref type="platform">Platform.Global Registrar</msg_ref>
								<expr>true</expr>
							</eq>
						</and>
						<then>
							<log promptUser="true"
								expr="This test must be run with the Global Registrar setting set to FALSE\nin the Platform Configuration File."/>
							<generate event="AuthenticateFailed"/>
						</then>	
						<else>
							<generate event="AuthenticateSucceed"/>
						</else>
					</if>
				</response>
				<transition to="CheckRegistrar" event="Branch1Event"/>
				<transition to="Reboot" event="AuthenticateSucceed"/>
				<transition to="END" event="AuthenticateFailed"/>
			</state>
			<state ID="Reboot" timer="10000">
				<!-- First we need to power cycle the UE to conduct the test -->
				<prelude once="true">
					<start_capture>
						<filter>
							<var_expr>
								<expr>host </expr>
								<msg_ref type="platform">DUT.IP</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">DUT.CM IP Address</msg_ref>
								<expr> || host </expr>
								<msg_ref type="platform">Platform.SNMP Server IP</msg_ref>
							</var_expr>
						</filter>
					</start_capture>
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>DOCS-CABLE-DEVICE-MIB::docsDevResetNow.0,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
						</mod>
						<!-- Always use version 2 for a CM reset -->
						<mod modtype="replace" hdr="version">
							<expr>2c</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPRespFailure</expr>
						</eq>
						<then>
							<fail/>
						</then>
					</if>
					<if>
						<or>
							<eq>
								<msg_ref type="sip">REGISTER.Contact.expires</msg_ref>
								<expr>0</expr>
							</eq>
							<eq>
								<msg_ref type="sip">REGISTER.Expires.value</msg_ref>
								<expr>0</expr>
							</eq>
						</or>
						<then>
							<send protocol="sip" msgtype="200-REGISTER"/>
						</then>
					</if>
				</response>
				<!-- Transitions for PendingRegistration state -->
				<transition to="Reboot" event="SNMPResp"/>
				<transition to="PendingRegistration" event="TimerExpired"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="Reboot" event="REGISTER"/>
			</state>
			
			<state ID="PendingRegistration">
				<prelude once="true">
					<var name="line1reg">
						<expr>false</expr>
					</var>
					<var name="line2reg">
						<expr>false</expr>
					</var>
				</prelude>
				<response>
					<!-- Test if it is an initial registration -->
					<if>
						<eq>
							<msg_ref type="sip">REGISTER.Authorization.nonce</msg_ref>
							<expr></expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<digest/>
							</and>
							<then>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
						</elseif>
						<elseif>
							<and>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.From.addr-spec</msg_ref>
									<msg_ref type="platform">DUT.phone number 1</msg_ref>
								</contains>
							</and>
							<then>
								<send protocol="sip" msgtype="200-SUBSCRIBE"/>
								<sleep time="100"/>
								<send protocol="sip" msgtype="NOTIFY"/>
								<assign name="line1reg">
									<msg_ref type="sip">SUBSCRIBE.Call-ID</msg_ref>
								</assign>
							</then>
						</elseif>
						<elseif>
							<and>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
									<expr>reg</expr>
								</contains>
								<contains>
									<msg_ref type="sip">SUBSCRIBE.From.addr-spec</msg_ref>
									<msg_ref type="platform">DUT.phone number 2</msg_ref>
								</contains>
							</and>
							<then>
								<send protocol="sip" msgtype="200-SUBSCRIBE"/>
								<sleep time="100"/>
								<send protocol="sip" msgtype="NOTIFY"/>
								<assign name="line2reg">
									<msg_ref type="sip">SUBSCRIBE.Call-ID</msg_ref>
								</assign>
							</then>
						</elseif>
						<elseif>
							<eq>
								<msg_ref type="sip">200-NOTIFY.Call-ID</msg_ref>
								<var_ref name="line1reg"/>
							</eq>
							<then>
								<verify step="1">
									<eq>
										<msg_ref type="sip">Response</msg_ref>
										<expr>200-NOTIFY</expr>
									</eq>
								</verify>
								<assign name="line1reg">
									<expr>true</expr>
								</assign>
							</then>
						</elseif>
						<elseif>
							<eq>
								<msg_ref type="sip">200-NOTIFY.Call-ID</msg_ref>
								<var_ref name="line2reg"/>
							</eq>
							<then>
								<verify step="1">
									<eq>
										<msg_ref type="sip">Response</msg_ref>
										<expr>200-NOTIFY</expr>
									</eq>
								</verify>
								<assign name="line2reg">
									<expr>true</expr>
								</assign>
							</then>
						</elseif>
					</if>
					<if>
						<and>
							<eq>
								<var_ref name="line1reg"/>
								<expr>true</expr>
							</eq>
							<eq>
								<var_ref name="line2reg"/>
								<expr>true</expr>
							</eq>
						</and>
						<then>
							<generate event="Branch1Event"/>
						</then>
					</if>
				</response>
				<transition to="PendingRegistration" event="REGISTER"/>
				<transition to="PendingRegistration" event="SUBSCRIBE"/>
				<transition to="PendingRegistration" event="200-NOTIFY"/>
				<transition to="ifTable1" event="Branch1Event"/>
			</state>
			
			<state ID="ifTable1">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGetTable">
						<mod modtype="add" hdr="oids">
							<expr>IF-MIB::ifTable</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
	                       <!--  IF-MIB::ifTable
								column
								 0       ifIndex
								 1       ifDescr
								 2       ifType
								 3       ifMtu
								 4       ifSpeed
								 5       ifPhysAddress
								 6       ifAdminStatus
								 7       ifOperStatus
								 8       ifLastChange
								 9       ifInOctets
								10       ifInUcastPkts
								 -       ifInNUcastPkts  - Deprecated
								11       ifInDiscards
								12       ifInErrors
								13       ifInUnknownProtos
								14       ifOutOctets
								15       ifOutUcastPkts
								 -       ifOutNUcastPkts   - Deprecated
								16       ifOutDiscards
								17       ifOutErrors
								18       ifOutQLen
								19       ifSpecific
														 -->
							<var name="docsis1">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>1</expr>
									</contains>
								</where>
							</var>
							<var name="line1">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>9</expr>
									</contains>
								</where>
							</var>
							<var name="line2">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>10</expr>
									</contains>
								</where>
							</var>
							<!--  Test for the ifIndex element -->
							<verify step="2 3">
								<eq>
									<var_ref name="line1" index="0 0 2"/>
									<expr>9</expr>
								</eq>
							</verify>
							<verify step="2 3">
								<eq>
									<var_ref name="line2" index="0 0 2"/>
									<expr>10</expr>
								</eq>
							</verify>
							<!--  Test for the ifType element -->
							<verify step="4">
								<eq>
									<var_ref name="line1" index="0 2 2"/>
									<expr>198</expr>
								</eq>
							</verify>
							<verify step="4">
								<eq>
									<var_ref name="line2" index="0 2 2"/>
									<expr>198</expr>
								</eq>
							</verify>
							<!--  Test for the ifDescr element -->
							<verify step="5">
								<eq>
									<var_ref name="line1" index="0 1 2"/>
									<expr>Voice Over Cable Interface</expr>
								</eq>
							</verify>
							<verify step="5">
								<eq>
									<var_ref name="line2" index="0 1 2"/>
									<expr>Voice Over Cable Interface</expr>
								</eq>
							</verify>
							<!--  Test for the ifAdminStatus element -->
							<verify step="6">
								<eq>
									<var_ref name="line1" index="0 6 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<verify step="6">
								<eq>
									<var_ref name="line2" index="0 6 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<!--  Test for the ifOperStatus element -->
							<verify step="7">
								<eq>
									<var_ref name="line1" index="0 7 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<verify step="7">
								<eq>
									<var_ref name="line2" index="0 7 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<!--  Test for the ifType element -->
							<verify step="8">
								<eq>
									<var_ref name="docsis1" index="0 2 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<!--  Test for the ifDescr -->
							<verify step="9">
								<eq>
									<var_ref name="docsis1" index="0 1 2"/>
									<expr>DOCSIS Embedded Interface</expr>
								</eq>
							</verify>
							<!--  Test for the ifMtu -->
							<verify step="10">
								<eq>
									<var_ref name="docsis1" index="0 3 2"/>
									<expr>0</expr>
								</eq>
							</verify>
							<!--  Test for the ifSpeed -->
							<verify step="11">
								<eq>
									<var_ref name="docsis1" index="0 4 2"/>
									<expr>0</expr>
								</eq>
							</verify>
							<!--  Test for the ifPhysAddress -->
							<verify step="12">
								<eq ignoreCase="true">
									<var_ref name="docsis1" index="0 5 2"/>
									<msg_ref type="platform">DUT.mib1</msg_ref>
								</eq>
							</verify>
							<!--  Test for the ifAdminStatus -->
							<verify step="13">
								<eq>
									<var_ref name="docsis1" index="0 6 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<!--  Test for the ifOperStatus -->
							<verify step="14">
								<eq>
									<var_ref name="docsis1" index="0 7 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<!--  Test for the ifLastChange -->
							<verify step="15">
								<and>
									<notnull>
										<var_ref name="docsis1" index="0 8 2"/>
								 	</notnull>
								 	<neq ignoreCase="true">
								 		<var_ref name="docsis1" index="0 8 2"/>
								 		<expr>ERROR</expr>
								 	</neq>
								</and>
							</verify>
							<!--  Test for the ifInOctets -->
							<verify step="16">
								<gte>
									<var_ref name="docsis1" index="0 9 2"/>
									<expr>0</expr>
								</gte>
							</verify>
							<!--  Test for the ifInDiscards -->
							<verify step="17">
								<eq>
									<var_ref name="docsis1" index="0 11 2"/>
									<expr>0</expr>
								</eq>
							</verify>
							<!--  Test for the ifInErrors -->
							<verify step="18">
								<eq>
									<var_ref name="docsis1" index="0 12 2"/>
									<expr>0</expr>
								</eq>
							</verify>
							<!--  Test for the ifInUnknownProtos -->
							<verify step="19">
								<eq>
									<var_ref name="docsis1" index="0 13 2"/>
									<expr>0</expr>
								</eq>
							</verify>
							<!--  Test for the ifOutOctets -->
							<verify step="20">
								<gte>
									<var_ref name="docsis1" index="0 14 2"/>
									<expr>0</expr>
								</gte>
							</verify>
							<!--  Test for the ifOutUcastPkts -->
							<verify step="21">
								<gte>
									<var_ref name="docsis1" index="0 15 2"/>
									<expr>0</expr>
								</gte>
							</verify>
							<!--  Test for the ifOutDiscards -->
							<verify step="22">
								<eq>
									<var_ref name="docsis1" index="0 16 2"/>
									<expr>0</expr>
								</eq>
							</verify>
							<!--  Test for the ifOutErrors -->
							<verify step="23">
								<eq>
									<var_ref name="docsis1" index="0 17 2"/>
									<expr>0</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="SetLine1Down" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetLine1Down">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>IF-MIB::ifAdminStatus.9,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq> 
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-REGISTER">
								<mod modtype="replace" hdr="Contact" param="expires">
									<expr>0</expr>
								</mod>
							</send>
						</then>
					</if>
				</response>
				<transition to="SetLine2Down" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="SetLine1Down" event="REGISTER"/>
			</state>
			
			<state ID="SetLine2Down">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>IF-MIB::ifAdminStatus.10,INTEGER,2][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq> 
							<msg_ref type="sip">Request</msg_ref>
							<expr>REGISTER</expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="200-REGISTER">
								<mod modtype="replace" hdr="Contact" param="expires">
									<expr>0</expr>
								</mod>
							</send>
						</then>
					</if>
				</response>
				<transition to="GetStatus1" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
				<transition to="SetLine2Down" event="REGISTER"/>
			</state>
			<state ID="GetStatus1">
				<prelude>
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>IF-MIB::ifAdminStatus.9</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then>
							<var name="adminStatus">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>ifAdminStatus</expr>
									</contains>
								</where>
							</var>
						    <!--  Test for the ifAdminStatus element -->
							<verify step="25">
								<eq>
									<var_ref name="adminStatus" index="0 0 2"/>
									<expr>2</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="GetStatus2" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetStatus2">
				<prelude>
					<send protocol="utility" msgtype="SNMPGet">
						<mod modtype="add" hdr="oids">
							<expr>IF-MIB::ifAdminStatus.10</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then>
							<var name="adminStatus">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>ifAdminStatus</expr>
									</contains>
								</where>
							</var>
						    <!--  Test for the ifAdminStatus element -->
							<verify step="25">
								<eq>
									<var_ref name="adminStatus" index="0 0 2"/>
									<expr>2</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="SetLine1Up" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetLine1Up">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>IF-MIB::ifAdminStatus.9,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="sip">REGISTER.Authorization.nonce</msg_ref>
							<expr></expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<digest/>
							</and>
							<then>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
						</elseif>
						<elseif>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
							<then>
								<send protocol="sip" msgtype="200-SUBSCRIBE"/>
								<sleep time="100"/>
								<send protocol="sip" msgtype="NOTIFY"/>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="SetLine1Up" event="SNMPResp"/>
				<transition to="SetLine1Up" event="REGISTER"/>
				<transition to="SetLine1Up" event="SUBSCRIBE"/>
				<transition to="SetLine2Up" event="200-NOTIFY"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="SetLine2Up">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPSet">
						<mod modtype="add" hdr="array">
							<var_expr>
									<expr>varBind 1 1 3 \r\n ][ , </expr>
									<expr>IF-MIB::ifAdminStatus.10,INTEGER,1][\r\n</expr>
							</var_expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="sip">REGISTER.Authorization.nonce</msg_ref>
							<expr></expr>
						</eq>
						<then>
							<send protocol="sip" msgtype="401-REGISTER"/>
						</then>
						<elseif>
							<and>
								<eq>
									<msg_ref type="sip">Request</msg_ref>
									<expr>REGISTER</expr>
								</eq>
								<digest/>
							</and>
							<then>
								<send protocol="sip" msgtype="200-Register"/>
							</then>
						</elseif>
						<elseif>
							<contains>
								<msg_ref type="sip">SUBSCRIBE.Event</msg_ref>
								<expr>reg</expr>
							</contains>
							<then>
								<send protocol="sip" msgtype="200-SUBSCRIBE"/>
								<sleep time="100"/>
								<send protocol="sip" msgtype="NOTIFY"/>
							</then>
						</elseif>
					</if>
				</response>
				<transition to="SetLine2Up" event="SNMPResp"/>
				<transition to="SetLine2Up" event="REGISTER"/>
				<transition to="SetLine2Up" event="SUBSCRIBE"/>
				<transition to="GetIfTable2" event="200-NOTIFY"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetIfTable2">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGetTable">
						<mod modtype="add" hdr="oids">
							<expr>IF-MIB::ifTable</expr>
						</mod>
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<var name="line1b">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>9</expr>
									</contains>
								</where>
							</var>
							<var name="line2b">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>10</expr>
									</contains>
								</where>
							</var>
							<!--  Test for the ifAdminStatus element -->
							<verify step="27">
								<eq>
									<var_ref name="line1b" index="0 6 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<verify step="27">
								<eq>
									<var_ref name="line2b" index="0 6 2"/>
									<expr>1</expr>
								</eq>
							</verify>
							<!--  Test for the ifAdminStatus element -->
							<verify step="27">
								<gt>
									<var_ref name="line1b" index="0 8 2"/>
									<var_ref name="line1" index="0 8 2"/>
								</gt>
							</verify>
							<verify step="27">
								<gt>
									<var_ref name="line2b" index="0 8 2"/>
									<var_ref name="line2b" index="0 8 2"/>
								</gt>
							</verify>
						</then>
					</if>
				</response>
				<transition to="GetNetTable" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
			
			<state ID="GetNetTable">
				<prelude once="true">
					<send protocol="utility" msgtype="SNMPGetTable">
						<mod modtype="add" hdr="oids">
							<expr>IP-MIB::ipNetToPhysicalTable</expr>
						</mod>
						<!-- mod modtype="replace" hdr="agentip">
							<msg_ref type="platform">DUT.CM IP Address</msg_ref>
						</mod-->
						<mod modtype="replace" hdr="version">
							<expr>3</expr>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="utility">Response</msg_ref>
							<expr>SNMPResp</expr>
						</eq>
						<then> 
							<var name="phys1">
								<array_ref>SNMPResp.varBind</array_ref>
								<where>
									<contains>
										<array_index index="* 0 0"/>
										<expr>ipNetToPhysicalPhysAddress.1</expr>
									</contains>
								</where>
							</var>
							<!--  Test for the ipNetToPhysicalPhysAddress element -->
							<verify step="28 29">
								<eq ignoreCase="true">
									<var_ref name="phys1" index="0 0 2"/>
									<msg_ref type="platform">DUT.mib2</msg_ref>
								</eq>
							</verify>
							<!--  Test for the ipNetToPhysicalNetAddressType element -->
							<verify step="30">
								<or>
									<startsWith>
										<var_ref name="phys1" index="0 0 0"/>
										<expr>ipNetToPhysicalPhysAddress.1.ipv4.</expr>
									</startsWith>
									<startsWith>
										<var_ref name="phys1" index="0 0 0"/>
										<expr>ipNetToPhysicalPhysAddress.1.ipv6.</expr>
									</startsWith>
								</or>		
							</verify>
							<!--  Test for the ipNetToPhysicalNetAddress element -->
							<verify step="31">
								<endsWith>
										<var_ref name="phys1" index="0 0 0"/>
										<msg_ref type="platform">DUT.CM IP Address</msg_ref>
								</endsWith>
							</verify>
							<!--  Test for the ipNetToPhysicalLastUpdated element -->
							<verify step="32">
								<and>
									<notnull>
										<var_ref name="phys1" index="0 1 2"/>
									</notnull>
									<neq ignoreCase="true">
										<var_ref name="phys1" index="0 1 2"/>
										<expr>ERROR</expr>
									</neq>
								</and>
							</verify>
							<!--  Test for the ipNetToPhysicalType element -->
							<verify step="33">
								<eq>
									<var_ref name="phys1" index="0 2 2"/>
									<expr>4</expr>
								</eq>
							</verify>
							<!--  Test for the ipNetToPhysicalState element -->
							<verify step="34">
								<or>
									<and>
										<eq>
											<var_ref name="phys1" index="0 3 2"/>
											<expr>6</expr>
										</eq>
										<ipv4>
											<msg_ref type="platform">DUT.IP</msg_ref>
										</ipv4>
									</and>
									<and>
										<eq>
											<var_ref name="phys1" index="0 3 2"/>
											<expr>1</expr>
										</eq>
										<ipv6>
											<msg_ref type="platform">DUT.IP</msg_ref>
										</ipv6>
									</and>
								</or>		
							</verify>
							<!--  Test for the ipNetToPhysicalRowStatus element -->
							<verify step="35">
								<eq>
									<var_ref name="phys1" index="0 4 2"/>
									<expr>1</expr>
								</eq>
							</verify>
						</then>
					</if>
				</response>
				<transition to="END" event="SNMPResp"/>
				<transition to="END" event="SNMPRespFailure"/>
			</state>
		</states>
	</fsm>
</pc2xml>
