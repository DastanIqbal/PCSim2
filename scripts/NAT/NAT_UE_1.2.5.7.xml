<?xml version="1.0"?>

<!--
#######################################################################################
##                                                                                   ##
## (c) 2007-2012 Cable Television Laboratories, Inc.  All rights reserved.  Any use  ##
## of this documentation/package is subject to the terms and conditions of the       ##
## CableLabs License provided to you on download of the documentation/package.       ##
##                                                                                   ##
#######################################################################################


 Change History: (Author & Date)





-->

<!-- First are the document type and the attributes for our document -->
<pc2xml version="$Revision: 8188 $" 
	name="NAT_UE_1.2.5.7" 
	descrip="Call from UE (full ICE) to a UE (Lite-ICE) -media verification" 
	number="NAT_UE_1.2.5.7">
	
	<template file="./templates/CallTermAtUETemp.xml" name="UE1"/>
	
	<remove_from fsm="UE1">
		<state ID="Setup"/>
		<state ID="Answer"/>
		<state ID="Alerting"/>
		<state ID="Proceeding"/>
	</remove_from>
	
	<add_to fsm="UE1">
		<NE targets="RTP"/>
		<state ID="Setup">
			<prelude once="true">
				<send protocol="sip" msgtype="Invite">
					<mod modtype="replace" hdr="c" param="address">
						<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
					</mod>
					<mod modtype="add" hdr="SDP">
						<var_expr>
							<expr>a=ice-pwd:asd88fgpdd777uzjYhagZg\r\n</expr>
							<expr>a=ice-ufrag:8hhY\r\n</expr>
							<expr>m=audio </expr>
							<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
							<expr> RTP/AVP 0\r\n</expr>
							<expr>a=candidate:1 1 UDP 2130706431 </expr>
							<msg_ref type="platform">PCSCF1.IP</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">PCSCF1.port</msg_ref>
							<expr> typ host unknownAttrunknownVal\r\n</expr>
							<expr>a=candidate:2 1 UDP 1694498815 </expr>
							<msg_ref type="platform">Platform.STUN IP Address</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">Platform.STUN UDP Port</msg_ref>
							<expr> typ srflx raddr </expr>
							<msg_ref type="platform">PCSCF1.IP</msg_ref>
							<expr> rport </expr>
							<msg_ref type="platform">PCSCF1.port</msg_ref>
							<expr> unknownAttrunknownVal\r\n</expr>
							<expr>a=candidate:3 1 UDP 16777215 </expr>
							<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
							<expr> </expr>
							<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
							<expr> typ relay raddr</expr>
							<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
							<expr> rport </expr>
							<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
							<expr> unknownAttr unknownVal\r\n</expr>
						</var_expr>
					</mod>
				</send>
			</prelude>
			<!-- Expected responses are 100, 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
				<if>
					<contains>
						<msg_ref type="sip">Response.SDP</msg_ref>
						<expr>rtpmap</expr>
					</contains>
					<then>
						<generate event="Branch1Event"/>
					</then>
				</if>
			</response>
			<transition to="ReceivedSDP" event="Branch1Event"/>
			<transition to="Proceeding" event="100-INVITE"/>
			<transition to="Alerting" event="180-INVITE"/>
			<transition to="Alerting" event="183-INVITE"/>
		</state>
		
		<state ID="Proceeding">
			<!-- Expected responses are 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
				<if>
					<contains>
						<msg_ref type="sip">Response.SDP</msg_ref>
						<expr>rtpmap</expr>
					</contains>
					<then>
						<generate event="Branch1Event"/>
					</then>
				</if>
			</response>
			<transition to="ReceivedSDP" event="Branch1Event"/>
			<transition to="Alerting" event="180-INVITE"/>
			<transition to="Alerting" event="183-INVITE"/>
		</state>
		
		<state ID="Alerting" timer="12000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Take DUT phone off hook-->
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
				<if>
					<contains>
						<msg_ref type="sip">Response.SDP</msg_ref>
						<expr>rtpmap</expr>
					</contains>
					<then>
						<generate event="Branch1Event"/>
					</then>
				</if>
			</response>
			<transition to="ReceivedSDP" event="Branch1Event"/>
			<transition to="Alerting" event="200-PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="Alerting" event="18x-INVITE"/>
			<transition to="Answer" event="TimerExpired"/>
		</state>
		
		<state ID="Answer">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
				<if>
					<contains>
						<msg_ref type="sip">Response.SDP</msg_ref>
						<expr>rtpmap</expr>
					</contains>
					<then>
						<generate event="Branch1Event"/>
					</then>
				</if>
			</response>
			<transition to="ReceivedSDP" event="Branch1Event"/>
			<transition to="Answer" event="UPDATE"/>
			<transition to="Answer" event="200-PRACK"/>
			<transition to="Answer" event="18x-INVITE"/>
			<transition to="Answer" event="OffHookComplete"/>
		</state>
		
		<state ID="ReceivedSDP" timer="10000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<verify step="3" requirements="RFC4483, RFC4487">
							<and>
								<eq>
									<msg_ref type="event"/>
									<expr>TimerExpired</expr>
								</eq>
								<neq>
									<msg_ref type="event"/>
									<expr>MediaComplete</expr>
								</neq>
							</and>
						</verify>
					</then>
				</if>
			</response>
			<postlude>
				<generate event="Branch2Event" fsm="STUN1"/>
			</postlude>
			<transition to="CallComplete" event="TimerExpired"/>
		</state>
		<state ID="CallComplete">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Take DUT phone off hook-->
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!-- Step 7 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram- received UPDATE -->
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<!-- Step 8 from the Default Message Flow Call-Term-at-UE(DUT) Sequence Diagram - received 180 -->
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
				<if>
					<eq>
						<msg_ref type="sip">Response</msg_ref>
						<expr>200-INVITE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="ACK"/>
					</then>
				</if>
			</response>
			<transition to="CallComplete" event="200-PRACK"/>
			<transition to="CallComplete" event="UPDATE"/>
			<transition to="CallComplete" event="18x-INVITE"/>
			<transition to="CallComplete" event="200-INVITE"/>
			<transition to="SendReinvite" event="TimerExpired"/>
			<transition to="CallComplete" event="200-PRACK"/>
			<transition to="CallComplete" event="OffHookComplete"/>
			<transition to="CallComplete" event="200-INVITE"/>
		</state>
		
		<state ID="SendReinvite">
			<prelude once="true">
				<send protocol="sip" msgtype="ReInvite"/>
			</prelude>
			<!-- Expected responses are 100, 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="Proceeding1" event="100-INVITE"/>
			<transition to="Alerting1" event="180-INVITE"/>
			<transition to="Alerting1" event="183-INVITE"/>
			<transition to="Connected1" event="200-INVITE"/>
		</state>
		
		<state ID="Proceeding1">
			<!-- Expected responses are 180, 183 or 200 -->
			<response>
				<if>
					<contains>
						<msg_ref type="sip" hdr_instance="any">18x-Invite.Require</msg_ref>
						<expr>100rel</expr>
					</contains>
					<then>
						<!--Reliablity required for test sending Prack message to peer.-->
						<send protocol="sip" msgtype="Prack"/>
					</then>
				</if>
			</response>
			<transition to="Alerting1" event="180-INVITE"/>
			<transition to="Alerting1" event="183-INVITE"/>
			<transition to="Connected1" event="200-INVITE"/>
		</state>
		
		<state ID="Alerting1" timer="12000">
			<response>
				<if>
					<eq>
						<msg_ref type="event"/>
						<expr>TimerExpired</expr>
					</eq>
					<then>
						<!--Take DUT phone off hook-->
						<send protocol="utility" msgtype="OffHook"/>
					</then>
				</if>
				<!-- Expected responses are 180, 183, PRACK, UPDATE, or 200 -->
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<!--QoS required for test, sending a 200-OK to Update message to peer.-->
						<send protocol="sip" msgtype="200-Update"/>
					</then>
					<elseif>
						<and>
							<eq>
								<msg_ref type="sip">Response.Status-Line.status-code</msg_ref>
								<expr>180</expr>
							</eq>
							<contains>
								<msg_ref type="sip" hdr_instance="any">180-INVITE.Require</msg_ref>
								<expr>100rel</expr>
							</contains>
						</and>
						<then>
							<!--Reliablity required for test, sending Prack message to peer.-->
							<send protocol="sip" msgtype="Prack"/>
						</then>
					</elseif>
				</if>
			</response>
			<transition to="Alerting" event="200-PRACK"/>
			<transition to="Alerting" event="UPDATE"/>
			<transition to="Alerting" event="18x-INVITE"/>
			<transition to="Answer" event="TimerExpired"/>
			<transition to="Connected" event="200-INVITE"/>
		</state>
		<state ID="Answer1">
			<response>
				<if>
					<eq>
						<msg_ref type="sip">Request</msg_ref>
						<expr>UPDATE</expr>
					</eq>
					<then>
						<send protocol="sip" msgtype="200-Update"/>
					</then>
				</if>
			</response>
			<transition to="Answer1" event="UPDATE"/>
			<transition to="Answer1" event="200-PRACK"/>
			<transition to="Answer1" event="18x-INVITE"/>
			<transition to="Answer1" event="OffHookComplete"/>
			<transition to="Connected1" event="200-INVITE"/>
		</state>
		
		<state ID="Connected1">
			<prelude once="true">
				<send protocol="sip" msgtype="ACK"/>
			</prelude>
			<response>
				<if>
					<eq>
						<msg_ref type="rtp" msg_instance="last">Message</msg_ref>
						<expr>RTP</expr>
					</eq>
					<then>
						<verify step="6" requirements="RFC4483, RFC4487, RFC4484">
							<eq>
								<msg_ref type="rtp" msg_instance="last">Message</msg_ref>
								<expr>RTP</expr>
							</eq>
						</verify>
					</then>
				</if>
			</response>
			<transition to="Connected" event="OffHookComplete"/>
			<transition to="Releasing1" event="RTP"/>
		</state>
		
		<state ID="Releasing1">
			<prelude>
				<send protocol="sip" msgtype="Bye"/>
			</prelude>
			<transition to="OnHook1" event="200-BYE"/>
		</state>
		
		<state ID="OnHook1">
			<prelude>
				<send protocol="utility" msgtype="OnHook"/>
			</prelude>
			<transition to="END" event="OnHookComplete"/>
		</state>
	</add_to>
	
	<fsm name="STUN1">
		<models>
			<stun/>
		</models>
		
		<NE sim_type="term" elements="SCSCF1 PCSCF1" targets="SCSCF1"/>
		
		<states initialstate="WaitBranch2Event">
			<state ID="WaitBranch2Event">
				<response>
					<if>
						<eq>
							<msg_ref type="stun">BindingRequest.DestinationAddress.Port</msg_ref>
							<msg_ref type="platform">Platform.SIP Stack 1 UDP Port</msg_ref>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to="BindingReq1" event="Branch2Event"/>
				<transition to="WaitSucceedEvent" event="BindingRequest"/>
			</state>
			
			<state ID="BindingReq1">
				<prelude once="true">
					<send protocol="stun" msgtype="BindingRequest">
						<mod modtype="replace" hdr="XorMappedAddress" param="IP">
							<msg_ref type="platform">UE1.IP</msg_ref>
						</mod>
						<mod modtype="replace" hdr="XorMappedAddress" param="port">
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="stun">BindingRequest.DestinationAddress.Port</msg_ref>
							<msg_ref type="platform">Platform.SIP Stack 1 UDP Port</msg_ref>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to="BindingReq2" event="BindingResponse"/>
				<transition to="BindingReq1" event="BindingRequest"/>
			</state>
			
			<state ID="BindingReq2">
				<prelude once="true">
					<send protocol="stun" msgtype="BindingRequest">
						<mod modtype="add" hdr="USE-CANDIDATE">
							<expr></expr>
						</mod>
						<mod modtype="replace" hdr="XorMappedAddress" param="IP">
							<msg_ref type="platform">Platform.TURN IP Address</msg_ref>
						</mod>
						<mod modtype="replace" hdr="XorMappedAddress" param="port">
							<msg_ref type="platform">Platform.TURN UDP Port</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="stun">BindingRequest.DestinationAddress.Port</msg_ref>
							<msg_ref type="platform">Platform.SIP Stack 1 UDP Port</msg_ref>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to=" BindingReq3" event="BindingResponse"/>
				<transition to="BindingReq2" event="BindingRequest"/>
			</state>
			
			<state ID="BindingReq3">
				<prelude once="true">
					<send protocol="stun" msgtype="BindingRequest">
						<mod modtype="add" hdr="USE-CANDIDATE">
							<expr/>
						</mod>
						<mod modtype="replace" hdr="XorMappedAddress" param="IP">
							<msg_ref type="platform">UE1.IP</msg_ref>
						</mod>
						<mod modtype="replace" hdr="XorMappedAddress" param="port">
							<msg_ref type="platform">UE1.SDPPort</msg_ref>
						</mod>
					</send>
				</prelude>
				<response>
					<if>
						<eq>
							<msg_ref type="stun">BindingRequest.DestinationAddress.Port</msg_ref>
							<msg_ref type="platform">Platform.SIP Stack 1 UDP Port</msg_ref>
						</eq>
						<then>
							<send protocol="stun" msgtype="BindingResponse"/>
						</then>
					</if>
				</response>
				<transition to=" SendBranch3Event" event="BindingResponse"/>
				<transition to="BindingReq2" event="BindingRequest"/>
			</state>
			
			<state ID="SendBranch3Event">
				<prelude>
					<generate event="Branch3Event" fsm="UE1"/>
				</prelude>
				<transition to="END" event="SucceedEvent"/>
			</state>
		</states>
	</fsm>
</pc2xml>
